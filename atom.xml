<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>about code</title>
    <link href="https://enter-haken.github.io/atom.xml" rel="self" />
    <link href="https://enter-haken.github.io" />
    <id>https://enter-haken.github.io/atom.xml</id>
    <author>
        <name>Jan Frederik Hake</name>
        <email>jan_hake@gmx.de</email>
    </author>
    <updated>2018-08-07T00:00:00Z</updated>
    <entry>
    <title>time for money, money for time</title>
    <link href="https://enter-haken.github.io/posts/2018-08-07-time.html" />
    <id>https://enter-haken.github.io/posts/2018-08-07-time.html</id>
    <published>2018-08-07T00:00:00Z</published>
    <updated>2018-08-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I have two kids, 16 and 20 years old. My third child will see the light of the world in December this year. My oldest boy currently took a year of, went to Japan and currently lives in Australia. He ask me, what to do after graduate school. I told him, to find a job, which is currently complicated for robots to take off. My youngest girl still has three years in school, but she is also thinking about the time after graduation.</p>
<p>As they think about their future, I think about what kind of world I will leave for them.</p>
<p>Every being has a limited amount of time on this planet. <code>Time</code> is the only true <code>currency</code>, we have in our lives. As we think of <code>currency</code> we often hear the sentence.</p>
<pre><code>Time is money.</code></pre>
<p>I think the opposite is also true.</p>
<pre><code>Money is time.</code></pre>
<p>Let’s take a few thoughts.</p>
<!--more-->
<p>In the first days of humanity, a human bridges long distances by foot. Formerly we used horse-drawn carriages, later on cars, trains and planes. We became comfortable over the time.</p>
<p>I sold my car in 2002. Since then, I used public transport and my bicycle. In 2016, I bought a navigation device, which recorded my kilometers over time. I cycled about 6800 kilometers since recording.</p>
<p>In my thoughts, being physical active, means more <code>time</code> on this planet for me. A human body should be in motion as much as possible, so that the body is healthy till the old age. Of course, a motorist can also get old, but the quality of live is greater in a healthy body.</p>
<p>So what I did in fact is to spend <code>money</code> on a bicycle and get <code>time</code> in the end.</p>
<p>Until the <a href="https://en.wikipedia.org/wiki/Life_in_Great_Britain_during_the_Industrial_Revolution">beginning of the 20th century</a>, work is still hard. The mortality rate has decreased but is still at a high rate. Labour unions have helped to shape working life as we know it today. But how does the working live looks like in a few decades?</p>
<p>In the industrialized world, many workers have a 40 hours week with a weekend off. They change <code>time</code> for <code>money</code>. They use this <code>money</code> for their daily live. They pay their rent, buy their food, pay for child care or going on vacation. At the end of the day there is some <code>money</code> left, to save for bad times. After a hard working live you get your well-erned pension.</p>
<p>This is how it works today, but the world is in motion.</p>
<p>The automation rate grows at an exponential growth. There is less work for the whole population. Less workers means less people who funds the current pensions. So, who buys all the stuff, which the companies are producing? If the automation rate grows at the current rate, this will become a social problem. The richer are becoming richer, and the poorer are becoming poorer. The middle class is shrinking and it is a matter of time, until the system will collapse.</p>
<p>Today I pay into the pension fund. My father and other pensioners get paid from it. I doubt, that this will work for me, when I come into the pensioners age, although my children and other people children will pay into it. How can I tell my children, they will have a good live, when I doubt so? How can I change my <code>money</code> back into <code>time</code>? What needs to be changed so that my children have a future again?</p>
<p>Becoming rich isn’t a solution, because the system will collapse at some time. Working all day long will let your body collapse at some point.</p>
<p>What is a fair exchange for <code>money</code> and <code>time</code>? What is fair for descendants?</p>
<p>I think it’s a global problem, so there has to be a global solution. As it is often so, there exists more than one solution.</p>
<p>What will be yours?</p>]]></summary>
</entry>
<entry>
    <title>first steps with rasmus</title>
    <link href="https://enter-haken.github.io/posts/2018-07-31-rasmus-part3.html" />
    <id>https://enter-haken.github.io/posts/2018-07-31-rasmus-part3.html</id>
    <published>2018-07-31T00:00:00Z</published>
    <updated>2018-07-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Having the first parts of <code>rasmus</code> <a href="/posts/2018-07-23-rasmus-part2.html">in motion</a>, I started my first tests. There is no user management yet and the frontend is somehow static. So the first inserts will be made via <code>curl</code>.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="387pt" height="638pt"
 viewBox="0.00 0.00 386.50 638.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 634)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-634 382.5,-634 382.5,4 -4,4"/>
<!-- curl -->
<g id="node1" class="node">
<title>curl</title>
<path fill="#ffffff" stroke="#ffffff" d="M298,-630C298,-630 237,-630 237,-630 231,-630 225,-624 225,-618 225,-618 225,-606 225,-606 225,-600 231,-594 237,-594 237,-594 298,-594 298,-594 304,-594 310,-600 310,-606 310,-606 310,-618 310,-618 310,-624 304,-630 298,-630"/>
<text text-anchor="start" x="252" y="-615.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="256" y="-615.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">curl</text>
<text text-anchor="start" x="233" y="-601.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">web client </text>
</g>
<!-- router -->
<g id="node2" class="node">
<title>router</title>
<path fill="#ffffff" stroke="#ffffff" d="M300,-547C300,-547 235,-547 235,-547 229,-547 223,-541 223,-535 223,-535 223,-509 223,-509 223,-503 229,-497 235,-497 235,-497 300,-497 300,-497 306,-497 312,-503 312,-509 312,-509 312,-535 312,-535 312,-541 306,-547 300,-547"/>
<text text-anchor="start" x="244.5" y="-532.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="248.5" y="-532.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">router</text>
<text text-anchor="start" x="235" y="-518.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">managing</text>
<text text-anchor="start" x="231" y="-504.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">http routes </text>
</g>
<!-- curl&#45;&gt;router -->
<g id="edge1" class="edge">
<title>curl&#45;&gt;router</title>
<path fill="none" stroke="#000000" d="M267.5,-593.7872C267.5,-583.2736 267.5,-569.693 267.5,-557.1779"/>
<polygon fill="#000000" stroke="#000000" points="271.0001,-557.0065 267.5,-547.0065 264.0001,-557.0065 271.0001,-557.0065"/>
<text text-anchor="start" x="267.5" y="-569" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> </text>
<text text-anchor="start" x="271.5" y="-569" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="10.00" fill="#000000">POST</text>
<text text-anchor="start" x="299.5" y="-569" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> request </text>
</g>
<!-- inbound -->
<g id="node3" class="node">
<title>inbound</title>
<path fill="#ffffff" stroke="#ffffff" d="M275.5,-450C275.5,-450 157.5,-450 157.5,-450 151.5,-450 145.5,-444 145.5,-438 145.5,-438 145.5,-412 145.5,-412 145.5,-406 151.5,-400 157.5,-400 157.5,-400 275.5,-400 275.5,-400 281.5,-400 287.5,-406 287.5,-412 287.5,-412 287.5,-438 287.5,-438 287.5,-444 281.5,-450 275.5,-450"/>
<text text-anchor="start" x="185.5" y="-435.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="189.5" y="-435.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">inbound</text>
<text text-anchor="start" x="153.5" y="-421.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">add entities into the</text>
<text text-anchor="start" x="172.5" y="-407.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">transfer table </text>
</g>
<!-- router&#45;&gt;inbound -->
<g id="edge2" class="edge">
<title>router&#45;&gt;inbound</title>
<path fill="none" stroke="#000000" d="M254.2335,-496.7676C248.2127,-485.3163 240.9994,-471.5969 234.4998,-459.2348"/>
<polygon fill="#000000" stroke="#000000" points="237.4518,-457.3284 229.7001,-450.1061 231.2559,-460.586 237.4518,-457.3284"/>
<text text-anchor="start" x="244.5" y="-471" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> validation </text>
</g>
<!-- transfer -->
<g id="node5" class="node">
<title>transfer</title>
<path fill="#ffffff" stroke="#ffffff" d="M261.5,-342C261.5,-342 127.5,-342 127.5,-342 121.5,-342 115.5,-336 115.5,-330 115.5,-330 115.5,-318 115.5,-318 115.5,-312 121.5,-306 127.5,-306 127.5,-306 261.5,-306 261.5,-306 267.5,-306 273.5,-312 273.5,-318 273.5,-318 273.5,-330 273.5,-330 273.5,-336 267.5,-342 261.5,-342"/>
<text text-anchor="start" x="165.5" y="-327.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="169.5" y="-327.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">transfer</text>
<text text-anchor="start" x="123.5" y="-313.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">database gatekeeper </text>
</g>
<!-- inbound&#45;&gt;transfer -->
<g id="edge4" class="edge">
<title>inbound&#45;&gt;transfer</title>
<path fill="none" stroke="#000000" d="M211.0052,-399.774C207.8714,-385.3868 203.9343,-367.3122 200.6915,-352.4245"/>
<polygon fill="#000000" stroke="#000000" points="204.0225,-351.2715 198.4743,-342.2456 197.1829,-352.7614 204.0225,-351.2715"/>
<text text-anchor="start" x="207.5" y="-374" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> insert into</text>
<text text-anchor="start" x="209" y="-363" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000">database </text>
</g>
<!-- socket -->
<g id="node4" class="node">
<title>socket</title>
<path fill="#ffffff" stroke="#ffffff" d="M327,-36C327,-36 222,-36 222,-36 216,-36 210,-30 210,-24 210,-24 210,-12 210,-12 210,-6 216,0 222,0 222,0 327,0 327,0 333,0 339,-6 339,-12 339,-12 339,-24 339,-24 339,-30 333,-36 327,-36"/>
<text text-anchor="start" x="234.5" y="-21.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="238.5" y="-21.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">websocket</text>
<text text-anchor="start" x="218" y="-7.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">client connection </text>
</g>
<!-- socket&#45;&gt;router -->
<g id="edge3" class="edge">
<title>socket&#45;&gt;router</title>
<path fill="none" stroke="#000000" d="M291.949,-36.3002C296.2802,-41.6637 300.5281,-47.7705 303.5,-54 316.2241,-80.6717 317.5,-89.4486 317.5,-119 317.5,-425 317.5,-425 317.5,-425 317.5,-447.7943 306.4564,-470.5879 294.7495,-488.3469"/>
<polygon fill="#000000" stroke="#000000" points="291.8212,-486.4275 288.9947,-496.6384 297.5719,-490.4188 291.8212,-486.4275"/>
<text text-anchor="start" x="317.5" y="-275.5" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> backchannel </text>
</g>
<!-- counter -->
<g id="node6" class="node">
<title>counter</title>
<path fill="#ffffff" stroke="#ffffff" d="M212,-250C212,-250 89,-250 89,-250 83,-250 77,-244 77,-238 77,-238 77,-212 77,-212 77,-206 83,-200 89,-200 89,-200 212,-200 212,-200 218,-200 224,-206 224,-212 224,-212 224,-238 224,-238 224,-244 218,-250 212,-250"/>
<text text-anchor="start" x="121.5" y="-235.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="125.5" y="-235.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">counter</text>
<text text-anchor="start" x="85" y="-221.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">Postgres notification</text>
<text text-anchor="start" x="125" y="-207.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">listener </text>
</g>
<!-- transfer&#45;&gt;counter -->
<g id="edge5" class="edge">
<title>transfer&#45;&gt;counter</title>
<path fill="none" stroke="#000000" d="M186.4297,-305.8419C180.677,-292.8983 172.7657,-275.0978 165.8308,-259.4943"/>
<polygon fill="#000000" stroke="#000000" points="168.9268,-257.8425 161.6671,-250.1259 162.5302,-260.6855 168.9268,-257.8425"/>
<text text-anchor="start" x="180" y="-281" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> send a</text>
<text text-anchor="start" x="178.5" y="-271" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="10.00" fill="#000000">receipt</text>
<text text-anchor="start" x="210.5" y="-271" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> </text>
</g>
<!-- manager -->
<g id="node7" class="node">
<title>manager</title>
<path fill="#ffffff" stroke="#ffffff" d="M131,-144C131,-144 12,-144 12,-144 6,-144 0,-138 0,-132 0,-132 0,-106 0,-106 0,-100 6,-94 12,-94 12,-94 131,-94 131,-94 137,-94 143,-100 143,-106 143,-106 143,-132 143,-132 143,-138 137,-144 131,-144"/>
<text text-anchor="start" x="39" y="-129.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="43" y="-129.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">manager</text>
<text text-anchor="start" x="35.5" y="-115.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">executes a</text>
<text text-anchor="start" x="8" y="-101.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">database manager </text>
</g>
<!-- counter&#45;&gt;manager -->
<g id="edge6" class="edge">
<title>counter&#45;&gt;manager</title>
<path fill="none" stroke="#000000" d="M77.5854,-199.8933C70.8679,-194.9374 64.9331,-189.0312 60.5,-182 55.27,-173.7049 54.958,-163.6349 56.7931,-154.0019"/>
<polygon fill="#000000" stroke="#000000" points="60.2085,-154.7755 59.3665,-144.2142 53.4386,-152.9955 60.2085,-154.7755"/>
<text text-anchor="start" x="60.5" y="-175" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> executes the</text>
<text text-anchor="start" x="68" y="-165" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="10.00" fill="#000000">manager</text>
<text text-anchor="start" x="109" y="-165" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> </text>
</g>
<!-- graph_elixir -->
<g id="node8" class="node">
<title>graph_elixir</title>
<path fill="#ffffff" stroke="#ffffff" d="M277.5,-137C277.5,-137 185.5,-137 185.5,-137 179.5,-137 173.5,-131 173.5,-125 173.5,-125 173.5,-113 173.5,-113 173.5,-107 179.5,-101 185.5,-101 185.5,-101 277.5,-101 277.5,-101 283.5,-101 289.5,-107 289.5,-113 289.5,-113 289.5,-125 289.5,-125 289.5,-131 283.5,-137 277.5,-137"/>
<text text-anchor="start" x="209" y="-122.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="213" y="-122.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">graph</text>
<text text-anchor="start" x="181.5" y="-108.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">entity manager </text>
</g>
<!-- counter&#45;&gt;graph_elixir -->
<g id="edge8" class="edge">
<title>counter&#45;&gt;graph_elixir</title>
<path fill="none" stroke="#000000" d="M189.1953,-199.7688C195.5403,-194.4408 201.6242,-188.4557 206.5,-182 214.3438,-171.6146 220.0764,-158.4436 224.0579,-146.8325"/>
<polygon fill="#000000" stroke="#000000" points="227.445,-147.7292 227.1151,-137.1395 220.7691,-145.6236 227.445,-147.7292"/>
<text text-anchor="start" x="218.5" y="-175" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> load the result</text>
<text text-anchor="start" x="219.5" y="-165" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000">from </text>
<text text-anchor="start" x="242.5" y="-165" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="10.00" fill="#000000">transfer</text>
<text text-anchor="start" x="278.5" y="-165" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> </text>
</g>
<!-- manager&#45;&gt;counter -->
<g id="edge7" class="edge">
<title>manager&#45;&gt;counter</title>
<path fill="none" stroke="#000000" d="M103.9447,-144.1056C109.8923,-149.6024 115.7213,-155.6808 120.5,-162 126.9667,-170.5513 132.5476,-180.7193 137.0823,-190.3643"/>
<polygon fill="#000000" stroke="#000000" points="133.9984,-192.0431 141.2623,-199.7557 140.3935,-189.1966 133.9984,-192.0431"/>
<text text-anchor="start" x="133.5" y="-169.5" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> gets the result </text>
</g>
<!-- graph_elixir&#45;&gt;socket -->
<g id="edge9" class="edge">
<title>graph_elixir&#45;&gt;socket</title>
<path fill="none" stroke="#000000" d="M238.3829,-100.9455C243.4635,-87.8338 250.6557,-69.7111 257.5,-54 258.7301,-51.1762 260.0471,-48.2447 261.3834,-45.3285"/>
<polygon fill="#000000" stroke="#000000" points="264.5787,-46.758 265.6354,-36.216 258.2352,-43.7981 264.5787,-46.758"/>
<text text-anchor="start" x="257.5" y="-68" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000">update the</text>
<text text-anchor="start" x="268.5" y="-57" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000">client</text>
</g>
</g>
</svg>
</div>
<p>The <code>backchannel</code> isn’t in place yet.</p>
<p>Currently you can see the result in the <code>rasmus</code> log. Let’s demonstrate this workflow with an example.</p>
<!--more-->
<h1 id="router">router</h1>
<p>At first a <code>user</code> must be inserted into the database.</p>
<pre><code>API_URL=&quot;http://localhost:8080/api&quot;

curl -H &quot;Content-Type: application/json&quot; -X POST $API_URL -d @- &lt;&lt;BODY
{
  &quot;action&quot;: &quot;add&quot;,
   &quot;entity&quot;: &quot;user&quot;,
   &quot;data&quot;: {
     &quot;first_name&quot;: &quot;Jan Frederik&quot;,
     &quot;last_name&quot;: &quot;Hake&quot;,
     &quot;email_address&quot;: &quot;jan_hake@gmx.de&quot;,
     &quot;login&quot;: &quot;jan_hake&quot;
   }
}
BODY</code></pre>
<p>The <a href="https://github.com/enter-haken/rasmus/blob/master/lib/web/router.ex">router</a> make some simple checks on the posted json data.</p>
<pre><code>post &quot;/api&quot; do
    with {:ok, action} &lt;- get_action_from(conn.body_params),
         {:ok, entity}  &lt;- get_entity_from(conn.body_params),
         {:ok, data } &lt;- get_data_from(conn.body_params)
    do
      Logger.info(&quot;Got #{action} for #{entity} with #{inspect(data)}&quot;)

      Core.Inbound.add(conn.body_params)

      conn
      |&gt; send_resp(200, get_succeeded_response())
    else
      {:error, message} -&gt;
        Logger.warn(&quot;Got malformed request: #{message}&quot;)

        conn
        |&gt; send_resp(422, get_error_response(message))
    end
end</code></pre>
<p>Only the <code>actions</code> in</p>
<pre><code>@actions [&quot;add&quot;,&quot;update&quot;,&quot;get&quot;,&quot;delete&quot;]</code></pre>
<p>will be valid <code>actions</code>.</p>
<pre><code>defp get_action_from(%{ &quot;action&quot; =&gt;  action } = _body_params) do
    case Enum.member?(@actions, action) do
      true -&gt; {:ok, action }
      _ -&gt; { :error, &quot;Action &#39;#{action}&#39; is not valid. Valid actions are #{get_quoted(@actions)}&quot;}
    end
  end

defp get_action_from(_body_params), do: { :error, &quot;action is missing. Valid actions are #{get_quoted(@actions)}&quot; }</code></pre>
<p>Otherwise you get into the <code>error</code> path.</p>
<p>The similar things will be checked for valid <code>entities</code>.</p>
<pre><code>@entities [&quot;user&quot;,&quot;privilege&quot;,&quot;role&quot;,&quot;link&quot;,&quot;appointment&quot;,&quot;list&quot;,&quot;graph&quot;]

defp get_entity_from(%{ &quot;entity&quot; =&gt; entity } = _body_params) do
  case Enum.member?(@entities, entity) do
    true -&gt; {:ok, entity }
    _ -&gt; { :error, &quot;Entity &#39;#{entity}&#39; is not valid. Valid entities are #{get_quoted(@entities)}&quot; }
  end
end

defp get_entity_from(_body_params), do: { :error, &quot;entity is missing. Valid entities are #{get_quoted(@entities)}&quot; }</code></pre>
<p>A helper function will make some pretty stuff with the error message.</p>
<pre><code># get_quoted([&quot;a&quot;,&quot;b&quot;]) -&gt; &#39;a&#39;, &#39;b&#39;
defp get_quoted(strings) do
  strings
  |&gt; Enum.map(fn(x) -&gt; &quot;\&#39;#{x}\&#39;&quot; end)
  |&gt; Enum.join(&quot;, &quot;)
end</code></pre>
<p>If everything has worked as expected,</p>
<pre><code> Core.Inbound.add(conn.body_params)</code></pre>
<p>will add the <code>entity</code> into the database.</p>
<h1 id="inbound">Inbound</h1>
<p>The <a href="https://github.com/enter-haken/rasmus/blob/master/lib/core/inbound.ex">inbound</a> <code>GenServer</code> has the task, to insert <code>entities</code> into the database.</p>
<pre><code>def handle_cast({:add, payload}, state) do
  case Postgrex.query(state, &quot;INSERT INTO rasmus.transfer (request) VALUES ($1)&quot;, [payload]) do
    {:ok, result} -&gt; Logger.debug(&quot;added into transfer: #{inspect(result)}&quot;)
    {:error, error} -&gt; Logger.error(&quot;adding into transfer failed: #{inspect(error)}. Tried to add #{inspect(payload)}&quot;)
  end
  {:noreply, state }
end</code></pre>
<p>The <code>client</code> function</p>
<pre><code>def add(entity) do
  GenServer.cast(:inbound_worker, {:add, entity})
end</code></pre>
<p>is called from the <code>router</code>.</p>
<h1 id="transfer">transfer</h1>
<p>The <a href="https://github.com/enter-haken/rasmus/blob/master/database_scripts/transfer.sql#L35">transfer</a> table it self is quiet simple</p>
<pre><code>CREATE TABLE transfer(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    state transfer_state NOT NULL DEFAULT &#39;pending&#39;,
    request JSONB NOT NULL,
    response JSONB
);</code></pre>
<p>When a <code>request</code> is inserted, a <a href="https://github.com/enter-haken/rasmus/blob/master/database_scripts/notifications.sql">notification</a> will be send to the backend.</p>
<pre><code>CREATE FUNCTION send_message(id UUID, state transfer_state, request JSONB, response JSONB) RETURNS VOID AS $$
DECLARE
    message_response JSONB;
BEGIN
    message_response := &#39;[]&#39; || (
        jsonb_build_object(&#39;id&#39;, id) ||
        jsonb_build_object(&#39;state&#39;, state) ||
        jsonb_build_object(&#39;action&#39;, request-&gt;&gt;&#39;action&#39;) ||
        jsonb_build_object(&#39;entity&#39;, request-&gt;&gt;&#39;entity&#39;)
    );

    PERFORM pg_notify(&#39;rasmus&#39;, message_response-&gt;&gt;0);
END
$$ LANGUAGE plpgsql;

CREATE FUNCTION send_transfer_message() RETURNS TRIGGER AS $$
BEGIN 
    PERFORM rasmus.send_message(NEW.id, NEW.state, NEW.request, NEW.response);
    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER send_receipt_trigger BEFORE INSERT ON transfer
FOR EACH ROW EXECUTE PROCEDURE send_transfer_message();</code></pre>
<p>At this point, it does not happen very much. This approach will reduce the inbound message queue from the <code>inbound</code> <code>GenServer</code>. Inserting a <code>request</code> should be as fast as possible.</p>
<h1 id="counter">counter</h1>
<p>The <code>counter</code> listens to Postgres notifications,</p>
<pre><code>def handle_info({:notification, pid, ref, &quot;rasmus&quot;, payload},_) do
    case Jason.decode(payload) do

      {:ok , %{ &quot;id&quot; =&gt; id, &quot;state&quot; =&gt; &quot;pending&quot;, }} -&gt; Core.Manager.perform(id)

      #
      # ...
      #

      _ -&gt; Logger.warn(&quot;got unhandled notification: #{inspect(payload)}&quot;)
    end
    {:noreply, {pid, ref}}
end</code></pre>
<p>and calls the corresponding <code>manager</code> within the database.</p>
<h1 id="manager">manager</h1>
<p>The <a href="https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex">manager</a> performs the CRUD tasks for every entity.</p>
<p>As you can see in the shortened version,</p>
<pre><code>def handle_cast(transfer_id, state) do
  case Postgrex.query(state, &quot;SELECT rasmus.transfer_manager($1)&quot;, [transfer_id]) do
    {:ok, %{messages: messages}} -&gt;
      if Enum.any?(messages, fn(x) -&gt; x.severity == &quot;WARNING&quot; end) do
        set_succeeded_with_warning_state(state, transfer_id)
      else
         set_succeeded_state(state,transfer_id)
      end

    {:error, %{postgres: %{code: :raise_exception, severity: &quot;ERROR&quot;, message: message, hint: hint}}} -&gt;
      set_error_state(state, transfer_id)
    
    # ...
  end
  {:noreply, state }
end</code></pre>
<p>the <code>state</code> will be updated, after the manager <code>succeeded</code> or <code>failed</code>.</p>
<pre><code>defp set_state(state, transfer_id, sql_function_name, state_name) do
  case Postgrex.query(state, &quot;SELECT rasmus.#{sql_function_name}($1)&quot;, [transfer_id]) do
    {:ok, _} -&gt; Logger.debug(&quot;set state &#39;#{state_name}&#39; for #{transfer_id} succeeded&quot;)
    _ -&gt; Logger.error(&quot;set state &#39;#{state_name}&#39; for #{transfer_id} failed&quot;)
  end
end

defp set_error_state(state, transfer_id), do: set_state(state, transfer_id, &quot;set_error&quot;, &quot;error&quot;)
defp set_succeeded_state(state, transfer_id), do: set_state(state, transfer_id, &quot;set_succeeded&quot;, &quot;succeeded&quot;)
defp set_succeeded_with_warning_state(state, transfer_id), do: set_state(state, transfer_id, &quot;set_succeeded_with_warning&quot;, &quot;succeeded_with_warning&quot;)</code></pre>
<p>The Postgres function <a href="https://github.com/enter-haken/rasmus/blob/master/database_scripts/transfer.sql#L64">transfer_manager</a> itself looks for the correct manager, and does some checks.</p>
<pre><code>CREATE FUNCTION transfer_manager(transfer_id TEXT) RETURNS VOID AS $$
DECLARE
    transfer_record RECORD;
    transfer_response JSONB;
BEGIN
   SELECT id, state, request, response FROM rasmus.transfer WHERE id = transfer_id::UUID INTO transfer_record;

   CASE transfer_record.request-&gt;&gt;&#39;entity&#39;
       -- ... 
       WHEN &#39;user&#39; THEN
           BEGIN
               SELECT rasmus.user_manager(transfer_record.request) INTO transfer_response;
               PERFORM rasmus.set_response(transfer_id::UUID, transfer_response);
           END;
       -- ...
       ELSE
           BEGIN
               RAISE EXCEPTION &#39;entity `%` unknown&#39;, transfer_record.request-&gt;&gt;&#39;entity&#39;
                   USING HINT = &#39;entity must one of link, graph, appointment, list, person, role, privilege or user&#39;;
           END;
   END CASE;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>It also puts the <code>result</code> into the <code>response</code> column. If you are interested, what is happening within the <code>rasmus.user_manager</code> you can take a look at the <a href="https://github.com/enter-haken/rasmus/blob/master/database_scripts/user_account.sql">sources</a> for the <code>user_manager</code>.</p>
<p>When the <code>state</code> changes,</p>
<pre><code>CREATE TRIGGER got_response_trigger AFTER UPDATE ON transfer
    FOR EACH ROW 
    WHEN (OLD.state IS DISTINCT FROM NEW.state)
EXECUTE PROCEDURE send_transfer_message();</code></pre>
<p>the <code>counter</code> is informed, that a request is ready for processing.</p>
<pre><code>def handle_info({:notification, pid, ref, &quot;rasmus&quot;, payload},_) do
  case Jason.decode(payload) do
    
   # ... 

   {:ok , %{ &quot;id&quot; =&gt; id, &quot;state&quot; =&gt; state, &quot;entity&quot; =&gt; entity, &quot;action&quot; =&gt; action }} -&gt; 
     Logger.info(&quot;got a request change with state &#39;#{state}&#39; for action &#39;#{action}&#39; and entity &#39;#{entity}&#39; #{id}. ToDo: send message to processes using this entity.&quot;)

   # ...

  _ -&gt; Logger.warn(&quot;got unhandled notification: #{inspect(payload)}&quot;)
  end
  {:noreply, {pid, ref}}
end</code></pre>
<p>At this point, the UI can be informed about an entity change. On a single user system the entity is send back to the client, and the view will be updated. On a multi user system, multiple clients can be updated as well. In the case of <code>rasmus</code>, multiple users can work on the same <code>graph</code> at the same time.</p>
<h1 id="example">example</h1>
<p>As mentioned before, I added a <code>user</code> to the system. Now let’s take a look at a <a href="/posts/2018-07-23-rasmus-part2.html">previous example</a>.</p>
<div class="figure">
<img src="/images/rasmus_frontend.png" />

</div>
<p>This graph is described with <code>graphviz</code> code.</p>
<pre><code>graph {
  otp [label = &quot;*OTP tree*\nprocess configuration&quot;, url = &quot;https://github.com/enter-haken/rasmus/blob/master/lib/rasmus_app.ex&quot;];
  router [label =&quot;*router*\ncowboy router&quot;, url=&quot;https://github.com/enter-haken/rasmus/blob/master/lib/web/router.ex&quot;]
  counter [label = &quot;*counter*\nlisten to notifications\nfrom database&quot;, url = &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/counter.ex&quot;]
  inbound [label = &quot;*inbound*\nsend requests towards\nthe database&quot;, url = &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/inbound.ex&quot;]
  manager [label = &quot;*manager*\nexecute the\ndatabase manager&quot;, url = &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex&quot;]
  client [label = &quot;*client*\nreact / visjs app&quot;, url = &quot;https://github.com/enter-haken/rasmus/tree/master/frontend&quot;]
  configuration [label = &quot;*configuration*\ndatabase configuration&quot;, url = &quot;https://github.com/enter-haken/rasmus/tree/master/config&quot;]
  database [label = &quot;*PostgreSQL*&quot;, url =&quot;https://github.com/enter-haken/rasmus/tree/master/database_scripts&quot;]
  transfer [label = &quot;*transfer*\ninterface table&quot;, url = &quot;https://github.com/enter-haken/rasmus/blob/master/database_scripts/transfer.sql&quot;]
  postcreate [label = &quot;*postcreate*\ntable manipulation\nafter DDL&quot;, url = &quot;https://github.com/enter-haken/rasmus/blob/master/database_scripts/postcreate.sql&quot;]
  crud [label = &quot;*CRUD*\ngeneric CREATE, READ\nUPDATE, DELETE\nfunctions&quot;, url = &quot;https://github.com/enter-haken/rasmus/blob/master/database_scripts/crud.sql&quot;]
  otp -- router [ label = &quot;supervises&quot;]
  otp -- counter [ label = &quot;supervises&quot;]
  otp -- inbound [ label = &quot;supervises&quot;]
  otp -- manager [ label = &quot;supervises&quot;]
  counter -- manager [ label = &quot;executes the\nmanager&quot;]
  counter -- database [ label =&quot;listens for\ndatabase notifications&quot;]
  router -- client [label = &quot;serves&quot;]
  inbound -- transfer [label = &quot;insert request&quot;]
  database -- transfer 
  database -- postcreate
  database -- configuration
  database -- crud
}</code></pre>
<p>Due to there is no frontend, let’s make some <code>curl</code> stuff.</p>
<pre><code>$ curl -H &quot;Content-Type: application/json&quot; -X POST $API_URL -d @- &lt;&lt;BODY
{
  &quot;action&quot;: &quot;add&quot;,
   &quot;entity&quot;: &quot;user&quot;,
   &quot;data&quot;: {
     &quot;first_name&quot;: &quot;Jan Frederik&quot;,
     &quot;last_name&quot;: &quot;Hake&quot;,
     &quot;email_address&quot;: &quot;jan_hake@gmx.de&quot;,
     &quot;login&quot;: &quot;jan_hake&quot;
   }
}
BODY</code></pre>
<p>Log entries:</p>
<pre><code>14:35:11.041 module=Plug.Logger [info] POST /api
14:35:11.056 module=Web.Router [info] Got add for user with %{&quot;email_address&quot; =&gt; &quot;jan_hake@gmx.de&quot;, &quot;first_name&quot; =&gt; &quot;Jan Frederik&quot;, &quot;last_name&quot; =&gt; &quot;Hake&quot;, &quot;login&quot; =&gt; &quot;jan_hake&quot;}
14:35:11.058 module=Plug.Logger [info] Sent 200 in 17ms
14:35:11.063 module=Core.Manager [info] perform transfer_manager for transfer id: 87e8bed2-72ad-44aa-9dfe-ff7e69883df1
14:35:11.067 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 4528, messages: [], num_rows: 1, rows: nil}
14:35:11.110 module=Core.Manager [debug] set state &#39;succeeded&#39; for 87e8bed2-72ad-44aa-9dfe-ff7e69883df1 succeeded
14:35:11.110 module=Core.Manager [debug] manager succeeded:  %{notice: [&quot;crypted password: $2a$06$g6YczlE0qjE6dZbLNn4tLewaL80Bx5Pms/IONU8kblzNTQjFTU1zO&quot;, &quot;salt: $2a$06$g6YczlE0qjE6dZbLNn4tLe&quot;, &quot;blank password: $2a$06$Nbp0YIoQkPykTQMmVdgWbO&quot;, &quot;INSERT INTO rasmus.user (email_address, login, last_name, first_name) VALUES (&#39;jan_hake@gmx.de&#39;, &#39;jan_hake&#39;, &#39;Hake&#39;, &#39;Jan Frederik&#39;) RETURNING id;&quot;]}
14:35:11.110 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;87e8bed2-72ad-44aa-9dfe-ff7e69883df1\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;user\&quot;}&quot;</code></pre>
<p>(hint: the stuff with the password won’t stay this way. it is just some dummy stuff.)</p>
<p>The <code>user</code> is currently necessary for the owner association. The <code>user_id</code> must be stored for the the next calls.</p>
<pre><code>USER_ID=`psql -U postgres -d rasmus -c &quot;select id from rasmus.user&quot; | sed -e &#39;1,2d&#39; -e &#39;4,5d&#39; -e &#39;s/^ //&#39;`</code></pre>
<p>Now we take the <code>user</code> and add some links.</p>
<pre><code>curl -H &quot;Content-Type: application/json&quot; -X POST $API_URL -d @- &lt;&lt;BODY
{
  &quot;action&quot;: &quot;add&quot;,
    &quot;entity&quot;: &quot;link&quot;,
    &quot;data&quot;: {
      &quot;id_owner&quot;: &quot;$USER_ID&quot;,
      &quot;name&quot;: &quot;otp tree&quot;,
      &quot;description&quot;: &quot;process configuration&quot;,
      &quot;url&quot;: &quot;https://github.com/enter-haken/rasmus/blob/master/lib/rasmus_app.ex&quot;
    }
}
BODY

curl -H &quot;Content-Type: application/json&quot; -X POST $API_URL -d @- &lt;&lt;BODY
{
  &quot;action&quot;: &quot;add&quot;,
    &quot;entity&quot;: &quot;link&quot;,
    &quot;data&quot;: {
      &quot;id_owner&quot;: &quot;$USER_ID&quot;,
      &quot;name&quot;: &quot;router&quot;,
      &quot;description&quot;: &quot;cowboy router&quot;,
      &quot;url&quot;: &quot;https://github.com/enter-haken/rasmus/blob/master/lib/web/router.ex&quot;
    }
}
BODY

...</code></pre>
<p>The <code>link</code> is stored into the database.</p>
<pre><code>CREATE TABLE &quot;link&quot;(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_owner UUID NOT NULL REFERENCES &quot;user&quot;(id) ON DELETE CASCADE,
    name VARCHAR(80) UNIQUE NOT NULL,
    description VARCHAR(254),
    url VARCHAR(2048),
    json_view JSONB
);</code></pre>
<p>The <code>json_view</code> column is populated, when it is needed for the first time. All necessary functions can be found in the <a href="https://github.com/enter-haken/rasmus/blob/master/database_scripts/link.sql">database script</a>.</p>
<p>Log entries:</p>
<pre><code>14:38:28.319 module=Plug.Logger [info] POST /api
14:38:28.319 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;process configuration&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;otp tree&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/rasmus_app.ex&quot;}
14:38:28.319 module=Plug.Logger [info] Sent 200 in 487µs
14:38:28.324 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.324 module=Core.Manager [info] perform transfer_manager for transfer id: e2fe6b9c-18ec-436d-97a1-2153243c90fb
14:38:28.331 module=Plug.Logger [info] POST /api
14:38:28.332 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;cowboy router&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;router&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/web/router.ex&quot;}
14:38:28.332 module=Plug.Logger [info] Sent 200 in 462µs
14:38:28.334 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.340 module=Plug.Logger [info] POST /api
14:38:28.340 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;listen to notifications\nfrom database&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;counter&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/counter.ex&quot;}
14:38:28.340 module=Plug.Logger [info] Sent 200 in 292µs
14:38:28.340 module=Core.Manager [debug] set state &#39;succeeded&#39; for e2fe6b9c-18ec-436d-97a1-2153243c90fb succeeded
14:38:28.341 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/lib/rasmus_app.ex&#39;, &#39;otp tree&#39;, &#39;process configuration&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.341 module=Core.Manager [info] perform transfer_manager for transfer id: 44c832eb-b034-4e4f-884c-4d20c3da6fa1
14:38:28.341 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;e2fe6b9c-18ec-436d-97a1-2153243c90fb\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.342 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.346 module=Plug.Logger [info] POST /api
14:38:28.346 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;send requests towards\nthe database&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;inbound&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/inbound.ex&quot;}
14:38:28.346 module=Plug.Logger [info] Sent 200 in 220µs
14:38:28.347 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.350 module=Core.Manager [debug] set state &#39;succeeded&#39; for 44c832eb-b034-4e4f-884c-4d20c3da6fa1 succeeded
14:38:28.350 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/lib/web/router.ex&#39;, &#39;router&#39;, &#39;cowboy router&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.350 module=Core.Manager [info] perform transfer_manager for transfer id: 1812a173-715c-4d7f-9983-29706dc5174b
14:38:28.350 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;44c832eb-b034-4e4f-884c-4d20c3da6fa1\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.350 module=Plug.Logger [info] POST /api
14:38:28.350 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;execute the\ndatabase manager&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;manager&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex&quot;}
14:38:28.350 module=Plug.Logger [info] Sent 200 in 175µs
14:38:28.352 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.354 module=Plug.Logger [info] POST /api
14:38:28.354 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;react / visjs app&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;client&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex&quot;}
14:38:28.354 module=Plug.Logger [info] Sent 200 in 223µs
14:38:28.359 module=Plug.Logger [info] POST /api
14:38:28.359 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;database configuration&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;configuration&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/tree/master/config&quot;}
14:38:28.359 module=Plug.Logger [info] Sent 200 in 157µs
14:38:28.360 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.361 module=Core.Manager [debug] set state &#39;succeeded&#39; for 1812a173-715c-4d7f-9983-29706dc5174b succeeded
14:38:28.361 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/lib/core/counter.ex&#39;, &#39;counter&#39;, &#39;listen to notifications\nfrom database&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.361 module=Core.Manager [info] perform transfer_manager for transfer id: 00039c03-2b12-42ee-b0ee-4f3251eba820
14:38:28.361 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;1812a173-715c-4d7f-9983-29706dc5174b\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.362 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.363 module=Plug.Logger [info] POST /api
14:38:28.363 module=Web.Router [info] Got add for link with %{&quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;database&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/tree/master/database_scripts&quot;}
14:38:28.363 module=Plug.Logger [info] Sent 200 in 163µs
14:38:28.365 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.367 module=Plug.Logger [info] POST /api
14:38:28.367 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;interface table&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;transfer&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/database_scripts/transfer.sql&quot;}
14:38:28.367 module=Plug.Logger [info] Sent 200 in 157µs
14:38:28.368 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.369 module=Core.Manager [debug] set state &#39;succeeded&#39; for 00039c03-2b12-42ee-b0ee-4f3251eba820 succeeded
14:38:28.369 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/lib/core/inbound.ex&#39;, &#39;inbound&#39;, &#39;send requests towards\nthe database&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.369 module=Core.Manager [info] perform transfer_manager for transfer id: 488b40d5-e364-413b-b796-5706533b36ed
14:38:28.369 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;00039c03-2b12-42ee-b0ee-4f3251eba820\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.371 module=Plug.Logger [info] POST /api
14:38:28.371 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;table manipulation\nafter DDL&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;postcreate&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/database_scripts/postcreate.sql&quot;}
14:38:28.371 module=Plug.Logger [info] Sent 200 in 138µs
14:38:28.372 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.374 module=Plug.Logger [info] POST /api
14:38:28.374 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;generic CREATE, READ\nUPDATE, DELETE\nfunctions&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;crud&quot;, &quot;url&quot; =&gt; &quot;https: //github.com/enter-haken/rasmus/blob/master/database_scripts/crud.sql&quot;}
14:38:28.374 module=Plug.Logger [info] Sent 200 in 210µs
14:38:28.376 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.377 module=Core.Manager [debug] set state &#39;succeeded&#39; for 488b40d5-e364-413b-b796-5706533b36ed succeeded
14:38:28.377 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex&#39;, &#39;manager&#39;, &#39;execute the\ndatabase manager&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.377 module=Core.Manager [info] perform transfer_manager for transfer id: 912e14df-ee7c-45c0-898a-895c98d1a36a
14:38:28.377 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;488b40d5-e364-413b-b796-5706533b36ed\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.381 module=Core.Manager [debug] set state &#39;succeeded&#39; for 912e14df-ee7c-45c0-898a-895c98d1a36a succeeded
14:38:28.381 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex&#39;, &#39;client&#39;, &#39;react / visjs app&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.381 module=Core.Manager [info] perform transfer_manager for transfer id: a3492a80-4289-46bd-bfc2-9b880af42517
14:38:28.381 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;912e14df-ee7c-45c0-898a-895c98d1a36a\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.388 module=Core.Manager [debug] set state &#39;succeeded&#39; for a3492a80-4289-46bd-bfc2-9b880af42517 succeeded
14:38:28.388 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/tree/master/config&#39;, &#39;configuration&#39;, &#39;database configuration&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.388 module=Core.Manager [info] perform transfer_manager for transfer id: 1aac3309-39f0-4f4a-b92f-a89e8a49e6ba
14:38:28.388 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;a3492a80-4289-46bd-bfc2-9b880af42517\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.392 module=Core.Manager [debug] set state &#39;succeeded&#39; for 1aac3309-39f0-4f4a-b92f-a89e8a49e6ba succeeded
14:38:28.392 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/tree/master/database_scripts&#39;, &#39;database&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.392 module=Core.Manager [info] perform transfer_manager for transfer id: 9feb5f68-9f97-4351-b324-7b8d8436a94f
14:38:28.392 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;1aac3309-39f0-4f4a-b92f-a89e8a49e6ba\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.396 module=Core.Manager [debug] set state &#39;succeeded&#39; for 9feb5f68-9f97-4351-b324-7b8d8436a94f succeeded
14:38:28.396 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/database_scripts/transfer.sql&#39;, &#39;transfer&#39;, &#39;interface table&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.396 module=Core.Manager [info] perform transfer_manager for transfer id: 965ff0e8-43ae-4b7d-b76e-a55bcd721058
14:38:28.396 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;9feb5f68-9f97-4351-b324-7b8d8436a94f\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.399 module=Core.Manager [debug] set state &#39;succeeded&#39; for 965ff0e8-43ae-4b7d-b76e-a55bcd721058 succeeded
14:38:28.400 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/database_scripts/postcreate.sql&#39;, &#39;postcreate&#39;, &#39;table manipulation\nafter DDL&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.400 module=Core.Manager [info] perform transfer_manager for transfer id: 161771a3-e153-44bf-89bf-42f7b5b2cd53
14:38:28.400 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;965ff0e8-43ae-4b7d-b76e-a55bcd721058\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.406 module=Core.Manager [debug] set state &#39;succeeded&#39; for 161771a3-e153-44bf-89bf-42f7b5b2cd53 succeeded
14:38:28.406 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https: //github.com/enter-haken/rasmus/blob/master/database_scripts/crud.sql&#39;, &#39;crud&#39;, &#39;generic CREATE, READ\nUPDATE, DELETE\nfunctions&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.406 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;161771a3-e153-44bf-89bf-42f7b5b2cd53\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;</code></pre>
<p>As you can see, the <code>inbound</code> tasks are very quick. A <code>manager</code> task can take a while and it will report to the <code>counter</code>, when it is ready.</p>
<p>After all links are inserted you can post a get request, to get the graph.</p>
<pre><code>curl -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;action&quot; : &quot;get&quot;, &quot;entity&quot;:&quot;graph&quot;, &quot;data&quot; : { &quot;id_owner&quot;:&quot;&#39;&quot;$USER_ID&quot;&#39;&quot;  }}&#39; $API_URL</code></pre>
<p>The <code>request</code> is inserted into the <code>transfer</code> table and the <code>counter</code> will call the corresponding manager for the <code>graph</code>.</p>
<p>The result of</p>
<pre><code>CREATE FUNCTION get_graph_for(raw_request JSONB) RETURNS JSONB AS $$
  import json

  request = json.loads(raw_request)

  link_request = json.dumps({
    &quot;entity&quot; : &quot;link&quot;,
    &quot;action&quot; : &quot;get&quot;,
    &quot;data&quot; : {
      &quot;id_owner&quot; : request[&quot;data&quot;][&quot;id_owner&quot;]
    }
  })

  links = json.loads(plpy.execute(plpy.prepare(
      &quot;SELECT rasmus.link_get_manager($1)&quot;,[&quot;jsonb&quot;]), [link_request])[0][&quot;link_get_manager&quot;])

  response = {
    &quot;owner&quot; : request[&quot;data&quot;][&quot;id_owner&quot;],
    &quot;nodes&quot; : links
  }

  return json.dumps(response)

$$ LANGUAGE plpython3u</code></pre>
<p>will be inserted into the <code>response</code> column and the <code>counter</code> is informed, that the <code>graph</code> request is ready for processing.</p>
<pre><code>def handle_info({:notification, pid, ref, &quot;rasmus&quot;, payload},_) do
  case Jason.decode(payload) do
    
    # ...

    {:ok , %{ &quot;id&quot; =&gt; id, &quot;state&quot; =&gt; state, &quot;entity&quot; =&gt; &quot;graph&quot;, &quot;action&quot; =&gt; &quot;get&quot; }} -&gt; 
      Logger.info(&quot;got a &#39;get&#39; request for a graph&quot;)
      Core.Entity.Graph.get(id);
    
    # ...

    _ -&gt; Logger.warn(&quot;got unhandled notification: #{inspect(payload)}&quot;)
  end
  {:noreply, {pid, ref}}
end</code></pre>
<p>The <a href="https://github.com/enter-haken/rasmus/blob/master/lib/core/entity/graph.ex#L30">Core.Entity.Graph.get/1</a> function</p>
<pre><code>def handle_cast({:get, transfer_id}, state) do
  case Postgrex.query(state, &quot;SELECT response FROM  rasmus.transfer WHERE id = $1&quot;, [UUID.string_to_binary!(transfer_id)]) do
    {:ok, result} -&gt; Logger.debug(&quot;got response from transfer: #{inspect(result)}&quot;)
    {:error, error} -&gt; Logger.error(&quot;getting response from transfer failed: #{inspect(error)}. Tried to get #{inspect(transfer_id)}&quot;)
  end
  {:noreply, state }
end

# ...

def get(transfer_id) do
  GenServer.cast(:graph, {:get, transfer_id})
end</code></pre>
<p>puts the result into the <code>rasmus</code> log.</p>
<p>Log entries:</p>
<pre><code>...

14:44:28.126 module=Plug.Logger [info] POST /api
14:44:28.126 module=Web.Router [info] Got get for graph with %{&quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;}
...
14:44:28.156 module=Core.Counter [info] got a &#39;get&#39; request for a graph
14:44:28.157 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;dirty or empty ids for link: []&quot;, &quot;SELECT id, json_view FROM rasmus.link WHERE id_owner = &#39;376d0e62-2438-455a-ada6-b1a188274f38&#39;&quot;, &quot;update json_view for link 98b83cb9-5273-424f-bbd9-cd0d1b006014&quot;, &quot;update json_view for link 606f21fa-879f-4dda-a710-31e436046d09&quot;, &quot;update json_view for link fcea53b3-81bf-419b-8443-5944fb674c46&quot;, &quot;update json_view for link aadd3610-c71d-48c2-983a-1c74f8ff4dd0&quot;, &quot;update json_view for link cde93d44-1324-476d-b7ba-1b8a737ef90a&quot;, &quot;update json_view for link 71cda2ab-4116-49f9-9dfc-3b08a3462260&quot;, &quot;update json_view for link 890b3947-bd9e-4506-8ca5-ded220503f00&quot;, &quot;update json_view for link 0c31d9dd-8d39-4536-85b7-0048c58dd872&quot;, &quot;update json_view for link 8c8bbb39-7047-4260-95c4-20c0eed6c69b&quot;, &quot;update json_view for link 78a2b625-9116-4e8d-8bf7-b3124d105d73&quot;, &quot;update json_view for link 8c99ce4a-cea4-42e5-a991-17b2c34fa8e8&quot;, &quot;dirty or empty ids for link: [{\&quot;id\&quot;: \&quot;8c99ce4a-cea4-42e5-a991-17b2c34fa8e8\&quot;}, {\&quot;id\&quot;: \&quot;78a2b625-9116-4e8d-8bf7-b3124d105d73\&quot;}, {\&quot;id\&quot;: \&quot;8c8bbb39-7047-4260-95c4-20c0eed6c69b\&quot;}, {\&quot;id\&quot;: \&quot;0c31d9dd-8d39-4536-85b7-0048c58dd872\&quot;}, {\&quot;id\&quot;: \&quot;890b3947-bd9e-4506-8ca5-ded220503f00\&quot;}, {\&quot;id\&quot;: \&quot;71cda2ab-4116-49f9-9dfc-3b08a3462260\&quot;}, {\&quot;id\&quot;: \&quot;cde93d44-1324-476d-b7ba-1b8a737ef90a\&quot;}, {\&quot;id\&quot;: \&quot;aadd3610-c71d-48c2-983a-1c74f8ff4dd0\&quot;}, {\&quot;id\&quot;: \&quot;fcea53b3-81bf-419b-8443-5944fb674c46\&quot;}, {\&quot;id\&quot;: \&quot;606f21fa-879f-4dda-a710-31e436046d09\&quot;}, {\&quot;id\&quot;: \&quot;98b83cb9-5273-424f-bbd9-cd0d1b006014\&quot;}]&quot;, &quot;SELECT id, json_view FROM rasmus.link WHERE id_owner = &#39;376d0e62-2438-455a-ada6-b1a188274f38&#39;&quot;]}
14:44:28.160 module=Core.Entity.Graph [debug] got response from transfer: %Postgrex.Result{columns: [&quot;response&quot;], command: :select, connection_id: 7981, messages: [], num_rows: 1, rows: [[%{&quot;nodes&quot; =&gt; [%{&quot;description&quot; =&gt; &quot;process configuration&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;8c99ce4a-cea4-42e5-a991-17b2c34fa8e8&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;otp tree&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/rasmus_app.ex&quot;}, %{&quot;description&quot; =&gt; &quot;cowboy router&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;78a2b625-9116-4e8d-8bf7-b3124d105d73&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;router&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/web/router.ex&quot;}, %{&quot;description&quot; =&gt; &quot;listen to notifications\nfrom database&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;8c8bbb39-7047-4260-95c4-20c0eed6c69b&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;counter&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/counter.ex&quot;}, %{&quot;description&quot; =&gt; &quot;send requests towards\nthe database&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;0c31d9dd-8d39-4536-85b7-0048c58dd872&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;inbound&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/inbound.ex&quot;}, %{&quot;description&quot; =&gt; &quot;execute the\ndatabase manager&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;890b3947-bd9e-4506-8ca5-ded220503f00&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;manager&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex&quot;}, %{&quot;description&quot; =&gt; &quot;react / visjs app&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;71cda2ab-4116-49f9-9dfc-3b08a3462260&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;client&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex&quot;}, %{&quot;description&quot; =&gt; &quot;database configuration&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;cde93d44-1324-476d-b7ba-1b8a737ef90a&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;configuration&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/tree/master/config&quot;}, %{&quot;description&quot; =&gt; nil, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;aadd3610-c71d-48c2-983a-1c74f8ff4dd0&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;database&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/tree/master/database_scripts&quot;}, %{&quot;description&quot; =&gt; &quot;interface table&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;fcea53b3-81bf-419b-8443-5944fb674c46&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;transfer&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/database_scripts/transfer.sql&quot;}, %{&quot;description&quot; =&gt; &quot;table manipulation\nafter DDL&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;606f21fa-879f-4dda-a710-31e436046d09&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;postcreate&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/database_scripts/postcreate.sql&quot;}, %{&quot;description&quot; =&gt; &quot;generic CREATE, READ\nUPDATE, DELETE\nfunctions&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;98b83cb9-5273-424f-bbd9-cd0d1b006014&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;crud&quot;, &quot;url&quot; =&gt; &quot;https: //github.com/enter-haken/rasmus/blob/master/database_scripts/crud.sql&quot;}], &quot;owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;}]]}</code></pre>
<p>(hint: I reseeded the database to get a cleaner log for the <code>link</code> inserts. the <code>id</code>s won’t match with the other log example)</p>
<p>(hint: at the time of writing, the edges are not part of the response.)</p>
<h1 id="next-steps">next steps</h1>
<p>So far so good.</p>
<p>Currently, I am working on the <a href="https://en.wikipedia.org/wiki/Adjacency_list">adjacency lists</a> for rasmus. You can take a look into the <a href="https://github.com/enter-haken/rasmus/blob/master/database_scripts/graph_edge.sql">database scripts</a> for the graph itself, but it is still kind of raw.</p>]]></summary>
</entry>
<entry>
    <title>connect the dots</title>
    <link href="https://enter-haken.github.io/posts/2018-07-23-rasmus-part2.html" />
    <id>https://enter-haken.github.io/posts/2018-07-23-rasmus-part2.html</id>
    <published>2018-07-23T00:00:00Z</published>
    <updated>2018-07-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>A few months ago, I <a href="/posts/2018-02-19-rasmus.html">started a little project</a> named <a href="https://github.com/enter-haken/rasmus">rasmus</a>. It was my plan, to build a competitive CMS, which I can be proud of. During the work on <code>rasmus</code>, I gather a lot of different information. I stored some of them as bookmarks. Weeks later, I stared on my bookmarks, which I’ve partly stored over the years and tried to remember, why I saved these links. Some of the links were so old, that the presented information has become obsolete. I noticed, that the context is missing.</p>
<p>The question is, how to save the context? I took a step back, and started to work on a possible solution for that problem.</p>
<p>On some links, I could remember how I came up with it. I found the missing links via Google and started painting a map. As a result, I got a graph with links as <code>nodes</code> and the context as <code>edges</code>.</p>
<!--more-->
<h1 id="architecture">architecture</h1>
<p>The architecture for <code>rasmus</code> looks like</p>
<div class="figure">
<img src="/images/rasmus_concept.png" />

</div>
<p>The heart of <code>rasmus</code> is its PostgreSQL database. <code>ramsus</code> uses the idea of the <a href="/posts/2017-08-07-database-architecture-part3.html">database gate keeper</a>. Data transformation happens within the database, as long no business logic is required.</p>
<div class="figure">
<img src="/images/rasmus_information_flow.png" />

</div>
<h1 id="backend">backend</h1>
<p>Because of the event driven approach and the desired robustness, I choose <a href="https://elixir-lang.org/">elixir</a> as a backend language. I don’t expect massive number crunching, so I take the road with the Erlang VM.</p>
<p>A famous web framework in the elixir universe is the <a href="https://phoenixframework.org/">phoenix framework</a>. There is a lot of boiler plate and <a href="https://hexdocs.pm/mix/Mix.html">mix</a> tasks involved, so I bootstrap the backend for now and add what is needed.</p>
<p>Phoenix uses <a href="https://ninenines.eu/">cowboy</a> as a web server and so do I. With some suitable <a href="https://hexdocs.pm/plug/readme.html">plugs</a> the configuration is a no brainer.</p>
<p>Within the <a href="https://hexdocs.pm/elixir/Application.html">application behaviour</a> you can define the web server as a child process.</p>
<pre><code>Plug.Adapters.Cowboy2, scheme: :http, plug: Web.Router, options: [port: 8080]</code></pre>
<p>The <code>Web.Router</code> process uses the <a href="https://hexdocs.pm/plug/Plug.Router.html">router plug</a>. You can define the web endpoints of the application here.</p>
<p>There a two ways to access the database</p>
<h2 id="pub-sub-database-access">pub sub database access</h2>
<p>When you want to listen to <a href="https://www.postgresql.org/docs/current/static/sql-notify.html">Postgres notifications</a>, you need to open a channel to the database.</p>
<p>A <a href="https://hexdocs.pm/elixir/GenServer.html">GenServer</a> can look like</p>
<pre><code>defmodule Core.Counter do
  use GenServer

  def start_link(args) do
    GenServer.start_link(__MODULE__, args, name: :listener)
  end

  def init(pg_config) do
    {:ok, pid} = Postgrex.Notifications.start_link(pg_config)
    {:ok, ref} = Postgrex.Notifications.listen(pid, &quot;rasmus&quot;)

    {:ok, {pid, ref }}
  end

  def handle_info({:notification, pid, ref, &quot;rasmus&quot;, payload},_) do
    case Jason.decode(payload) do
     {:ok , %{ &quot;id&quot; =&gt; id, &quot;state&quot; =&gt; &quot;pending&quot;, }} -&gt; Core.Manager.perform(id)

     # additional pattern matches

     _ -&gt; Logger.warn(&quot;got unhandled notification: #{inspect(payload)}&quot;)
    end
    {:noreply, {pid, ref}}
  end

  def handle_info(_, state) do
    Logger.warn(&quot;unhandled info: #{inspect(state)}&quot;)
    {:noreply, state}
  end
end</code></pre>
<p>The notification pattern</p>
<pre><code>{:notification, connection_pid, ref, channel, payload}</code></pre>
<p>can be matched in <code>handle_info/2</code> function, which is defined in the <a href="https://hexdocs.pm/elixir/GenServer.html#c:handle_info/2">GenServer behaviour</a>.</p>
<h2 id="simple-database-access">simple database access</h2>
<p>If you want to access the <code>transfer</code> table of the database, the module looks a little bit different.</p>
<pre><code>defmodule Core.Inbound do
  use GenServer

  # genserver functions

  def start_link(args) do
    GenServer.start_link(__MODULE__, args, name: :inbound_worker)
  end

  def init(pg_config) do
    {:ok, pid} = Postgrex.start_link(pg_config)
    Logger.info(&quot;#{__MODULE__} started.&quot;)

    {:ok, pid}
  end

  def handle_cast({:add, payload}, state) do
    case Postgrex.query(state, &quot;INSERT INTO rasmus.transfer (request) VALUES ($1)&quot;, [payload]) do
      {:ok, result} -&gt; Logger.debug(&quot;added into transfer: #{inspect(result)}&quot;)
      {:error, error} -&gt; Logger.error(&quot;adding into transfer failed: #{inspect(error)}. Tried to add #{inspect(payload)}&quot;)
    end
    {:noreply, state }
  end

  def handle_info(_, state) do
    Logger.warn(&quot;unhandled info: #{inspect(state)}&quot;)
    {:noreply, state}
  end
end</code></pre>
<p>First you define the <code>GenServer</code> callbacks. When you want to use them, you have to send messages to the process.</p>
<pre><code>def add(entity) do
  GenServer.cast(:inbound_worker, {:add, entity})
end</code></pre>
<p>You don’t expect an answer for your add function. When the database is ready, it sends a notification to the listener, that the requested task is done, and that you can fetch the result, if it is wished.</p>
<h1 id="client">client</h1>
<p>The client is responsible for drawing the graph. The library <a href="http://visjs.org/">visjs</a> provides functions for drawing graphs on a canvas element. Drawing graphs is not a trivial thing, so this is the best fit for now.</p>
<p>All other user interaction will be done with a UI library. <a href="https://material-ui.com/">material-ui</a> is a mature UI library based on react. Having a react based application, <a href="https://github.com/facebook/create-react-app">create-react-app</a> will give you a good toolchain.</p>
<h1 id="example">example</h1>
<p>Coming back to the bookmark context problem, I have described some parts of <code>rasmus</code> as links to github.</p>
<div class="figure">
<img src="/images/rasmus_frontend.png" />

</div>
<p>This is just a first throw. If you like the idea, you can test a static <a href="/example/rasmus/alpha/index.html">alpha version</a> of the frontend, to make yourself a picture. You can also checkout the <a href="https://github.com/enter-haken/rasmus">sources</a>, if you like.</p>]]></summary>
</entry>
<entry>
    <title>get in touch with vue</title>
    <link href="https://enter-haken.github.io/posts/2018-03-08-vue.html" />
    <id>https://enter-haken.github.io/posts/2018-03-08-vue.html</id>
    <published>2018-03-08T00:00:00Z</published>
    <updated>2018-03-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’ve been recently asked to build up a little <code>vue</code> example. The task is, to show appointments from a google calendar. I know some <code>react</code> stuff, but the <code>vue</code> framework and the google api was new for me. So I start with some digging.</p>
<p>First things first. The <code>vue</code> example will be a client only solution. As like <code>create-react-app</code>, I use <a href="https://github.com/vuejs/vue-cli">vue-cli</a> to bootstrap my application.</p>
<!--more-->
<h1 id="editor-preparation">editor preparation</h1>
<p>I use vim on a daily base. Editing <code>vue</code> files is similar to editing <code>react</code> files. You can have a mixture of javascript and templates. There is a <a href="https://github.com/posva/vim-vue">vim plugin</a>,</p>
<pre><code>Plugin &#39;posva/vim-vue&#39;</code></pre>
<p>which helps editing <code>vue</code> files. I also update the linter, to get error information from <a href="https://github.com/vim-syntastic/syntastic">syntastic</a></p>
<pre><code> $ npm i -g eslint eslint-plugin-vue</code></pre>
<h1 id="set-up-the-development-stack">set up the development stack</h1>
<p>After installing the vue cli tool,</p>
<pre><code>$ npm install -g @vue/cli</code></pre>
<p>I can bootstrap my <code>appointment</code> application with</p>
<pre><code>$ vue create appointment</code></pre>
<p>A git repo is initialized with the current logged on user credentials.</p>
<p>With</p>
<pre><code>$ npm run build</code></pre>
<p>a minified version of the application is put into the <code>dist</code> folder.</p>
<pre><code>$ npm run serve </code></pre>
<p>will build and run the application on port <code>8080</code>. This will be used during development.</p>
<h1 id="google-api">google api</h1>
<p>To get access to the google calendar, I have to create a project in the <a href="https://console.developers.google.com">google developer console</a>. I need an <code>oauth2 id</code> for my application. The <code>authorized javascript sources</code> must be configured for the <code>oauth2 id</code>. The <a href="https://developers.google.com/google-apps/calendar/quickstart/js">example</a> from the <a href="https://developers.google.com/google-apps/calendar">google api documentation</a> works as expected.</p>
<h1 id="root-component">root component</h1>
<p>The <code>data</code> is stored in <code>eventResult</code>.</p>
<pre><code>data: function() {
    return { eventResult : [] } 
}</code></pre>
<p>The root component will hold the state of <code>appointment</code>.</p>
<pre><code>const CLIENT_ID = process.env.VUE_APP_CLIENT_ID; 
const DISCOVERY_DOCS = [&quot;https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest&quot;];
const SCOPES = &quot;https://www.googleapis.com/auth/calendar.readonly&quot;;</code></pre>
<p>The <code>process.env</code> part will be <a href="https://github.com/vuejs/vue-cli/blob/dev/docs/env.md">replaced</a> during build process with the actual client id. A vue component can have <a href="https://vuejs.org/v2/guide/events.html#Method-Event-Handlers">methods</a>, which are accessible in <a href="https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks">lifecycle hook functions</a></p>
<pre><code>gapiLoad: function() {
  gapi.load(&#39;client:auth2&#39;, this.initClient)
}</code></pre>
<p>will load the client and the oauth part of the google api.</p>
<p>The <code>initClient</code> function is passed with the credentials.</p>
<pre><code>initClient: function() {
  gapi.client.init({
  clientId: CLIENT_ID,
  discoveryDocs: DISCOVERY_DOCS,
  scope: SCOPES
  }).then(() =&gt; { 
      gapi.auth2.getAuthInstance().isSignedIn.listen(this.signedIn);
      // get signed in status on startup
      this.signedIn(gapi.auth2.getAuthInstance().isSignedIn.get());
  })
}</code></pre>
<p>The <code>signedIn</code> function will load the data from the google api,</p>
<pre><code>signedIn: function(isSignedIn) {
    if (isSignedIn) {
        gapi.client.calendar.events.list({
          &#39;calendarId&#39;: &#39;primary&#39;,
          &#39;timeMin&#39;: (new Date().toISOString(),
          &#39;showDeleted&#39;: false,
          &#39;singleEvents&#39;: true,
          &#39;maxResults&#39;: 10,
          &#39;orderBy&#39;: &#39;startTime&#39;
        }).then((response) =&gt; {
          this.eventResult = response.result.items;
        })  
    } else {
        this.eventResult = []; 
    }
} </code></pre>
<p>and stores the result in <code>eventResult</code>.</p>
<p>These functions will be triggered after the component is <a href="https://vuejs.org/v2/api/#mounted">mounted</a>.</p>
<pre><code>mounted: function() {
  this.gapiLoad();
}</code></pre>
<p>At this point the data will be fetched, if the user gives the permission to load data from his primary calendar.</p>
<h1 id="display-component">Display component</h1>
<p>The data for the component will be delivered via <a href="https://vuejs.org/v2/guide/components.html#Props">props</a>. The component it self will be stateless. This means, the component depends only on the props, delivered on start up. When the underlying data changes, the view will rerender.</p>
<p>For the visual, I use <a href="https://vuematerial.io">vue material</a>. The display component will be a simple table with some data from the <a href="https://developers.google.com/google-apps/calendar/v3/reference/events/list">response</a>. For displaying dates, I use <a href="https://momentjs.com">momentjs</a>. I first create a method, to make <code>momentjs</code> accessible within the template.</p>
<pre><code>methods: {
  moment: function () {
    return moment();
  }
}</code></pre>
<p>To reduce the amount of code within the templates, <a href="https://vuejs.org/v2/guide/filters.html#ad">filters</a> can be used.</p>
<pre><code>filters: {
  moment: function (date) {
    if (date) {
      return moment(date).locale(&#39;en&#39;).format(&#39;lll&#39;);
    }
    return &#39;&#39;;
  }
}</code></pre>
<p><code>moment</code> will be called, only when <code>date</code> is not empty.</p>
<p>The resulting template looks like</p>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;md-table v-model=&quot;gridData&quot; md-card&gt;
      &lt;md-table-toolbar&gt;
        &lt;h1 class=&quot;md-title&quot;&gt;Events&lt;/h1&gt;
      &lt;/md-table-toolbar&gt;

      &lt;md-table-row slot=&quot;md-table-row&quot; slot-scope=&quot;{ item }&quot;&gt;
        &lt;md-table-cell md-label=&quot;Start&quot;&gt;{{ item.start.dateTime | moment }}&lt;/md-table-cell&gt;
        &lt;md-table-cell md-label=&quot;End&quot;&gt;{{ item.end.dateTime | moment }}&lt;/md-table-cell&gt;
        &lt;md-table-cell md-label=&quot;Created&quot;&gt;{{ item.created | moment }}&lt;/md-table-cell&gt;
        &lt;md-table-cell md-label=&quot;Summary&quot;&gt;&lt;a :href=&quot;item.htmlLink&quot; target=&quot;_blank&quot;&gt;{{ item.summary }}&lt;/a&gt;&lt;/md-table-cell&gt;
        &lt;md-table-cell md-label=&quot;Creator&quot;&gt;{{ item.creator.displayName }}&lt;/md-table-cell&gt;
        &lt;md-table-cell md-label=&quot;Organizer&quot;&gt;{{ item.organizer.displayName }}&lt;/md-table-cell&gt;
     &lt;/md-table-row&gt;
    &lt;/md-table&gt;
  &lt;/div&gt;
&lt;/template&gt;</code></pre>
<p>If you like, you can take a look at the <a href="/example/vue/index.html">result</a> and at the <a href="https://github.com/enter-haken/appointment">sources</a>.</p>]]></summary>
</entry>
<entry>
    <title>Alternative content management system approach</title>
    <link href="https://enter-haken.github.io/posts/2018-02-19-rasmus.html" />
    <id>https://enter-haken.github.io/posts/2018-02-19-rasmus.html</id>
    <published>2018-02-19T00:00:00Z</published>
    <updated>2018-02-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>In the last months, I had to manage a bigger Wordpress instance with many plugins installed. It is a kind of mess. Plugins affecting each other. Different look and feel. Different UX. Plugins which must not be plugins, solving caching issues for example. The site <a href="http://www.cms-garden.org/">CMS Garden</a> shows several approaches.</p>
<p>I would like to think of a CMS like an application platform, let’s call it <code>rasmus</code>, where there plugins can be understood as a separate application. Accepting the challenge, I start something new.</p>
<p>At first, let’s start small and build a scaffold for the application platform. You can imagine this like a fast food restaurant.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="642pt" height="500pt"
 viewBox="0.00 0.00 642.00 500.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 496)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-496 638,-496 638,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="8,-301 8,-484 214,-484 214,-301 8,-301"/>
<text text-anchor="middle" x="111" y="-468.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">internet</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="226,-91 226,-462 616.5,-462 616.5,-91 226,-91"/>
<text text-anchor="middle" x="421.25" y="-446.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">counter</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="#ffffff" stroke="#ffffff" points="234,-354 234,-431 608.5,-431 608.5,-354 234,-354"/>
<text text-anchor="middle" x="421.25" y="-415.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">core</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="#ffffff" stroke="#ffffff" points="350.5,-99 350.5,-176 437.5,-176 437.5,-99 350.5,-99"/>
<text text-anchor="middle" x="394" y="-160.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">cms</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="#ffffff" stroke="#ffffff" points="335,-184 335,-261 453,-261 453,-184 335,-184"/>
<text text-anchor="middle" x="394" y="-245.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">lms</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="#ffffff" stroke="#ffffff" points="335,-269 335,-346 453,-346 453,-269 335,-269"/>
<text text-anchor="middle" x="394" y="-330.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">forum</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="473,-8 473,-83 626,-83 626,-8 473,-8"/>
<text text-anchor="middle" x="549.5" y="-15.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">behind the counter</text>
</g>
<!-- client1 -->
<g id="node1" class="node">
<title>client1</title>
<path fill="#ffffff" stroke="#ffffff" d="M85,-453C85,-453 28,-453 28,-453 22,-453 16,-447 16,-441 16,-441 16,-429 16,-429 16,-423 22,-417 28,-417 28,-417 85,-417 85,-417 91,-417 97,-423 97,-429 97,-429 97,-441 97,-441 97,-447 91,-453 85,-453"/>
<text text-anchor="middle" x="56.5" y="-431.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">web client</text>
</g>
<!-- web -->
<g id="node2" class="node">
<title>web</title>
<path fill="#ffffff" stroke="#ffffff" d="M194,-400C194,-400 145,-400 145,-400 139,-400 133,-394 133,-388 133,-388 133,-374 133,-374 133,-368 139,-362 145,-362 145,-362 194,-362 194,-362 200,-362 206,-368 206,-374 206,-374 206,-388 206,-388 206,-394 200,-400 194,-400"/>
<text text-anchor="middle" x="169.5" y="-384.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">web</text>
<text text-anchor="middle" x="169.5" y="-369.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">backend</text>
</g>
<!-- client1&#45;&gt;web -->
<g id="edge1" class="edge">
<title>client1&#45;&gt;web</title>
<path fill="none" stroke="#000000" d="M94.4417,-416.8686C103.8679,-412.364 114.0693,-407.489 123.8235,-402.8277"/>
<polygon fill="#000000" stroke="#000000" points="125.4851,-405.9129 132.9987,-398.4431 122.4668,-399.597 125.4851,-405.9129"/>
</g>
<!-- transfer -->
<g id="node5" class="node">
<title>transfer</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M295,-400C295,-400 254,-400 254,-400 248,-400 242,-394 242,-388 242,-388 242,-374 242,-374 242,-368 248,-362 254,-362 254,-362 295,-362 295,-362 301,-362 307,-368 307,-374 307,-374 307,-388 307,-388 307,-394 301,-400 295,-400"/>
<text text-anchor="middle" x="274.5" y="-384.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">transfer</text>
<text text-anchor="middle" x="274.5" y="-369.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">table</text>
</g>
<!-- web&#45;&gt;transfer -->
<g id="edge9" class="edge">
<title>web&#45;&gt;transfer</title>
<path fill="none" stroke="#000000" d="M206.2239,-381C214.4645,-381 223.2768,-381 231.7392,-381"/>
<polygon fill="#000000" stroke="#000000" points="231.826,-384.5001 241.826,-381 231.826,-377.5001 231.826,-384.5001"/>
</g>
<!-- client2 -->
<g id="node3" class="node">
<title>client2</title>
<path fill="#ffffff" stroke="#ffffff" d="M85,-399C85,-399 28,-399 28,-399 22,-399 16,-393 16,-387 16,-387 16,-375 16,-375 16,-369 22,-363 28,-363 28,-363 85,-363 85,-363 91,-363 97,-369 97,-375 97,-375 97,-387 97,-387 97,-393 91,-399 85,-399"/>
<text text-anchor="middle" x="56.5" y="-377.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">web client</text>
</g>
<!-- client2&#45;&gt;web -->
<g id="edge2" class="edge">
<title>client2&#45;&gt;web</title>
<path fill="none" stroke="#000000" d="M97.2956,-381C105.5653,-381 114.3225,-381 122.7784,-381"/>
<polygon fill="#000000" stroke="#000000" points="122.8902,-384.5001 132.8902,-381 122.8901,-377.5001 122.8902,-384.5001"/>
</g>
<!-- client3 -->
<g id="node4" class="node">
<title>client3</title>
<path fill="#ffffff" stroke="#ffffff" d="M85,-345C85,-345 28,-345 28,-345 22,-345 16,-339 16,-333 16,-333 16,-321 16,-321 16,-315 22,-309 28,-309 28,-309 85,-309 85,-309 91,-309 97,-315 97,-321 97,-321 97,-333 97,-333 97,-339 91,-345 85,-345"/>
<text text-anchor="middle" x="56.5" y="-323.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">web client</text>
</g>
<!-- client3&#45;&gt;web -->
<g id="edge3" class="edge">
<title>client3&#45;&gt;web</title>
<path fill="none" stroke="#000000" d="M94.4417,-345.1314C103.8679,-349.636 114.0693,-354.511 123.8235,-359.1723"/>
<polygon fill="#000000" stroke="#000000" points="122.4668,-362.403 132.9987,-363.5569 125.4851,-356.0871 122.4668,-362.403"/>
</g>
<!-- user -->
<g id="node6" class="node">
<title>user</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M433,-400C433,-400 355,-400 355,-400 349,-400 343,-394 343,-388 343,-388 343,-374 343,-374 343,-368 349,-362 355,-362 355,-362 433,-362 433,-362 439,-362 445,-368 445,-374 445,-374 445,-388 445,-388 445,-394 439,-400 433,-400"/>
<text text-anchor="middle" x="394" y="-384.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">user</text>
<text text-anchor="middle" x="394" y="-369.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">management</text>
</g>
<!-- transfer&#45;&gt;user -->
<g id="edge4" class="edge">
<title>transfer&#45;&gt;user</title>
<path fill="none" stroke="#000000" d="M307.1539,-381C315.1874,-381 324.0499,-381 332.9509,-381"/>
<polygon fill="#000000" stroke="#000000" points="332.9747,-384.5001 342.9746,-381 332.9746,-377.5001 332.9747,-384.5001"/>
</g>
<!-- content -->
<g id="node8" class="node">
<title>content</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M417.5,-145C417.5,-145 370.5,-145 370.5,-145 364.5,-145 358.5,-139 358.5,-133 358.5,-133 358.5,-119 358.5,-119 358.5,-113 364.5,-107 370.5,-107 370.5,-107 417.5,-107 417.5,-107 423.5,-107 429.5,-113 429.5,-119 429.5,-119 429.5,-133 429.5,-133 429.5,-139 423.5,-145 417.5,-145"/>
<text text-anchor="middle" x="394" y="-129.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">content</text>
<text text-anchor="middle" x="394" y="-114.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">relations</text>
</g>
<!-- transfer&#45;&gt;content -->
<g id="edge6" class="edge">
<title>transfer&#45;&gt;content</title>
<path fill="none" stroke="#000000" d="M276.8084,-361.8753C282.0371,-324.4259 297.3867,-239.862 335,-180 341.5795,-169.5286 350.7221,-159.8074 359.8479,-151.5817"/>
<polygon fill="#000000" stroke="#000000" points="362.154,-154.2147 367.4531,-145.0402 357.5893,-148.9078 362.154,-154.2147"/>
</g>
<!-- lms -->
<g id="node9" class="node">
<title>lms</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M433,-230C433,-230 355,-230 355,-230 349,-230 343,-224 343,-218 343,-218 343,-204 343,-204 343,-198 349,-192 355,-192 355,-192 433,-192 433,-192 439,-192 445,-198 445,-204 445,-204 445,-218 445,-218 445,-224 439,-230 433,-230"/>
<text text-anchor="middle" x="394" y="-214.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">lms</text>
<text text-anchor="middle" x="394" y="-199.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">management</text>
</g>
<!-- transfer&#45;&gt;lms -->
<g id="edge7" class="edge">
<title>transfer&#45;&gt;lms</title>
<path fill="none" stroke="#000000" d="M282.0782,-361.7341C292.0682,-337.6934 311.1964,-295.9778 335,-265 342.7335,-254.9357 352.4662,-245.1741 361.7846,-236.782"/>
<polygon fill="#000000" stroke="#000000" points="364.2313,-239.2921 369.4616,-230.0783 359.6271,-234.0194 364.2313,-239.2921"/>
</g>
<!-- forum -->
<g id="node10" class="node">
<title>forum</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M433,-315C433,-315 355,-315 355,-315 349,-315 343,-309 343,-303 343,-303 343,-289 343,-289 343,-283 349,-277 355,-277 355,-277 433,-277 433,-277 439,-277 445,-283 445,-289 445,-289 445,-303 445,-303 445,-309 439,-315 433,-315"/>
<text text-anchor="middle" x="394" y="-299.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">forum</text>
<text text-anchor="middle" x="394" y="-284.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">management</text>
</g>
<!-- transfer&#45;&gt;forum -->
<g id="edge8" class="edge">
<title>transfer&#45;&gt;forum</title>
<path fill="none" stroke="#000000" d="M301.3181,-361.9243C318.385,-349.7847 340.665,-333.9371 359.1028,-320.8223"/>
<polygon fill="#000000" stroke="#000000" points="361.1512,-323.6604 367.2714,-315.012 357.0938,-317.9562 361.1512,-323.6604"/>
</g>
<!-- role -->
<g id="node7" class="node">
<title>role</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M588.5,-400C588.5,-400 510.5,-400 510.5,-400 504.5,-400 498.5,-394 498.5,-388 498.5,-388 498.5,-374 498.5,-374 498.5,-368 504.5,-362 510.5,-362 510.5,-362 588.5,-362 588.5,-362 594.5,-362 600.5,-368 600.5,-374 600.5,-374 600.5,-388 600.5,-388 600.5,-394 594.5,-400 588.5,-400"/>
<text text-anchor="middle" x="549.5" y="-384.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">role</text>
<text text-anchor="middle" x="549.5" y="-369.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">management</text>
</g>
<!-- user&#45;&gt;role -->
<g id="edge5" class="edge">
<title>user&#45;&gt;role</title>
<path fill="none" stroke="#000000" d="M445.3475,-381C459.0864,-381 474.0734,-381 488.2873,-381"/>
<polygon fill="#000000" stroke="#000000" points="488.4717,-384.5001 498.4716,-381 488.4716,-377.5001 488.4717,-384.5001"/>
</g>
<!-- bl -->
<g id="node11" class="node">
<title>bl</title>
<path fill="#ffffff" stroke="#ffffff" d="M606,-75C606,-75 493,-75 493,-75 487,-75 481,-69 481,-63 481,-63 481,-51 481,-51 481,-45 487,-39 493,-39 493,-39 606,-39 606,-39 612,-39 618,-45 618,-51 618,-51 618,-63 618,-63 618,-69 612,-75 606,-75"/>
<text text-anchor="middle" x="549.5" y="-53.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">database backend</text>
</g>
<!-- content&#45;&gt;bl -->
<g id="edge10" class="edge">
<title>content&#45;&gt;bl</title>
<path fill="none" stroke="#000000" d="M429.6748,-110.17C450.4013,-100.9731 476.8364,-89.243 499.6009,-79.1417"/>
<polygon fill="#000000" stroke="#000000" points="501.0558,-82.3253 508.7767,-75.0701 498.2166,-75.9269 501.0558,-82.3253"/>
</g>
<!-- lms&#45;&gt;bl -->
<g id="edge11" class="edge">
<title>lms&#45;&gt;bl</title>
<path fill="none" stroke="#000000" d="M435.7253,-191.9443C441.794,-188.3723 447.7552,-184.37 453,-180 486.5347,-152.0588 516.0189,-110.6823 533.3076,-83.7776"/>
<polygon fill="#000000" stroke="#000000" points="536.3132,-85.5729 538.6914,-75.2484 530.3939,-81.8364 536.3132,-85.5729"/>
</g>
<!-- forum&#45;&gt;bl -->
<g id="edge12" class="edge">
<title>forum&#45;&gt;bl</title>
<path fill="none" stroke="#000000" d="M438.4849,-276.8156C443.7658,-273.3737 448.772,-269.4421 453,-265 503.3286,-212.1222 531.0702,-128.27 542.7594,-84.952"/>
<polygon fill="#000000" stroke="#000000" points="546.1909,-85.6633 545.3271,-75.1037 539.4173,-83.8972 546.1909,-85.6633"/>
</g>
</g>
</svg>
</div>
<p>You put your request at the <code>counter</code> and behind the <code>counter</code> the magic happens. The worker behind the <code>counter</code> must not know how a burger is made, and how many fries must be in a fryer. He sees the current orders on a screen, and put the meals together, when the separate parts are ready. When the order is ready, the customer can be served.</p>
<!--more-->
<h1 id="architectural-overview">Architectural overview</h1>
<p>As you can see the database take a place in the middle.</p>
<p>As mentioned in the <a href="/posts/2017-08-07-database-architecture-part3.html">database architecture series</a> the <code>web backend</code> can put a request in the database <code>transfer</code> table. This is the only table, which can be accessed by the <code>web backend</code>. After a request is processed, the result is put back into the <code>transfer</code> entity. The database sends a <a href="https://www.postgresql.org/docs/current/static/sql-notify.html">notification</a> to the <code>web backend</code>, which can pull the response from the database. This represents a very thin interface to database. This approach leads to less security issues, because more database related functions are hidden from the <code>web backend</code>.</p>
<h1 id="the-database">The database</h1>
<p>Every application’s heart is it’s database. <code>rasmus</code> is no exception. An <code>rasmus</code> application has it’s own schema within the database. The schemes look as following.</p>
<h2 id="the-core">The core</h2>
<p>The different <code>rasmus</code> applications share a <code>core</code>. Here you can find functions, used across all applications, like user and role management.</p>
<p>First start with a simple user / role management approach.</p>
<pre><code>CREATE TABLE user_account(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    first_name VARCHAR(254),
    last_name VARCHAR(254),
    email_address VARCHAR(254),
    password VARCHAR(254),
    login VARCHAR(254),
    signature VARCHAR(254)
);</code></pre>
<p>For the time being, we store the <code>password</code> with the user. This field can be moved later on, when different authorization methods will be introduced.</p>
<p>Starting with a simple role definition,</p>
<pre><code>CREATE TYPE role_level AS ENUM (&#39;admin&#39;,&#39;user&#39;,&#39;guest&#39;);

CREATE TABLE role(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(254) NOT NULL,
    description VARCHAR(254),
    role_level role_level NOT NULL DEFAULT &#39;guest&#39;
);</code></pre>
<p><code>user</code>s can have several roles.</p>
<pre><code>CREATE TABLE user_in_role(
    id_user_account UUID NOT NULL REFERENCES user_account(id),
    id_role UUID NOT NULL REFERENCES role(id),
    PRIMARY KEY(id_user_account, id_role)
);</code></pre>
<p>Every part of an <code>rasmus</code> application can be associated with a <code>privilege</code></p>
<pre><code>CREATE TABLE privilege(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(80),
    description VARCHAR(254)
);</code></pre>
<p>Each <code>privilege</code> can be assigned to a <code>role</code>.</p>
<pre><code>CREATE TABLE role_privilege(
    id_role UUID NOT NULL REFERENCES role(id),
    id_privilege UUID NOT NULL REFERENCES privilege(id),
    PRIMARY KEY (id_role, id_privilege)
);</code></pre>
<p>These are the minimal relations for user and role management storage.</p>
<h2 id="transfer">transfer</h2>
<p>The <code>transfer</code> relation is located in the <code>core</code> schema. It uses the following state definitions.</p>
<pre><code>CREATE TYPE transfer_status as ENUM (
    &#39;pending&#39;,
    &#39;processing&#39;,
    &#39;succeeded&#39;,
    &#39;succeeded_with_warning&#39;,
    &#39;error&#39;
);</code></pre>
<p>This is not carved into stone. It will fit the first requirements to a stateful exchange between the <code>web backend</code> and the database.</p>
<p>The <code>transfer</code> relation itself looks like</p>
<pre><code>CREATE TABLE transfer(
	id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    status transfer_status NOT NULL DEFAULT &#39;pending&#39;,
    request JSONB NOT NULL,
    result JSONB
);</code></pre>
<p>Per default, every request is a <code>pending</code> request. A <code>transfer</code> entity must have at least a request body.</p>
<p>At this point conventions have to be made. A request must contain</p>
<ul>
<li>a <code>schema</code> field</li>
<li>the name of the <code>entity</code></li>
<li>the actual <code>payload</code></li>
<li>and the <code>action</code> to perform.</li>
</ul>
<p>After a request is inserted into <code>transfer</code>,</p>
<pre><code>CREATE FUNCTION transfer_trigger() RETURNS TRIGGER AS $$
BEGIN 
    PERFORM pg_notify(NEW.request-&gt;&gt;&#39;schema&#39;,NEW.id); 
    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER transfer_before_trigger BEFORE INSERT ON transfer
    FOR EACH ROW EXECUTE PROCEDURE transfer_trigger();</code></pre>
<p>a notification is send to the <code>database backend</code>. Pattern matching is used to find the right addressee for the request. A closer look has to be made, to decide, which operation must be done inside the database, to prevent multiple round trips.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="307pt" height="46pt"
 viewBox="0.00 0.00 307.00 46.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 42)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-42 303,-42 303,4 -4,4"/>
<!-- web -->
<g id="node1" class="node">
<title>web</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M61,-38C61,-38 12,-38 12,-38 6,-38 0,-32 0,-26 0,-26 0,-12 0,-12 0,-6 6,0 12,0 12,0 61,0 61,0 67,0 73,-6 73,-12 73,-12 73,-26 73,-26 73,-32 67,-38 61,-38"/>
<text text-anchor="middle" x="36.5" y="-22.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">web</text>
<text text-anchor="middle" x="36.5" y="-7.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">backend</text>
</g>
<!-- database -->
<g id="node2" class="node">
<title>database</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M174,-37C174,-37 121,-37 121,-37 115,-37 109,-31 109,-25 109,-25 109,-13 109,-13 109,-7 115,-1 121,-1 121,-1 174,-1 174,-1 180,-1 186,-7 186,-13 186,-13 186,-25 186,-25 186,-31 180,-37 174,-37"/>
<text text-anchor="middle" x="147.5" y="-15.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">database</text>
</g>
<!-- web&#45;&gt;database -->
<g id="edge1" class="edge">
<title>web&#45;&gt;database</title>
<path fill="none" stroke="#000000" d="M73.1532,-12.6085C81.4137,-12.2825 90.3064,-12.1788 98.9689,-12.2975"/>
<polygon fill="#000000" stroke="#000000" points="98.8991,-15.7968 108.9806,-12.539 99.0679,-8.7988 98.8991,-15.7968"/>
</g>
<!-- database&#45;&gt;web -->
<g id="edge4" class="edge">
<title>database&#45;&gt;web</title>
<path fill="none" stroke="#000000" d="M108.9806,-25.461C100.721,-25.7505 91.9061,-25.8225 83.3704,-25.6769"/>
<polygon fill="#000000" stroke="#000000" points="83.2471,-22.1722 73.1532,-25.3915 83.0515,-29.1695 83.2471,-22.1722"/>
</g>
<!-- bl -->
<g id="node3" class="node">
<title>bl</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M287,-38C287,-38 234,-38 234,-38 228,-38 222,-32 222,-26 222,-26 222,-12 222,-12 222,-6 228,0 234,0 234,0 287,0 287,0 293,0 299,-6 299,-12 299,-12 299,-26 299,-26 299,-32 293,-38 287,-38"/>
<text text-anchor="middle" x="260.5" y="-22.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">database</text>
<text text-anchor="middle" x="260.5" y="-7.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">backend</text>
</g>
<!-- database&#45;&gt;bl -->
<g id="edge2" class="edge">
<title>database&#45;&gt;bl</title>
<path fill="none" stroke="#000000" d="M186.0721,-12.5616C194.2539,-12.268 202.9953,-12.1819 211.5054,-12.3032"/>
<polygon fill="#000000" stroke="#000000" points="211.6351,-15.8074 221.718,-12.5541 211.807,-8.8095 211.6351,-15.8074"/>
</g>
<!-- bl&#45;&gt;database -->
<g id="edge3" class="edge">
<title>bl&#45;&gt;database</title>
<path fill="none" stroke="#000000" d="M221.718,-25.4459C213.5267,-25.7359 204.7826,-25.8185 196.2765,-25.6936"/>
<polygon fill="#000000" stroke="#000000" points="196.1565,-22.1896 186.0721,-25.4384 195.9815,-29.1874 196.1565,-22.1896"/>
</g>
</g>
</svg>
</div>
<p>As said before, the business logic is completely separated from the <code>web backend</code>.</p>
<h2 id="cms">cms</h2>
<p>A cms starts with an <code>article</code>.</p>
<pre><code>CREATE TABLE article(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_author UUID NOT NULL REFERENCES core.user_account(id),
    title VARCHAR(254),
    raw text,
    html text,
    is_visible boolean NOT NULL DEFAULT FALSE,
    is_draft boolean NOT NULL DEFAULT TRUE
);</code></pre>
<p>The <code>author</code> lives in the <code>core</code> namespace, and can be used inside the <code>cms</code> schema. The <code>raw</code> text is markdown based, the <code>html</code> is the generated result. A new <code>article</code> is per default invisible and in draft mode.</p>
<p>Before uploading <code>attachment</code>s to the database, the <code>file_type</code> has to be set.</p>
<pre><code>CREATE TYPE file_type AS ENUM (
    &#39;binary&#39;,
    &#39;jpeg&#39;,
    &#39;png&#39;,
    &#39;mp3&#39;,
    &#39;mp4&#39;,
    &#39;mkv&#39;
);

CREATE TABLE attachment(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    raw bytea NOT NULL,
    file_type file_type NOT NULL DEFAULT &#39;binary&#39;
);</code></pre>
<p>As for now, the binary content is stored within the database.</p>
<p>Every <code>article</code> can have multiple attachments.</p>
<pre><code>CREATE TABLE article_attachment(
    id_article UUID NOT NULL REFERENCES article(id),
    id_attachment UUID NOT NULL REFERENCES attachment(id),
    PRIMARY KEY(id_article, id_attachment)
);</code></pre>
<p>The <code>attachment</code>s can be addressed within the <code>article</code>s markdown content.</p>
<p>The <code>cms</code> provides a tree of <code>category</code>s.</p>
<pre><code>CREATE TABLE category(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(254) NOT NULL,
    description VARCHAR(512),
    icon VARCHAR(1), -- font awesome
    is_active BOOLEAN NOT NULL DEFAULT false,
    is_visible BOOLEAN NOT NULL DEFAULT false,
    LNUM INTEGER NOT NULL,
    RNUM INTEGER NOT NULL
);</code></pre>
<p>The tree is described as a <a href="https://en.wikipedia.org/wiki/Nested_set_model">nested set</a>.</p>
<p>An <code>article</code> can be assigned to multiple <code>categories</code>.</p>
<pre><code>CREATE TABLE article_in_category(
    id_article UUID NOT NULL REFERENCES article(id),
    id_category UUID NOT NULL REFERENCES category(id),
    PRIMARY KEY(id_article, id_category)
);</code></pre>
<h1 id="backend">backend</h1>
<p>Having set up the database, it comes for choosing the technology for the backend. There are several possibilities choosing the ‘right’ backend technology.</p>
<p>This will be covered with the next article.</p>
<p>Fell free to browse through the <a href="https://github.com/enter-haken/rasmus">sources</a>.</p>]]></summary>
</entry>
<entry>
    <title>A database gate keeper</title>
    <link href="https://enter-haken.github.io/posts/2017-08-07-database-architecture-part3.html" />
    <id>https://enter-haken.github.io/posts/2017-08-07-database-architecture-part3.html</id>
    <published>2017-08-07T00:00:00Z</published>
    <updated>2017-08-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>After <a href="/posts/2017-07-15-database-architecture-part2.html">working with some entities</a> it comes the question, how to get the data inside and outside the database. There is no need, that other parts of an application need to now, how the data is organized in relations. One possible way of hiding the inner database structure is to create a kind of transfer table.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="723pt" height="242pt"
 viewBox="0.00 0.00 723.00 242.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 238)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-238 719,-238 719,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="0,-59 0,-136 177,-136 177,-59 0,-59"/>
<text text-anchor="middle" x="88.5" y="-120.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">some kind of middleware</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="197,-8 197,-226 707,-226 707,-8 197,-8"/>
<text text-anchor="middle" x="452" y="-210.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">PostgreSQL</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="#ffffff" stroke="#ffffff" points="298,-16 298,-195 699,-195 699,-16 298,-16"/>
<text text-anchor="middle" x="498.5" y="-179.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">relational</text>
<text text-anchor="middle" x="498.5" y="-164.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">data</text>
</g>
<!-- mwnode -->
<g id="node1" class="node">
<title>mwnode</title>
<path fill="#ffffff" stroke="#ffffff" d="M122,-105C122,-105 55,-105 55,-105 49,-105 43,-99 43,-93 43,-93 43,-79 43,-79 43,-73 49,-67 55,-67 55,-67 122,-67 122,-67 128,-67 134,-73 134,-79 134,-79 134,-93 134,-93 134,-99 128,-105 122,-105"/>
<text text-anchor="middle" x="88.5" y="-89.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">middleware</text>
<text text-anchor="middle" x="88.5" y="-74.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">node</text>
</g>
<!-- transfer -->
<g id="node8" class="node">
<title>transfer</title>
<path fill="#ffffff" stroke="#ffffff" d="M258,-105C258,-105 217,-105 217,-105 211,-105 205,-99 205,-93 205,-93 205,-79 205,-79 205,-73 211,-67 217,-67 217,-67 258,-67 258,-67 264,-67 270,-73 270,-79 270,-79 270,-93 270,-93 270,-99 264,-105 258,-105"/>
<text text-anchor="middle" x="237.5" y="-89.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">transfer</text>
<text text-anchor="middle" x="237.5" y="-74.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">table</text>
</g>
<!-- mwnode&#45;&gt;transfer -->
<g id="edge6" class="edge">
<title>mwnode&#45;&gt;transfer</title>
<path fill="none" stroke="#000000" d="M134.0145,-86C153.2224,-86 175.4758,-86 194.4138,-86"/>
<polygon fill="#000000" stroke="#000000" points="194.5534,-89.5001 204.5534,-86 194.5533,-82.5001 194.5534,-89.5001"/>
</g>
<!-- customer -->
<g id="node2" class="node">
<title>customer</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M371,-104C371,-104 318,-104 318,-104 312,-104 306,-98 306,-92 306,-92 306,-80 306,-80 306,-74 312,-68 318,-68 318,-68 371,-68 371,-68 377,-68 383,-74 383,-80 383,-80 383,-92 383,-92 383,-98 377,-104 371,-104"/>
<text text-anchor="middle" x="344.5" y="-82.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">customer</text>
</g>
<!-- person -->
<g id="node3" class="node">
<title>person</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M469,-104C469,-104 431,-104 431,-104 425,-104 419,-98 419,-92 419,-92 419,-80 419,-80 419,-74 425,-68 431,-68 431,-68 469,-68 469,-68 475,-68 481,-74 481,-80 481,-80 481,-92 481,-92 481,-98 475,-104 469,-104"/>
<text text-anchor="middle" x="450" y="-82.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">person</text>
</g>
<!-- customer&#45;&gt;person -->
<g id="edge1" class="edge">
<title>customer&#45;&gt;person</title>
<path fill="none" stroke="#000000" d="M383.1852,-86C391.547,-86 400.4174,-86 408.8691,-86"/>
<polygon fill="#000000" stroke="#000000" points="408.9083,-89.5001 418.9082,-86 408.9082,-82.5001 408.9083,-89.5001"/>
</g>
<!-- p2p -->
<g id="node4" class="node">
<title>p2p</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M570.5,-77.5C570.5,-77.5 532.5,-77.5 532.5,-77.5 526.5,-77.5 520.5,-71.5 520.5,-65.5 520.5,-65.5 520.5,-36.5 520.5,-36.5 520.5,-30.5 526.5,-24.5 532.5,-24.5 532.5,-24.5 570.5,-24.5 570.5,-24.5 576.5,-24.5 582.5,-30.5 582.5,-36.5 582.5,-36.5 582.5,-65.5 582.5,-65.5 582.5,-71.5 576.5,-77.5 570.5,-77.5"/>
<text text-anchor="middle" x="551.5" y="-62.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">person</text>
<text text-anchor="middle" x="551.5" y="-47.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">to</text>
<text text-anchor="middle" x="551.5" y="-32.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">phone</text>
</g>
<!-- person&#45;&gt;p2p -->
<g id="edge2" class="edge">
<title>person&#45;&gt;p2p</title>
<path fill="none" stroke="#000000" d="M481.0049,-75.3087C490.3619,-72.0821 500.7799,-68.4897 510.6742,-65.0779"/>
<polygon fill="#000000" stroke="#000000" points="512.0225,-68.3152 520.3352,-61.7465 509.7405,-61.6976 512.0225,-68.3152"/>
</g>
<!-- p2a -->
<g id="node6" class="node">
<title>p2a</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M574,-148.5C574,-148.5 529,-148.5 529,-148.5 523,-148.5 517,-142.5 517,-136.5 517,-136.5 517,-107.5 517,-107.5 517,-101.5 523,-95.5 529,-95.5 529,-95.5 574,-95.5 574,-95.5 580,-95.5 586,-101.5 586,-107.5 586,-107.5 586,-136.5 586,-136.5 586,-142.5 580,-148.5 574,-148.5"/>
<text text-anchor="middle" x="551.5" y="-133.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">person</text>
<text text-anchor="middle" x="551.5" y="-118.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">to</text>
<text text-anchor="middle" x="551.5" y="-103.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">address</text>
</g>
<!-- person&#45;&gt;p2a -->
<g id="edge4" class="edge">
<title>person&#45;&gt;p2a</title>
<path fill="none" stroke="#000000" d="M481.0049,-96.9968C489.3107,-99.9427 498.4525,-103.1851 507.3219,-106.3309"/>
<polygon fill="#000000" stroke="#000000" points="506.1921,-109.6438 516.7869,-109.6879 508.5321,-103.0464 506.1921,-109.6438"/>
</g>
<!-- phone -->
<g id="node5" class="node">
<title>phone</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M673.5,-69C673.5,-69 639.5,-69 639.5,-69 633.5,-69 627.5,-63 627.5,-57 627.5,-57 627.5,-45 627.5,-45 627.5,-39 633.5,-33 639.5,-33 639.5,-33 673.5,-33 673.5,-33 679.5,-33 685.5,-39 685.5,-45 685.5,-45 685.5,-57 685.5,-57 685.5,-63 679.5,-69 673.5,-69"/>
<text text-anchor="middle" x="656.5" y="-47.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">phone</text>
</g>
<!-- p2p&#45;&gt;phone -->
<g id="edge3" class="edge">
<title>p2p&#45;&gt;phone</title>
<path fill="none" stroke="#000000" d="M582.7192,-51C593.5494,-51 605.8341,-51 617.2293,-51"/>
<polygon fill="#000000" stroke="#000000" points="617.377,-54.5001 627.3769,-51 617.3769,-47.5001 617.377,-54.5001"/>
</g>
<!-- address -->
<g id="node7" class="node">
<title>address</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M679,-140C679,-140 634,-140 634,-140 628,-140 622,-134 622,-128 622,-128 622,-116 622,-116 622,-110 628,-104 634,-104 634,-104 679,-104 679,-104 685,-104 691,-110 691,-116 691,-116 691,-128 691,-128 691,-134 685,-140 679,-140"/>
<text text-anchor="middle" x="656.5" y="-118.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">address</text>
</g>
<!-- p2a&#45;&gt;address -->
<g id="edge5" class="edge">
<title>p2a&#45;&gt;address</title>
<path fill="none" stroke="#000000" d="M586.1719,-122C594.3257,-122 603.1305,-122 611.6597,-122"/>
<polygon fill="#000000" stroke="#000000" points="611.8645,-125.5001 621.8645,-122 611.8644,-118.5001 611.8645,-125.5001"/>
</g>
<!-- transfer&#45;&gt;customer -->
<g id="edge7" class="edge">
<title>transfer&#45;&gt;customer</title>
<path fill="none" stroke="#000000" d="M270.1849,-86C278.1371,-86 286.8161,-86 295.3468,-86"/>
<polygon fill="#000000" stroke="#000000" points="295.62,-89.5001 305.6199,-86 295.6199,-82.5001 295.62,-89.5001"/>
</g>
</g>
</svg>
</div>
<p>This table is a kind of a gate keeper. Only this table should be used to communicate with he outside world. Maybe this sounds a little bit weird for a moment, but let me show you my idea.</p>
<!--more-->
<p>First we have to know, which entities can be used by the middleware.</p>
<pre><code>CREATE TYPE entity AS ENUM (
    &#39;employee&#39;,
    &#39;customer&#39;,
    &#39;purchase_order&#39;,
    &#39;article&#39;,
    &#39;price&#39;
);</code></pre>
<p>These are <a href="/posts/2017-07-15-database-architecture-part2.html">previously</a> used examples.</p>
<pre><code>CREATE TYPE transfer_status AS ENUM (
    &#39;pending&#39;,
    &#39;processing&#39;,
    &#39;succeeded&#39;,
    &#39;succeeded_with_warning&#39;,
    &#39;error&#39;
);</code></pre>
<p>The requested process can have a state.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="358pt" height="225pt"
 viewBox="0.00 0.00 358.00 225.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 221)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-221 354,-221 354,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="8,-62 8,-137 93,-137 93,-62 8,-62"/>
<text text-anchor="middle" x="50.5" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">request</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="113,-62 113,-167 217,-167 217,-62 113,-62"/>
<text text-anchor="middle" x="165" y="-151.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">server</text>
<text text-anchor="middle" x="165" y="-136.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">internal</text>
<text text-anchor="middle" x="165" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">processing</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="237,-8 237,-209 342,-209 342,-8 237,-8"/>
<text text-anchor="middle" x="289.5" y="-193.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">result</text>
</g>
<!-- pending -->
<g id="node1" class="node">
<title>pending</title>
<path fill="#ffffff" stroke="#ffffff" d="M73,-106C73,-106 28,-106 28,-106 22,-106 16,-100 16,-94 16,-94 16,-82 16,-82 16,-76 22,-70 28,-70 28,-70 73,-70 73,-70 79,-70 85,-76 85,-82 85,-82 85,-94 85,-94 85,-100 79,-106 73,-106"/>
<text text-anchor="middle" x="50.5" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">pending</text>
</g>
<!-- processing -->
<g id="node2" class="node">
<title>processing</title>
<path fill="#ffffff" stroke="#ffffff" d="M197,-106C197,-106 133,-106 133,-106 127,-106 121,-100 121,-94 121,-94 121,-82 121,-82 121,-76 127,-70 133,-70 133,-70 197,-70 197,-70 203,-70 209,-76 209,-82 209,-82 209,-94 209,-94 209,-100 203,-106 197,-106"/>
<text text-anchor="middle" x="165" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">processing</text>
</g>
<!-- pending&#45;&gt;processing -->
<g id="edge1" class="edge">
<title>pending&#45;&gt;processing</title>
<path fill="none" stroke="#000000" d="M85.1645,-88C93.207,-88 101.9577,-88 110.6205,-88"/>
<polygon fill="#000000" stroke="#000000" points="110.7019,-91.5001 120.7019,-88 110.7018,-84.5001 110.7019,-91.5001"/>
</g>
<!-- succeeded_with_warning -->
<g id="node3" class="node">
<title>succeeded_with_warning</title>
<path fill="#ffffff" stroke="#ffffff" d="M317.5,-177.5C317.5,-177.5 261.5,-177.5 261.5,-177.5 255.5,-177.5 249.5,-171.5 249.5,-165.5 249.5,-165.5 249.5,-136.5 249.5,-136.5 249.5,-130.5 255.5,-124.5 261.5,-124.5 261.5,-124.5 317.5,-124.5 317.5,-124.5 323.5,-124.5 329.5,-130.5 329.5,-136.5 329.5,-136.5 329.5,-165.5 329.5,-165.5 329.5,-171.5 323.5,-177.5 317.5,-177.5"/>
<text text-anchor="middle" x="289.5" y="-162.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">succeded</text>
<text text-anchor="middle" x="289.5" y="-147.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">with</text>
<text text-anchor="middle" x="289.5" y="-132.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">warning</text>
</g>
<!-- processing&#45;&gt;succeeded_with_warning -->
<g id="edge2" class="edge">
<title>processing&#45;&gt;succeeded_with_warning</title>
<path fill="none" stroke="#000000" d="M200.6767,-106.0533C213.0536,-112.3163 227.156,-119.4524 240.4219,-126.1653"/>
<polygon fill="#000000" stroke="#000000" points="238.9379,-129.3369 249.4409,-130.7291 242.0985,-123.091 238.9379,-129.3369"/>
</g>
<!-- succeeded -->
<g id="node4" class="node">
<title>succeeded</title>
<path fill="#ffffff" stroke="#ffffff" d="M322,-106C322,-106 257,-106 257,-106 251,-106 245,-100 245,-94 245,-94 245,-82 245,-82 245,-76 251,-70 257,-70 257,-70 322,-70 322,-70 328,-70 334,-76 334,-82 334,-82 334,-94 334,-94 334,-100 328,-106 322,-106"/>
<text text-anchor="middle" x="289.5" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">succeeded</text>
</g>
<!-- processing&#45;&gt;succeeded -->
<g id="edge3" class="edge">
<title>processing&#45;&gt;succeeded</title>
<path fill="none" stroke="#000000" d="M209.2446,-88C217.493,-88 226.2028,-88 234.7232,-88"/>
<polygon fill="#000000" stroke="#000000" points="234.9784,-91.5001 244.9784,-88 234.9784,-84.5001 234.9784,-91.5001"/>
</g>
<!-- error -->
<g id="node5" class="node">
<title>error</title>
<path fill="#ffffff" stroke="#ffffff" d="M304.5,-52C304.5,-52 274.5,-52 274.5,-52 268.5,-52 262.5,-46 262.5,-40 262.5,-40 262.5,-28 262.5,-28 262.5,-22 268.5,-16 274.5,-16 274.5,-16 304.5,-16 304.5,-16 310.5,-16 316.5,-22 316.5,-28 316.5,-28 316.5,-40 316.5,-40 316.5,-46 310.5,-52 304.5,-52"/>
<text text-anchor="middle" x="289.5" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">error</text>
</g>
<!-- processing&#45;&gt;error -->
<g id="edge4" class="edge">
<title>processing&#45;&gt;error</title>
<path fill="none" stroke="#000000" d="M206.803,-69.8686C221.8696,-63.3337 238.7339,-56.0191 253.2837,-49.7083"/>
<polygon fill="#000000" stroke="#000000" points="254.6871,-52.9147 262.4686,-45.7245 251.9016,-46.4927 254.6871,-52.9147"/>
</g>
</g>
</svg>
</div>
<p>For the start, the transfer table has some kind of <code>request</code> and some kind of <code>response</code>.</p>
<pre><code>CREATE TABLE transfer (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    status transfer_status NOT NULL DEFAULT &#39;pending&#39;,
    request JSONB NOT NULL,
    result JSONB
);</code></pre>
<p>A simple insert like</p>
<pre><code>INSERT INTO transfer (request) 
    VALUES (&#39;{&quot;some_data&quot; : &quot;values&quot;}&#39;::JSONB);</code></pre>
<p>should be enough, to communicate with the database.</p>
<p>Now it is time to fill this <code>request</code> object with life. First we define some keys, which are mandatory for every request.</p>
<ul>
<li>The <code>entity</code> key defines the entity known to the database. (e.g. <code>customer</code> or <code>purchase_order</code>)</li>
<li>The <code>payload</code> is the actual data</li>
<li>The <code>action</code> key tells the database, what to do with the <code>payload</code>. Valid actions for now are <code>select</code>, <code>upsert</code> and <code>delete</code></li>
</ul>
<p>The trigger function is the entry point for every data access.</p>
<pre><code>CREATE FUNCTION transfer_trigger_function() RETURNS TRIGGER AS $$
DECLARE
BEGIN
    CASE NEW.request-&gt;&gt;&#39;entity&#39;
        WHEN &#39;customer&#39; THEN
            SELECT customer_manager(NEW.id, NEW.request) INTO NEW.response;
        ELSE
            RAISE EXCEPTION &#39;not a valid entity&#39;;
    END CASE;
    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER transfer_after_trigger BEFORE INSERT ON transfer
    FOR EACH ROW EXECUTE PROCEDURE transfer_trigger_function();</code></pre>
<p>As you can see, you can access the <code>request</code> data from within the trigger function via <a href="https://www.postgresql.org/docs/current/static/functions-json.html">build in json functions</a>.</p>
<p>There shouldn’t be much logic in the transfer trigger. The entity managers should do the “hard work”.</p>
<p>Due to this is a trigger function, you should be aware of nesting functions too much. You should not update the <code>transfer</code> table out of the trigger function it self. This can lead to infinite loops.</p>
<h1 id="customer-entity-manager">customer entity manager</h1>
<p>Every entity manager should perform the <code>select</code>, <code>upsert</code> and <code>delete</code> tasks. Let’s take the <code>customer</code> as an example.</p>
<h2 id="select">select</h2>
<p>When every root entity like the <code>customer</code> relation has a <code>json_view</code> column, this should be the result for a select operation. In the first step, the request can look like</p>
<pre><code>{
    &quot;entity&quot; : &quot;customer&quot;,
    &quot;action&quot; : &quot;select&quot;,
    &quot;payload&quot; : { 
        &quot;id&quot; : &quot;29e2fa06-edfc-49ed-878b-49e8ded9bb89&quot; 
    }
}</code></pre>
<p>The <code>customer_manager</code> checks if the action is valid and calls the assigned function.</p>
<pre><code>CREATE FUNCTION customer_manager(request JSONB) RETURNS JSONB AS $$
DECLARE
    raw_response JSON;
BEGIN
    CASE request-&gt;&gt;&#39;action&#39;
        WHEN &#39;select&#39; THEN
            SELECT customer_manager_select(request-&gt;&#39;payload&#39;) INTO raw_response;
        ELSE
            RAISE EXCEPTION &#39;not a valid action&#39;;
    END CASE;
    
    RETURN raw_response;
END
$$ LANGUAGE plpgsql; </code></pre>
<p>The <code>customer_manager_select</code> function takes the payload and returns the <code>json_view</code> of the customer as a response.</p>
<pre><code>CREATE FUNCTION customer_manager_select(raw_payload JSONB) RETURNS JSONB AS $$
DECLARE 
    raw_result JSONB;
BEGIN
    SELECT json_view FROM customer WHERE id = (raw_payload-&gt;&gt;&#39;id&#39;)::UUID INTO raw_result;

    raw_result = &#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0 }&#39; || jsonb_build_object(&#39;data&#39;, raw_result);

    RETURN raw_result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>An</p>
<pre><code>INSERT INTO transfer (request) 
    VALUES (&#39;{ &quot;entity&quot; : &quot;customer&quot;, &quot;action&quot; : &quot;select&quot;, &quot;payload&quot; : { &quot;id&quot; : &quot;162a5041-14ba-442e-bc1b-a062b9926d49&quot; } }&#39;::JSONB);</code></pre>
<p>will result into the following row.</p>
<pre><code>                  id                  | status  |                                                request                                                |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  response|         created_at         |         updated_at         

 874c1126-8ea6-4609-9c6d-ed52fc8bb682 | pending | {&quot;action&quot;: &quot;select&quot;, &quot;entity&quot;: &quot;customer&quot;, &quot;payload&quot;: {&quot;id&quot;: &quot;162a5041-14ba-442e-bc1b-a062b9926d49&quot;}} | {&quot;data&quot;: {&quot;id&quot;: &quot;162a5041-14ba-442e-bc1b-a062b9926d49&quot;, &quot;person&quot;: {&quot;id&quot;: &quot;0ec888ea-b84b-4dab-97fc-c1a6fb8ff313&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;addresses&quot;: [{&quot;id&quot;: &quot;06690a9c-92ea-4791-8922-e4e2da7f8991&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44339&quot;, &quot;address_type&quot;: &quot;private&quot;, &quot;house_number&quot;: &quot;123&quot;}, {&quot;id&quot;: &quot;e81b9449-7c0e-4d39-993e-e483064dd6c9&quot;, &quot;city&quot;: &quot;Bochum&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44866&quot;, &quot;address_type&quot;: &quot;work&quot;, &quot;house_number&quot;: &quot;321&quot;}], &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;, &quot;phone_numbers&quot;: [{&quot;id&quot;: &quot;6c09f794-45f4-4746-ba0b-2a6ae9f8dd97&quot;, &quot;phone_number&quot;: &quot;+49123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;landline&quot;, &quot;is_primary_phone_number&quot;: true}, {&quot;id&quot;: &quot;5e08670f-0cf7-46b4-9c0b-40b87a727607&quot;, &quot;phone_number&quot;: &quot;+49151123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;cellular_network&quot;, &quot;is_primary_phone_number&quot;: false}], &quot;email_addresses&quot;: [{&quot;id&quot;: &quot;815fe354-b157-422e-b3c3-6686fead0152&quot;, &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;is_primary_email_address&quot;: false}]}, &quot;customer_number&quot;: &quot;AB123456&quot;}, &quot;status&quot;: &quot;ok&quot;, &quot;error_code&quot;: 0} | 2017-07-31 10:13:46.250357 | 2017-07-31 10:13:46.250357</code></pre>
<p>This is a fist shoot. The <code>response</code> can be quite big, so this should be refactored later. You might also want to build a <code>WHERE</code> clause out of the <code>payload</code> (e.g. Give me all customers living in Hamburg)</p>
<h2 id="delete">delete</h2>
<p>The <code>delete</code> action works with the root <code>id</code>.</p>
<pre><code>{
    &quot;entity&quot; : &quot;customer&quot;,
    &quot;action&quot; : &quot;delete&quot;,
    &quot;payload&quot; : { 
        &quot;id&quot; : &quot;29e2fa06-edfc-49ed-878b-49e8ded9bb89&quot; 
    }
}</code></pre>
<p>The <code>customer_manager</code> must be extended for the <code>delete</code> action.</p>
<pre><code>CREATE FUNCTION customer_manager(request JSONB) RETURNS JSONB AS $$
DECLARE
    raw_response JSON;
BEGIN
    CASE request-&gt;&gt;&#39;action&#39;
        WHEN &#39;select&#39; THEN
            SELECT customer_manager_select(request-&gt;&#39;payload&#39;) INTO raw_response;
        WHEN &#39;delete&#39; THEN
            SELECT customer_manager_delete(request-&gt;&#39;payload&#39;) INTO raw_response;
        ELSE
            RAISE EXCEPTION &#39;not a valid action&#39;;
    END CASE;
    
    RETURN raw_response;
END
$$ LANGUAGE plpgsql; </code></pre>
<p>The simplest approach would be</p>
<pre><code>CREATE FUNCTION customer_manager_delete(raw_payload JSONB) RETURNS JSONB AS $$
DECLARE 
    raw_result JSONB;
BEGIN
    DELETE FROM customer WHERE id = (raw_payload-&gt;&gt;&#39;id&#39;)::UUID;

    raw_result := (&#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0, &quot;data&quot; : { &quot;id&quot; : &quot;&#39; || (raw_payload-&gt;&gt;&#39;id&#39;) || &#39;&quot;}}&#39;)::JSONB;

    RETURN raw_result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>This will work, if the <code>customer</code> has no reference to other tables. After a first <code>purchase_order</code> is created, deletion won’t work any more, due to referential integrity constraints. This is an issue, to think about. In Germany for example, you have to store invoices for several years. This means, customers won’t be deleted, until there last invoice is deleted. There is one approach, to set a own <code>deleted</code> property for a <code>customer</code>. This property is very handy, so it can be included into the post <a href="https://en.wikipedia.org/wiki/Data_definition_language">DDL</a> script.</p>
<pre><code>CREATE FUNCTION add_metadata_to_every_table() RETURNS VOID AS $$
DECLARE 
    row record;
BEGIN
    FOR row IN SELECT tablename FROM pg_tables WHERE schemaname = &#39;test&#39; LOOP

        -- ...   
        EXECUTE &#39;ALTER TABLE &#39; || row.tablename || 
            &#39; ADD COLUMN deleted boolean NOT NULL DEFAULT false&#39;;
        -- ...

    END LOOP;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>Now every table has a <code>deleted</code> column.</p>
<p>Now the <code>customer_manager_select</code> looks like</p>
<pre><code>CREATE FUNCTION customer_manager_delete(raw_payload JSONB) RETURNS JSONB AS $$
BEGIN
    UPDATE customer SET deleted = true WHERE id = (raw_payload-&gt;&gt;&#39;id&#39;)::UUID;

    RETURN (&#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0, &quot;data&quot; : { &quot;id&quot; : &quot;&#39; || (raw_payload-&gt;&gt;&#39;id&#39;) || &#39;&quot;}}&#39;)::JSONB;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>It might be handy, if a <code>deleted</code> record can’t be updated any more. The <code>metadata_trigger</code> is a good place for checking for the <code>deleted</code> column.</p>
<pre><code>CREATE FUNCTION metadata_trigger() RETURNS TRIGGER AS $$
BEGIN
    IF NEW.deleted = true THEN
        RAISE EXCEPTION &#39;can not update the deleted record %&#39;, NEW.id::text;
    END IF;

    NEW.updated_at := now();
    RETURN NEW;
END
$$ LANGUAGE plpgsql;</code></pre>
<h2 id="upsert">upsert</h2>
<p>Let’s start with a <a href="/posts/2017-07-15-database-architecture-part2.html#customer">known customer</a>.</p>
<pre><code>    &quot;person&quot;: {
        &quot;addresses&quot;: [{
            &quot;city&quot;: &quot;Dortmund&quot;,
            &quot;street&quot;: &quot;Fakestreet&quot;,
            &quot;postal_code&quot;: &quot;44339&quot;,
            &quot;address_type&quot;: &quot;private&quot;,
            &quot;house_number&quot;: &quot;123&quot;
        }, {
            &quot;city&quot;: &quot;Bochum&quot;,
            &quot;street&quot;: &quot;Fakestreet&quot;,
            &quot;postal_code&quot;: &quot;44866&quot;,
            &quot;address_type&quot;: &quot;work&quot;,
            &quot;house_number&quot;: &quot;321&quot;
        }],
        &quot;last_name&quot;: &quot;Hake&quot;,
        &quot;first_name&quot;: &quot;Jan Frederik&quot;,
        &quot;phone_numbers&quot;: [{
            &quot;phone_number&quot;: &quot;+49123456789&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;communication_network&quot;: &quot;landline&quot;
        }, {
            &quot;phone_number&quot;: &quot;+49151123456789&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;communication_network&quot;: &quot;cellular_network&quot;
        }],
        &quot;email_addresses&quot;: [{
            &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;,
            &quot;communication_type&quot;: &quot;private&quot;
        }]
    }
}</code></pre>
<p>As you can see, there are no <code>id</code>s or <code>customer_numbers</code> present in the whole entity. For this example, a new customer is assumed. Imagine, you have a web form, where you enter your data. When you’re ready with editing, this might be a result for a customer.</p>
<p>So we first take a look at a possible insert function.</p>
<p>For now, we use a simple customer number generator.</p>
<pre><code>CREATE FUNCTION customer_number() RETURNS text AS $$
    from random import randint
    return &quot;AB%05d&quot; % randint(0,99999)
$$ LANGUAGE plpython3u;</code></pre>
<p>The default value of the <code>customer_number</code> must be changed to</p>
<pre><code>ALTER TABLE customer ALTER COLUMN customer_number SET DEFAULT customer_number();</code></pre>
<p>For a new <code>customer</code>, only <code>person</code> data is needed. The <code>customer_manager</code> has to be extended.</p>
<pre><code>CREATE FUNCTION customer_manager(request JSONB) RETURNS JSONB AS $$
DECLARE
    raw_response JSON;
BEGIN
    CASE request-&gt;&gt;&#39;action&#39;
       -- ...
       WHEN &#39;upsert&#39; THEN
            SELECT customer_manager_upsert(request-&gt;&#39;payload&#39;) INTO raw_response;
       -- ...  
    END CASE; 
$$ LANGUAGE plpgsql; </code></pre>
<p>We insert this new <code>customer</code>.</p>
<pre><code>CREATE FUNCTION customer_manager_upsert(raw_payload JSONB) RETURNS JSONB AS $$
DECLARE
    person_id UUID;
    customer_id UUID;
    result JSONB;
BEGIN
    INSERT INTO person (first_name, last_name, birth_date, notes, website)
         VALUES (raw_payload#&gt;&gt;&#39;{person,first_name}&#39;, 
             raw_payload#&gt;&gt;&#39;{person,last_name}&#39;,
             (raw_payload#&gt;&gt;&#39;{person,birth_date}&#39;)::DATE,
             raw_payload#&gt;&gt;&#39;{person,notes}&#39;,
             raw_payload#&gt;&gt;&#39;{person,website}&#39;) RETURNING id INTO person_id;
   
    INSERT INTO customer (id_person) VALUES (person_id) RETURNING id INTO customer_id;

    PERFORM update_json_view_customer(customer_id);

    SELECT json_view FROM customer WHERE id = customer_id INTO result;

    result = &#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0 }&#39;::JSONB || jsonb_build_object(&#39;data&#39;, result);

    RETURN result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>This creates a new <code>customer</code> with a new <code>person</code>. The <code>update_json_view_customer</code> <a href="/posts/2017-07-15-database-architecture-part2.html#customer">function</a> will update the <code>json_view</code> of the <code>customer</code>.</p>
<pre><code>{
    &quot;id&quot;: &quot;46624c40-c50a-478e-83e9-9117d7b87f39&quot;,
    &quot;person&quot;: {
        &quot;id&quot;: &quot;81b46e11-cdef-4a71-b850-68882b474c90&quot;,
        &quot;notes&quot;: null,
        &quot;website&quot;: null,
        &quot;addresses&quot;: null,
        &quot;last_name&quot;: &quot;Hake&quot;,
        &quot;birth_date&quot;: null,
        &quot;first_name&quot;: &quot;Jan Frederik&quot;,
        &quot;phone_numbers&quot;: null,
        &quot;email_addresses&quot;: null
    },
    &quot;customer_number&quot;: &quot;AB19856&quot;
}</code></pre>
<p>For the addresses, we have to loop through the nested json array</p>
<pre><code>IF raw_payload#&gt;&#39;{person}&#39; ? &#39;addresses&#39; THEN
    FOR address in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,addresses}&#39;) 
    LOOP
        INSERT INTO address (street, house_number, postal_code, city)
            VALUES (address-&gt;&gt;&#39;street&#39;, 
                address-&gt;&gt;&#39;house_number&#39;, 
                address-&gt;&gt;&#39;postal_code&#39;, 
                address-&gt;&gt;&#39;city&#39;)
            RETURNING id INTO address_id;

        INSERT INTO person_to_address (id_person, id_address)
            VALUES (person_id, address_id);
    END LOOP;
END IF;</code></pre>
<p>The phone numbers can be added with the following loop.</p>
<pre><code>IF raw_payload#&gt;&#39;{person}&#39; ? &#39;phone_numbers&#39; THEN
    FOR phone in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,phone_numbers}&#39;) 
    LOOP
        INSERT INTO phone (phone_number, communication_network)
            VALUES (phone-&gt;&gt;&#39;phone_number&#39;, 
                (phone-&gt;&gt;&#39;communication_network&#39;)::communication_network)
            RETURNING id INTO phone_id;

        INSERT INTO person_to_phone (id_person, id_phone, communication_type)
            VALUES (person_id,  phone_id, (phone-&gt;&gt;&#39;communication_type&#39;)::communication_type);
    END LOOP;
END IF;</code></pre>
<p>As you can see, the <code>communication_network</code> and <code>communication_type</code> have to be casted. This is good. Cast errors will cause an exception. This kind of type safety will help during more complex events.</p>
<p>Together we have</p>
<pre><code>CREATE FUNCTION customer_manager_upsert(raw_payload JSONB) RETURNS JSONB AS $$
DECLARE
    person_id UUID;
    customer_id UUID; 
    address_id UUID;
    phone_id UUID;
    email_id UUID;
    address JSONB;
    phone JSONB;
    email JSONB;
    result JSONB;
BEGIN
    INSERT INTO person (first_name, last_name, birth_date, notes, website)
         VALUES (raw_payload#&gt;&gt;&#39;{person,first_name}&#39;, 
             raw_payload#&gt;&gt;&#39;{person,last_name}&#39;,
             (raw_payload#&gt;&gt;&#39;{person,birth_date}&#39;)::DATE,
             raw_payload#&gt;&gt;&#39;{person,notes}&#39;,
             raw_payload#&gt;&gt;&#39;{person,website}&#39;) RETURNING id INTO person_id;

    IF raw_payload#&gt;&#39;{person}&#39; ? &#39;addresses&#39; THEN
        FOR address in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,addresses}&#39;) 
        LOOP
            INSERT INTO address (street, house_number, postal_code, city)
                VALUES (address-&gt;&gt;&#39;street&#39;, 
                    address-&gt;&gt;&#39;house_number&#39;, 
                    address-&gt;&gt;&#39;postal_code&#39;, 
                    address-&gt;&gt;&#39;city&#39;)
                RETURNING id INTO address_id;

            INSERT INTO person_to_address (id_person, id_address)
                VALUES (person_id, address_id);
        END LOOP;
    END IF;

    IF raw_payload#&gt;&#39;{person}&#39; ? &#39;phone_numbers&#39; THEN
        FOR phone in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,phone_numbers}&#39;) 
        LOOP
            INSERT INTO phone (phone_number, communication_network)
                VALUES (phone-&gt;&gt;&#39;phone_number&#39;, 
                    (phone-&gt;&gt;&#39;communication_network&#39;)::communication_network)
                RETURNING id INTO phone_id;

            INSERT INTO person_to_phone (id_person, id_phone, communication_type)
                VALUES (person_id,  phone_id, (phone-&gt;&gt;&#39;communication_type&#39;)::communication_type);
        END LOOP;
    END IF;

    IF raw_payload#&gt;&#39;{person}&#39; ? &#39;email_addresses&#39; THEN
        FOR email in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,email_addresses}&#39;) 
        LOOP
            INSERT INTO email (email_address)
                VALUES (email-&gt;&gt;&#39;email_address&#39;) 
                RETURNING id INTO email_id;

            INSERT INTO person_to_email (id_person, id_email, communication_type)
                VALUES (person_id, email_id, (email-&gt;&gt;&#39;communication_type&#39;)::communication_type);
        END LOOP;
    END IF;
    
    INSERT INTO customer (id_person) VALUES (person_id) RETURNING id INTO customer_id;

    PERFORM update_json_view_customer(customer_id);

    SELECT json_view FROM customer WHERE id = customer_id INTO result;

    result = &#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0 }&#39;::JSONB || jsonb_build_object(&#39;data&#39;, result);

    RETURN result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>This is a best case scenario. There are no duplicate checks for example. Maybe, the upsert function needs some rewrite in a more compact language like <a href="https://www.postgresql.org/docs/current/static/plpython.html">PL/Python</a>.</p>]]></summary>
</entry>
<entry>
    <title>Generate a ERM from a PostgreSQL database schema</title>
    <link href="https://enter-haken.github.io/posts/2017-07-20-erm-graphviz.html" />
    <id>https://enter-haken.github.io/posts/2017-07-20-erm-graphviz.html</id>
    <published>2017-07-20T00:00:00Z</published>
    <updated>2017-07-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Creating a <a href="https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model">ERM</a> is one of the first tasks, when a database is designed. During implementation, you have to sync the model with the schema. This manual task can be very annoying. With some database knowledge and some Linux standard tools, this task can be automated.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="369pt" height="101pt"
 viewBox="0.00 0.00 369.00 101.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 97)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-97 365,-97 365,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="8,-8 8,-85 101,-85 101,-8 8,-8"/>
<text text-anchor="middle" x="54.5" y="-69.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">Database</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="121,-8 121,-85 353,-85 353,-8 121,-8"/>
<text text-anchor="middle" x="237" y="-69.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">bash</text>
</g>
<!-- schema -->
<g id="node1" class="node">
<title>schema</title>
<path fill="#ffffff" stroke="#ffffff" d="M81,-54C81,-54 28,-54 28,-54 22,-54 16,-48 16,-42 16,-42 16,-28 16,-28 16,-22 22,-16 28,-16 28,-16 81,-16 81,-16 87,-16 93,-22 93,-28 93,-28 93,-42 93,-42 93,-48 87,-54 81,-54"/>
<text text-anchor="middle" x="54.5" y="-38.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">database</text>
<text text-anchor="middle" x="54.5" y="-23.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">schema</text>
</g>
<!-- awk -->
<g id="node2" class="node">
<title>awk</title>
<path fill="#ffffff" stroke="#ffffff" d="M205,-54C205,-54 141,-54 141,-54 135,-54 129,-48 129,-42 129,-42 129,-28 129,-28 129,-22 135,-16 141,-16 141,-16 205,-16 205,-16 211,-16 217,-22 217,-28 217,-28 217,-42 217,-42 217,-48 211,-54 205,-54"/>
<text text-anchor="middle" x="173" y="-38.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">awk</text>
<text text-anchor="middle" x="173" y="-23.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">processing</text>
</g>
<!-- schema&#45;&gt;awk -->
<g id="edge1" class="edge">
<title>schema&#45;&gt;awk</title>
<path fill="none" stroke="#000000" d="M93.3013,-35C101.3633,-35 110.0009,-35 118.507,-35"/>
<polygon fill="#000000" stroke="#000000" points="118.7697,-38.5001 128.7697,-35 118.7696,-31.5001 118.7697,-38.5001"/>
</g>
<!-- dot -->
<g id="node3" class="node">
<title>dot</title>
<path fill="#ffffff" stroke="#ffffff" d="M333,-54C333,-54 265,-54 265,-54 259,-54 253,-48 253,-42 253,-42 253,-28 253,-28 253,-22 259,-16 265,-16 265,-16 333,-16 333,-16 339,-16 345,-22 345,-28 345,-28 345,-42 345,-42 345,-48 339,-54 333,-54"/>
<text text-anchor="middle" x="299" y="-38.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">graphviz</text>
<text text-anchor="middle" x="299" y="-23.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">processing </text>
</g>
<!-- awk&#45;&gt;dot -->
<g id="edge2" class="edge">
<title>awk&#45;&gt;dot</title>
<path fill="none" stroke="#000000" d="M217.0687,-35C225.242,-35 233.884,-35 242.3702,-35"/>
<polygon fill="#000000" stroke="#000000" points="242.6023,-38.5001 252.6023,-35 242.6022,-31.5001 242.6023,-38.5001"/>
</g>
</g>
</svg>
</div>
<!--more-->
<h1 id="get-the-schema">get the schema</h1>
<p>The <a href="https://www.postgresql.org/docs/current/static/information-schema.html">information_schema</a> exists in all databases.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT table_name, column_name, data_type, udt_name \
&gt; FROM information_schema.columns WHERE table_schema = &#39;test&#39;&quot; | head
       table_name       |       column_name        |          data_type          |       udt_name        
------------------------+--------------------------+-----------------------------+-----------------------
 person_to_email        | id_person                | uuid                        | uuid
 person_to_email        | id_email                 | uuid                        | uuid
 person_to_email        | communication_type       | USER-DEFINED                | communication_type
 person_to_email        | is_primary_email_address | boolean                     | bool
 person_to_email        | created_at               | timestamp without time zone | timestamp
 person_to_email        | updated_at               | timestamp without time zone | timestamp
 person_view            | first_name               | character varying           | varchar
 person_view            | last_name                | character varying           | varchar</code></pre>
<p>These are all the columns from our test schema. We still need some information about references between the relations. For the next processing step, all of the necessary column data should be in one result record.</p>
<p>With the key column constraints</p>
<pre><code>$ psql -U postgres -c &quot;SELECT constraint_name, table_name, column_name \
&gt; FROM information_schema.key_column_usage WHERE table_schema = &#39;test&#39;&quot; | head
              constraint_name               |       table_name       |      column_name      
--------------------------------------------+------------------------+-----------------------
 person_to_email_id_email_fkey              | person_to_email        | id_email
 person_to_email_id_person_fkey             | person_to_email        | id_person
 person_to_email_pkey                       | person_to_email        | id_person
 person_to_email_pkey                       | person_to_email        | id_email
 person_pkey                                | person                 | id
 address_pkey                               | address                | id
 employee_id_person_fkey                    | employee               | id_person
 employee_pkey                              | employee               | id</code></pre>
<p>and a list of <a href="https://www.postgresql.org/docs/current/static/infoschema-table-constraints.html">table_constraints</a>,</p>
<pre><code>$ psql -U postgres -c &quot;SELECT constraint_name, table_name, constraint_type \
&gt; FROM information_schema.table_constraints WHERE table_schema = &#39;test&#39; \
&gt; AND constraint_type IN (&#39;FOREIGN KEY&#39;,&#39;PRIMARY KEY&#39;)&quot; | head
              constraint_name               |       table_name       | constraint_type
--------------------------------------------+------------------------+-----------------
 person_pkey                                | person                 | PRIMARY KEY
 address_pkey                               | address                | PRIMARY KEY
 person_to_address_pkey                     | person_to_address      | PRIMARY KEY
 person_to_address_id_person_fkey           | person_to_address      | FOREIGN KEY
 person_to_address_id_address_fkey          | person_to_address      | FOREIGN KEY
 email_pkey                                 | email                  | PRIMARY KEY
 person_to_email_pkey                       | person_to_email        | PRIMARY KEY
 person_to_email_id_person_fkey             | person_to_email        | FOREIGN KEY</code></pre>
<p>we can build our first query.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT c.table_name, 
&gt; c.column_name, 
&gt; c.data_type, 
&gt; c.udt_name,
&gt; is_nullable, 
&gt; c.character_maximum_length,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;PRIMARY KEY&#39; LIMIT 1
&gt; ) primary_key
&gt; FROM information_schema.columns c 
&gt;         JOIN information_schema.tables t on c.table_name = t.table_name
&gt; WHERE c.table_schema = &#39;test&#39; AND t.table_type = &#39;BASE TABLE&#39;&quot; | head
       table_name       |       column_name        |          data_type          |       udt_name        | is_nullable | character_maximum_length | primary_key 
------------------------+--------------------------+-----------------------------+-----------------------+-------------+--------------------------+-------------
 person_to_email        | id_person                | uuid                        | uuid                  | NO          |                          | PRIMARY KEY
 person_to_email        | id_email                 | uuid                        | uuid                  | NO          |                          | PRIMARY KEY
 person_to_email        | communication_type       | USER-DEFINED                | communication_type    | NO          |                          | 
 person_to_email        | is_primary_email_address | boolean                     | bool                  | NO          |                          | 
 person_to_email        | created_at               | timestamp without time zone | timestamp             | NO          |                          | 
 person_to_email        | updated_at               | timestamp without time zone | timestamp             | NO          |                          | 
 person                 | id                       | uuid                        | uuid                  | NO          |                          | PRIMARY KEY
 person                 | first_name               | character varying           | varchar               | YES         |                      512 | </code></pre>
<p>Now we need the foreign keys and the target of the relation. These information can be fetched from the <a href="https://www.postgresql.org/docs/current/static/infoschema-constraint-column-usage.html">constraint_column_usage view</a>.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT table_name, column_name, constraint_name FROM information_schema.constraint_column_usage \
&gt; WHERE table_schema = &#39;test&#39;&quot; | head
       table_name       |      column_name      |              constraint_name               
------------------------+-----------------------+--------------------------------------------
 person                 | id                    | person_pkey
 address                | id                    | address_pkey
 person_to_address      | id_person             | person_to_address_pkey
 person_to_address      | id_address            | person_to_address_pkey
 person                 | id                    | person_to_address_id_person_fkey
 address                | id                    | person_to_address_id_address_fkey
 email                  | id                    | email_pkey
 person_to_email        | id_person             | person_to_email_pkey</code></pre>
<p>With this we are coming to our next query.</p>
<pre><code>$  psql -U postgres -c &quot;SELECT c.table_name,
&gt; c.column_name,
&gt; c.data_type,
&gt; c.udt_name,
&gt; c.is_nullable,
&gt; c.character_maximum_length,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name
&gt;                 AND c.table_name = kcu.table_name
&gt;                 AND tc.constraint_type = &#39;PRIMARY KEY&#39; LIMIT 1
&gt; ) primary_key,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name
&gt;                 AND c.table_name = kcu.table_name
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) foreign_key,
&gt; (SELECT ccu.table_name FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         JOIN information_schema.constraint_column_usage ccu
&gt;                 ON tc.constraint_name = ccu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name
&gt;                 AND c.table_name = kcu.table_name
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) reference_table,
&gt; (SELECT ccu.column_name FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         JOIN information_schema.constraint_column_usage ccu
&gt;                 ON tc.constraint_name = ccu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name
&gt;                 AND c.table_name = kcu.table_name
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) reference_column
&gt;
&gt; FROM information_schema.columns c
&gt;         JOIN information_schema.tables t on c.table_name = t.table_name
&gt; WHERE c.table_schema = &#39;test&#39; AND t.table_type = &#39;BASE TABLE&#39;&quot; | head
       table_name       |       column_name        |          data_type          |       udt_name        | is_nullable | character_maximum_length | primary_key | foreign_key | reference_table | reference_column
------------------------+--------------------------+-----------------------------+-----------------------+-------------+--------------------------+-------------+-------------+-----------------+------------------
 person_to_email        | id_person                | uuid                        | uuid                  | NO          |                          | PRIMARY KEY | FOREIGN KEY | person          | id
 person_to_email        | id_email                 | uuid                        | uuid                  | NO          |                          | PRIMARY KEY | FOREIGN KEY | email           | id
 person_to_email        | communication_type       | USER-DEFINED                | communication_type    | NO          |                          |             |             |                 |
 person_to_email        | is_primary_email_address | boolean                     | bool                  | NO          |                          |             |             |                 |
 person_to_email        | created_at               | timestamp without time zone | timestamp             | NO          |                          |             |             |                 |
 person_to_email        | updated_at               | timestamp without time zone | timestamp             | NO          |                          |             |             |                 |
 person                 | id                       | uuid                        | uuid                  | NO          |                          | PRIMARY KEY |             |                 |
 person                 | first_name               | character varying           | varchar               | YES         |                      512 |             |             |                 |</code></pre>
<p>There is one thing left. It would be nice, if you can see the enum values within the ERM. Let’s look, what we can do about it.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT e.enumlabel, t.typname FROM pg_type t \
&gt; JOIN pg_enum e ON t.oid = e.enumtypid \
&gt; JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace&quot;  | head
       enumlabel        |        typname
------------------------+-----------------------
 work                   | address_type
 invoice                | address_type
 delivery               | address_type
 private                | address_type
 organization           | communication_type
 private                | communication_type
 work                   | communication_type
 cellular_network       | communication_network</code></pre>
<p>This can be matched on the column <code>udt_name</code>.</p>
<p>Now we have our final SQL statement for now.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT c.table_name, 
&gt; c.column_name, 
&gt; c.data_type, 
&gt; c.udt_name,
&gt; (SELECT string_agg(e.enumlabel::TEXT, &#39;, &#39;)
&gt;         FROM pg_type t 
&gt;            JOIN pg_enum e on t.oid = e.enumtypid  
&gt;            JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE t.typname = c.udt_name) enum_values,
&gt; c.is_nullable, 
&gt; c.character_maximum_length,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;PRIMARY KEY&#39; LIMIT 1
&gt; ) primary_key,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) foreign_key,
&gt; (SELECT ccu.table_name FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         JOIN information_schema.constraint_column_usage ccu
&gt;                 ON tc.constraint_name = ccu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) reference_table,
&gt; (SELECT ccu.column_name FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         JOIN information_schema.constraint_column_usage ccu
&gt;                 ON tc.constraint_name = ccu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) reference_column
&gt; 
&gt; FROM information_schema.columns c 
&gt;         JOIN information_schema.tables t on c.table_name = t.table_name
&gt; WHERE c.table_schema = &#39;test&#39; AND t.table_type = &#39;BASE TABLE&#39;&quot; | head
       table_name       |       column_name        |          data_type          |       udt_name        |                                     enum_values                                     | is_nullable | character_maximum_length | primary_key | foreign_key | reference_table | reference_column 
------------------------+--------------------------+-----------------------------+-----------------------+-------------------------------------------------------------------------------------+-------------+--------------------------+-------------+-------------+-----------------+------------------
 person_to_email        | id_person                | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY | FOREIGN KEY | person          | id
 person_to_email        | id_email                 | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY | FOREIGN KEY | email           | id
 person_to_email        | communication_type       | USER-DEFINED                | communication_type    | work, private, organization                                                         | NO          |                          |             |             |                 | 
 person_to_email        | is_primary_email_address | boolean                     | bool                  |                                                                                     | NO          |                          |             |             |                 | 
 person_to_email        | created_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 | 
 person_to_email        | updated_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 | 
 person                 | id                       | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY |             |                 | 
 person                 | first_name               | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | </code></pre>
<p>The <code>string_agg</code> function is used to concentrate the enum values.</p>
<h1 id="a-look-ahead">a look ahead</h1>
<p>Before starting to work with the raw schema data, we take a look at our goal. We use graphviz for drawing the ERM. My goal is to get close to a ERM visualization.</p>
<pre><code>digraph {
    node [shape=Mrecord; fontname=&quot;Courier New&quot; style=&quot;filled, bold&quot; fillcolor=&quot;white&quot;, fontcolor=&quot;black&quot;];
    customer [shape=plaintext; label=&lt;
     &lt;TABLE BORDER=&quot;1&quot; CELLBORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;3&quot;&gt;
     &lt;TR&gt;
        &lt;TD COLSPAN=&quot;5&quot; BGCOLOR=&quot;black&quot;&gt;&lt;FONT color=&quot;white&quot;&gt;&lt;B&gt;customer&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD&gt;column&lt;/TD&gt;
        &lt;TD&gt;type&lt;/TD&gt;
        &lt;TD&gt;nullable&lt;/TD&gt;
        &lt;TD&gt;PK&lt;/TD&gt;
        &lt;TD&gt;FK&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f1&quot;&gt;id&lt;/TD&gt;
        &lt;TD&gt;uuid&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;PRIMARY KEY&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f2&quot;&gt;id_person&lt;/TD&gt;
        &lt;TD&gt;uuid&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;FOREIGN KEY&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f3&quot;&gt;customer_number&lt;/TD&gt;
        &lt;TD&gt;varchar&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f4&quot;&gt;json_view&lt;/TD&gt;
        &lt;TD&gt;jsonb&lt;/TD&gt;
        &lt;TD&gt;YES&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f5&quot;&gt;created_at&lt;/TD&gt;
        &lt;TD&gt;timestamp&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f6&quot;&gt;updated_at&lt;/TD&gt;
        &lt;TD&gt;timestamp&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;/TABLE&gt;&gt;]
}</code></pre>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="504pt" height="186pt"
 viewBox="0.00 0.00 504.00 186.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 182)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-182 500,-182 500,4 -4,4"/>
<!-- customer -->
<g id="node1" class="node">
<title>customer</title>
<polygon fill="#ffffff" stroke="transparent" stroke-width="2" points="496,-178 0,-178 0,0 496,0 496,-178"/>
<polygon fill="#000000" stroke="transparent" points="9,-152 9,-173 487,-173 487,-152 9,-152"/>
<text text-anchor="start" x="214.5" y="-159.8" font-family="Courier New" font-weight="bold" font-size="14.00" fill="#ffffff">customer</text>
<text text-anchor="start" x="49" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">column</text>
<text text-anchor="start" x="162.5" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">type</text>
<text text-anchor="start" x="223" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">nullable</text>
<text text-anchor="start" x="333" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">PK</text>
<text text-anchor="start" x="430" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">FK</text>
<text text-anchor="start" x="65.5" y="-116.8" font-family="Courier New" font-size="14.00" fill="#000000">id</text>
<text text-anchor="start" x="162.5" y="-116.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="248" y="-116.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="296" y="-116.8" font-family="Courier New" font-size="14.00" fill="#000000">PRIMARY KEY</text>
<text text-anchor="start" x="36.5" y="-95.8" font-family="Courier New" font-size="14.00" fill="#000000">id_person</text>
<text text-anchor="start" x="162.5" y="-95.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="248" y="-95.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="393" y="-95.8" font-family="Courier New" font-size="14.00" fill="#000000">FOREIGN KEY</text>
<text text-anchor="start" x="12" y="-74.8" font-family="Courier New" font-size="14.00" fill="#000000">customer_number</text>
<text text-anchor="start" x="150.5" y="-74.8" font-family="Courier New" font-size="14.00" fill="#000000">varchar</text>
<text text-anchor="start" x="248" y="-74.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="36.5" y="-53.8" font-family="Courier New" font-size="14.00" fill="#000000">json_view</text>
<text text-anchor="start" x="158.5" y="-53.8" font-family="Courier New" font-size="14.00" fill="#000000">jsonb</text>
<text text-anchor="start" x="244" y="-53.8" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="32.5" y="-32.8" font-family="Courier New" font-size="14.00" fill="#000000">created_at</text>
<text text-anchor="start" x="142" y="-32.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="248" y="-32.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="32.5" y="-11.8" font-family="Courier New" font-size="14.00" fill="#000000">updated_at</text>
<text text-anchor="start" x="142" y="-11.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="248" y="-11.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<polygon fill="none" stroke="#000000" points="8,-4 8,-174 488,-174 488,-4 8,-4"/>
</g>
</g>
</svg>
</div>
<p>The table column layout fits our needs for our relation. The <code>port</code> attribute is important for the edges.</p>
<p>If we have a <code>person</code> and a <code>customer</code>, adding</p>
<pre><code>customer -&gt; person;</code></pre>
<p>will create an edge for these relations.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="504pt" height="463pt"
 viewBox="0.00 0.00 504.00 463.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 459)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-459 500,-459 500,4 -4,4"/>
<!-- person -->
<g id="node1" class="node">
<title>person</title>
<polygon fill="#ffffff" stroke="transparent" stroke-width="2" points="438.5,-241 57.5,-241 57.5,0 438.5,0 438.5,-241"/>
<polygon fill="#000000" stroke="transparent" points="67,-214.5 67,-235.5 430,-235.5 430,-214.5 67,-214.5"/>
<text text-anchor="start" x="223.5" y="-222.3" font-family="Courier New" font-weight="bold" font-size="14.00" fill="#ffffff">person</text>
<text text-anchor="start" x="86.5" y="-200.3" font-family="Courier New" font-size="14.00" fill="#000000">column</text>
<text text-anchor="start" x="179.5" y="-200.3" font-family="Courier New" font-size="14.00" fill="#000000">type</text>
<text text-anchor="start" x="240" y="-200.3" font-family="Courier New" font-size="14.00" fill="#000000">nullable</text>
<text text-anchor="start" x="350" y="-200.3" font-family="Courier New" font-size="14.00" fill="#000000">PK</text>
<text text-anchor="start" x="410" y="-200.3" font-family="Courier New" font-size="14.00" fill="#000000">FK</text>
<text text-anchor="start" x="103" y="-179.3" font-family="Courier New" font-size="14.00" fill="#000000">id</text>
<text text-anchor="start" x="179.5" y="-179.3" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="265" y="-179.3" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="313" y="-179.3" font-family="Courier New" font-size="14.00" fill="#000000">PRIMARY KEY</text>
<text text-anchor="start" x="70" y="-158.3" font-family="Courier New" font-size="14.00" fill="#000000">first_name</text>
<text text-anchor="start" x="167.5" y="-158.3" font-family="Courier New" font-size="14.00" fill="#000000">varchar</text>
<text text-anchor="start" x="261" y="-158.3" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="74" y="-137.3" font-family="Courier New" font-size="14.00" fill="#000000">last_name</text>
<text text-anchor="start" x="167.5" y="-137.3" font-family="Courier New" font-size="14.00" fill="#000000">varchar</text>
<text text-anchor="start" x="261" y="-137.3" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="70" y="-116.3" font-family="Courier New" font-size="14.00" fill="#000000">birth_date</text>
<text text-anchor="start" x="179.5" y="-116.3" font-family="Courier New" font-size="14.00" fill="#000000">date</text>
<text text-anchor="start" x="261" y="-116.3" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="90.5" y="-95.3" font-family="Courier New" font-size="14.00" fill="#000000">notes</text>
<text text-anchor="start" x="167.5" y="-95.3" font-family="Courier New" font-size="14.00" fill="#000000">varchar</text>
<text text-anchor="start" x="261" y="-95.3" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="82.5" y="-74.3" font-family="Courier New" font-size="14.00" fill="#000000">website</text>
<text text-anchor="start" x="167.5" y="-74.3" font-family="Courier New" font-size="14.00" fill="#000000">varchar</text>
<text text-anchor="start" x="261" y="-74.3" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="74" y="-53.3" font-family="Courier New" font-size="14.00" fill="#000000">json_view</text>
<text text-anchor="start" x="175.5" y="-53.3" font-family="Courier New" font-size="14.00" fill="#000000">jsonb</text>
<text text-anchor="start" x="261" y="-53.3" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="70" y="-32.3" font-family="Courier New" font-size="14.00" fill="#000000">created_at</text>
<text text-anchor="start" x="159" y="-32.3" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="265" y="-32.3" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="70" y="-11.3" font-family="Courier New" font-size="14.00" fill="#000000">updated_at</text>
<text text-anchor="start" x="159" y="-11.3" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="265" y="-11.3" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<polygon fill="none" stroke="#000000" points="65.5,-4 65.5,-237 430.5,-237 430.5,-4 65.5,-4"/>
</g>
<!-- customer -->
<g id="node2" class="node">
<title>customer</title>
<polygon fill="#ffffff" stroke="transparent" stroke-width="2" points="496,-455 0,-455 0,-277 496,-277 496,-455"/>
<polygon fill="#000000" stroke="transparent" points="9,-429 9,-450 487,-450 487,-429 9,-429"/>
<text text-anchor="start" x="214.5" y="-436.8" font-family="Courier New" font-weight="bold" font-size="14.00" fill="#ffffff">customer</text>
<text text-anchor="start" x="49" y="-414.8" font-family="Courier New" font-size="14.00" fill="#000000">column</text>
<text text-anchor="start" x="162.5" y="-414.8" font-family="Courier New" font-size="14.00" fill="#000000">type</text>
<text text-anchor="start" x="223" y="-414.8" font-family="Courier New" font-size="14.00" fill="#000000">nullable</text>
<text text-anchor="start" x="333" y="-414.8" font-family="Courier New" font-size="14.00" fill="#000000">PK</text>
<text text-anchor="start" x="430" y="-414.8" font-family="Courier New" font-size="14.00" fill="#000000">FK</text>
<text text-anchor="start" x="65.5" y="-393.8" font-family="Courier New" font-size="14.00" fill="#000000">id</text>
<text text-anchor="start" x="162.5" y="-393.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="248" y="-393.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="296" y="-393.8" font-family="Courier New" font-size="14.00" fill="#000000">PRIMARY KEY</text>
<text text-anchor="start" x="36.5" y="-372.8" font-family="Courier New" font-size="14.00" fill="#000000">id_person</text>
<text text-anchor="start" x="162.5" y="-372.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="248" y="-372.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="393" y="-372.8" font-family="Courier New" font-size="14.00" fill="#000000">FOREIGN KEY</text>
<text text-anchor="start" x="12" y="-351.8" font-family="Courier New" font-size="14.00" fill="#000000">customer_number</text>
<text text-anchor="start" x="150.5" y="-351.8" font-family="Courier New" font-size="14.00" fill="#000000">varchar</text>
<text text-anchor="start" x="248" y="-351.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="36.5" y="-330.8" font-family="Courier New" font-size="14.00" fill="#000000">json_view</text>
<text text-anchor="start" x="158.5" y="-330.8" font-family="Courier New" font-size="14.00" fill="#000000">jsonb</text>
<text text-anchor="start" x="244" y="-330.8" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="32.5" y="-309.8" font-family="Courier New" font-size="14.00" fill="#000000">created_at</text>
<text text-anchor="start" x="142" y="-309.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="248" y="-309.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="32.5" y="-288.8" font-family="Courier New" font-size="14.00" fill="#000000">updated_at</text>
<text text-anchor="start" x="142" y="-288.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="248" y="-288.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<polygon fill="none" stroke="#000000" points="8,-281 8,-451 488,-451 488,-281 8,-281"/>
</g>
<!-- customer&#45;&gt;person -->
<g id="edge1" class="edge">
<title>customer&#45;&gt;person</title>
<path fill="none" stroke="#000000" d="M248,-276.6744C248,-268.3971 248,-259.9002 248,-251.3508"/>
<polygon fill="#000000" stroke="#000000" points="251.5001,-251.3002 248,-241.3003 244.5001,-251.3003 251.5001,-251.3002"/>
</g>
</g>
</svg>
</div>
<h1 id="preparations">preparations</h1>
<p>First we export the schema to a file (e.g. <code>schema.txt</code>). This file will be used for the awk processing.</p>
<p>The first two lines of the head</p>
<pre><code>$ head -n 5 schema.txt
       table_name       |       column_name        |          data_type          |       udt_name        |                                     enum_values                                     | is_nullable | character_maximum_length | primary_key | foreign_key | reference_table | reference_column 
------------------------+--------------------------+-----------------------------+-----------------------+-------------------------------------------------------------------------------------+-------------+--------------------------+-------------+-------------+-----------------+------------------
 person                 | id                       | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY |             |                 | 
 person                 | first_name               | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | 
 person                 | last_name                | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | </code></pre>
<p>must be removed. This can be done by</p>
<pre><code>$ head -n5 schema.txt | tail -n+3
 person                 | id                       | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY |             |                 | 
 person                 | first_name               | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | 
 person                 | last_name                | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | </code></pre>
<p>The last two lines (one blank line) of the tail</p>
<pre><code> article                | status                   | USER-DEFINED                | article_status        | active, inactive                                                                    | NO          |                          |             |             |                 |
 article                | created_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 |
 article                | updated_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 |
(109 Zeilen)
    </code></pre>
<p>can be removed with</p>
<pre><code>$ tail -n 5 schema.txt | head -n -2
 article                | status                   | USER-DEFINED                | article_status        | active, inactive                                                                    | NO          |                          |             |             |                 |
 article                | created_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 |
 article                | updated_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 |</code></pre>
<p>Now we have a record in every line.</p>
<h1 id="get-started-with-awk">get started with awk</h1>
<p>An awk program has the following structure.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="284pt" height="44pt"
 viewBox="0.00 0.00 284.00 44.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 40)">
<title>%3</title>
<polygon fill="#d3d3d3" stroke="transparent" points="-4,4 -4,-40 280,-40 280,4 -4,4"/>
<!-- begin -->
<g id="node1" class="node">
<title>begin</title>
<path fill="#ffffff" stroke="#ffffff" d="M50,-36C50,-36 12,-36 12,-36 6,-36 0,-30 0,-24 0,-24 0,-12 0,-12 0,-6 6,0 12,0 12,0 50,0 50,0 56,0 62,-6 62,-12 62,-12 62,-24 62,-24 62,-30 56,-36 50,-36"/>
<text text-anchor="middle" x="31" y="-14.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">BEGIN</text>
</g>
<!-- middle -->
<g id="node2" class="node">
<title>middle</title>
<path fill="#ffffff" stroke="#ffffff" d="M174,-36C174,-36 110,-36 110,-36 104,-36 98,-30 98,-24 98,-24 98,-12 98,-12 98,-6 104,0 110,0 110,0 174,0 174,0 180,0 186,-6 186,-12 186,-12 186,-24 186,-24 186,-30 180,-36 174,-36"/>
<text text-anchor="middle" x="142" y="-14.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">middle part</text>
</g>
<!-- begin&#45;&gt;middle -->
<g id="edge1" class="edge">
<title>begin&#45;&gt;middle</title>
<path fill="none" stroke="#000000" d="M62.2151,-18C70.1423,-18 78.8929,-18 87.6071,-18"/>
<polygon fill="#000000" stroke="#000000" points="87.7686,-21.5001 97.7685,-18 87.7685,-14.5001 87.7686,-21.5001"/>
</g>
<!-- end -->
<g id="node3" class="node">
<title>end</title>
<path fill="#ffffff" stroke="#ffffff" d="M264,-36C264,-36 234,-36 234,-36 228,-36 222,-30 222,-24 222,-24 222,-12 222,-12 222,-6 228,0 234,0 234,0 264,0 264,0 270,0 276,-6 276,-12 276,-12 276,-24 276,-24 276,-30 270,-36 264,-36"/>
<text text-anchor="middle" x="249" y="-14.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">END</text>
</g>
<!-- middle&#45;&gt;end -->
<g id="edge2" class="edge">
<title>middle&#45;&gt;end</title>
<path fill="none" stroke="#000000" d="M186.1388,-18C194.6389,-18 203.4644,-18 211.7208,-18"/>
<polygon fill="#000000" stroke="#000000" points="211.807,-21.5001 221.807,-18 211.8069,-14.5001 211.807,-21.5001"/>
</g>
</g>
</svg>
</div>
<p>The BEGIN and the END part is executed once. The middle part is executed for every data record.</p>
<p>The BEGIN part introduces the graph.</p>
<pre><code>BEGIN {
    print(&quot;digraph {&quot;)
    print(&quot;graph [overlap=false;splines=true;regular=true];&quot;)
    print(&quot;node [shape=Mrecord; fontname=\&quot;Courier New\&quot; style=\&quot;filled, bold\&quot; fillcolor=\&quot;white\&quot;, fontcolor=\&quot;black\&quot;];&quot;)
}</code></pre>
<p>The middle part must print every graphviz table for every relation in the schema.</p>
<pre><code>{
   if (length(currentTableName) &gt; 0 &amp;&amp; $1 != currentTableName) {
       print(&quot;&lt;/TABLE&gt;&gt;]&quot;)
   }
 
   if ($1 != currentTableName) {
        print(&quot;&quot;)
        print(trim($1) &quot; [shape=plaintext; label=&lt;&quot;)
        print(&quot;&lt;TABLE BORDER=\&quot;1\&quot; CELLBORDER=\&quot;0\&quot; CELLSPACING=\&quot;0\&quot; CELLPADDING=\&quot;3\&quot;&gt;&quot;)
        print(&quot;&lt;TR&gt;&quot;)
        print(&quot;&lt;TD COLSPAN=\&quot;5\&quot; BGCOLOR=\&quot;black\&quot;&gt;&lt;FONT color=\&quot;white\&quot;&gt;&lt;B&gt;&quot; trim($1) &quot;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;&quot;)
        print(&quot;&lt;/TR&gt;&quot;)

        print(&quot;&lt;TR&gt;&quot;)
        print(&quot;&lt;TD&gt;column&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;type&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;nullable&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;PK&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;FK&lt;/TD&gt;&quot;)
        print(&quot;&lt;/TR&gt;&quot;)
        port = 0
    }

    print(&quot;&lt;TR&gt;&quot;)
    print(&quot;&lt;TD port=\&quot;f&quot; ++port &quot;\&quot;&gt;&quot;trim($2)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($4)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($6)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($8)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($9)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;/TR&gt;&quot;)

    currentTableName = $1
}</code></pre>
<p>The END part closes the last TABLE and closes the graph.</p>
<pre><code>END {
    print(&quot;&lt;/TABLE&gt;&gt;]&quot;)
    print(&quot;}&quot;)
}</code></pre>
<p>This script will generate graphviz tables for all relations in the database schema.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="1126pt" height="228pt"
 viewBox="0.00 0.00 1126.00 228.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 224)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-224 1122,-224 1122,4 -4,4"/>
<!-- purchase_order -->
<g id="node1" class="node">
<title>purchase_order</title>
<polygon fill="#ffffff" stroke="transparent" stroke-width="2" points="645,-220 0,-220 0,0 645,0 645,-220"/>
<polygon fill="#000000" stroke="transparent" points="9.5,-194 9.5,-215 636.5,-215 636.5,-194 9.5,-194"/>
<text text-anchor="start" x="265" y="-201.8" font-family="Courier New" font-weight="bold" font-size="14.00" fill="#ffffff">purchase_order</text>
<text text-anchor="start" x="74.5" y="-179.8" font-family="Courier New" font-size="14.00" fill="#000000">column</text>
<text text-anchor="start" x="262.5" y="-179.8" font-family="Courier New" font-size="14.00" fill="#000000">type</text>
<text text-anchor="start" x="372.5" y="-179.8" font-family="Courier New" font-size="14.00" fill="#000000">nullable</text>
<text text-anchor="start" x="482.5" y="-179.8" font-family="Courier New" font-size="14.00" fill="#000000">PK</text>
<text text-anchor="start" x="579.5" y="-179.8" font-family="Courier New" font-size="14.00" fill="#000000">FK</text>
<text text-anchor="start" x="91" y="-158.8" font-family="Courier New" font-size="14.00" fill="#000000">id</text>
<text text-anchor="start" x="262.5" y="-158.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="397.5" y="-158.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="445.5" y="-158.8" font-family="Courier New" font-size="14.00" fill="#000000">PRIMARY KEY</text>
<text text-anchor="start" x="54" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">id_customer</text>
<text text-anchor="start" x="262.5" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="397.5" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="542.5" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">FOREIGN KEY</text>
<text text-anchor="start" x="12.5" y="-116.8" font-family="Courier New" font-size="14.00" fill="#000000">purchase_order_number</text>
<text text-anchor="start" x="250.5" y="-116.8" font-family="Courier New" font-size="14.00" fill="#000000">varchar</text>
<text text-anchor="start" x="397.5" y="-116.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="74.5" y="-95.8" font-family="Courier New" font-size="14.00" fill="#000000">status</text>
<text text-anchor="start" x="192.5" y="-95.8" font-family="Courier New" font-size="14.00" fill="#000000">purchase_order_status</text>
<text text-anchor="start" x="397.5" y="-95.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="12.5" y="-74.8" font-family="Courier New" font-size="14.00" fill="#000000">frozen_purchase_order</text>
<text text-anchor="start" x="258.5" y="-74.8" font-family="Courier New" font-size="14.00" fill="#000000">jsonb</text>
<text text-anchor="start" x="393.5" y="-74.8" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="70.5" y="-53.8" font-family="Courier New" font-size="14.00" fill="#000000">changes</text>
<text text-anchor="start" x="258.5" y="-53.8" font-family="Courier New" font-size="14.00" fill="#000000">jsonb</text>
<text text-anchor="start" x="393.5" y="-53.8" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="58" y="-32.8" font-family="Courier New" font-size="14.00" fill="#000000">created_at</text>
<text text-anchor="start" x="242" y="-32.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="397.5" y="-32.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="58" y="-11.8" font-family="Courier New" font-size="14.00" fill="#000000">updated_at</text>
<text text-anchor="start" x="242" y="-11.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="397.5" y="-11.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<polygon fill="none" stroke="#000000" points="8,-4 8,-216 637,-216 637,-4 8,-4"/>
</g>
<!-- purchase_order_item -->
<g id="node2" class="node">
<title>purchase_order_item</title>
<polygon fill="#ffffff" stroke="transparent" stroke-width="2" points="1118,-209.5 663,-209.5 663,-10.5 1118,-10.5 1118,-209.5"/>
<polygon fill="#000000" stroke="transparent" points="672.5,-183 672.5,-204 1109.5,-204 1109.5,-183 672.5,-183"/>
<text text-anchor="start" x="812.5" y="-190.8" font-family="Courier New" font-weight="bold" font-size="14.00" fill="#ffffff">purchase_order_item</text>
<text text-anchor="start" x="692" y="-168.8" font-family="Courier New" font-size="14.00" fill="#000000">column</text>
<text text-anchor="start" x="785" y="-168.8" font-family="Courier New" font-size="14.00" fill="#000000">type</text>
<text text-anchor="start" x="845.5" y="-168.8" font-family="Courier New" font-size="14.00" fill="#000000">nullable</text>
<text text-anchor="start" x="955.5" y="-168.8" font-family="Courier New" font-size="14.00" fill="#000000">PK</text>
<text text-anchor="start" x="1052.5" y="-168.8" font-family="Courier New" font-size="14.00" fill="#000000">FK</text>
<text text-anchor="start" x="708.5" y="-147.8" font-family="Courier New" font-size="14.00" fill="#000000">id</text>
<text text-anchor="start" x="785" y="-147.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="870.5" y="-147.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="918.5" y="-147.8" font-family="Courier New" font-size="14.00" fill="#000000">PRIMARY KEY</text>
<text text-anchor="start" x="675.5" y="-126.8" font-family="Courier New" font-size="14.00" fill="#000000">id_article</text>
<text text-anchor="start" x="785" y="-126.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="870.5" y="-126.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="1015.5" y="-126.8" font-family="Courier New" font-size="14.00" fill="#000000">FOREIGN KEY</text>
<text text-anchor="start" x="683.5" y="-105.8" font-family="Courier New" font-size="14.00" fill="#000000">id_price</text>
<text text-anchor="start" x="785" y="-105.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="870.5" y="-105.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="1015.5" y="-105.8" font-family="Courier New" font-size="14.00" fill="#000000">FOREIGN KEY</text>
<text text-anchor="start" x="692" y="-84.8" font-family="Courier New" font-size="14.00" fill="#000000">amount</text>
<text text-anchor="start" x="785" y="-84.8" font-family="Courier New" font-size="14.00" fill="#000000">int4</text>
<text text-anchor="start" x="870.5" y="-84.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="688" y="-63.8" font-family="Courier New" font-size="14.00" fill="#000000">changes</text>
<text text-anchor="start" x="781" y="-63.8" font-family="Courier New" font-size="14.00" fill="#000000">jsonb</text>
<text text-anchor="start" x="866.5" y="-63.8" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="675.5" y="-42.8" font-family="Courier New" font-size="14.00" fill="#000000">created_at</text>
<text text-anchor="start" x="764.5" y="-42.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="870.5" y="-42.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="675.5" y="-21.8" font-family="Courier New" font-size="14.00" fill="#000000">updated_at</text>
<text text-anchor="start" x="764.5" y="-21.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="870.5" y="-21.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<polygon fill="none" stroke="#000000" points="671,-14.5 671,-205.5 1110,-205.5 1110,-14.5 671,-14.5"/>
</g>
</g>
</svg>
</div>
<p>For the edges, the middle part must be extended with</p>
<pre><code>if (trim($9) == &quot;FOREIGN KEY&quot;) {
    edges[++edgeCounter] = trim($1) &quot; -&gt; &quot; trim($10) &quot;;&quot;
}</code></pre>
<p>This takes the current table name and point it to the target relation.</p>
<p>Some relations use a enum as a datatype. It would be nice, if this could be visible in the ERM.</p>
<pre><code>if (length(trim($5)) &gt; 0) {
    nodes[++nodeCounter] = trim($4) &quot;[shape=\&quot;box\&quot;, style=\&quot;rounded\&quot;, label=&lt;&lt;B&gt;&quot; trim($4) &quot; (enum)&lt;/B&gt;&lt;BR/&gt;&quot; trim($5) &quot;&gt;];&quot;
    edges[++edgeCounter] = trim($1) &quot;:f&quot; port &quot; -&gt; &quot; trim($4) &quot;;&quot;
}</code></pre>
<p>This adds new enum nodes to the graph and points it directly to the column used by the enum.</p>
<p>In the END part, the new nodes and edges must be added.</p>
<pre><code>for (node in nodes) {
    print(nodes[++i])
}
i = 0
for (edge in edges){
    print(edges[++i])
}</code></pre>
<p>Currently the enum values are comma separated. For the graph drawing it is easier, to have short lines.</p>
<p>A <code>sed 's/, /&lt;BR\/&gt;/g'</code> before script start will replace the commas with <code>&lt;BR/&gt;</code>.</p>
<h1 id="final">final</h1>
<p>The complete script glued together</p>
<pre><code>#!/bin/bash

psql -U postgres -c &quot;

SELECT c.table_name, 
	c.column_name, 
	c.data_type, 
	c.udt_name,
	(SELECT string_agg(e.enumlabel::TEXT, &#39;, &#39;)
		FROM pg_type t 
		   JOIN pg_enum e on t.oid = e.enumtypid  
		   JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE t.typname = c.udt_name) enum_values,
	c.is_nullable, 
	c.character_maximum_length,
	(SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
		JOIN information_schema.table_constraints tc 
			ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
		WHERE c.column_name = kcu.column_name 
			AND c.table_name = kcu.table_name 
			AND tc.constraint_type = &#39;PRIMARY KEY&#39; LIMIT 1
	) primary_key,
	(SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
		JOIN information_schema.table_constraints tc 
			ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
		WHERE c.column_name = kcu.column_name 
			AND c.table_name = kcu.table_name 
			AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
	) foreign_key,
	(SELECT ccu.table_name FROM information_schema.key_column_usage kcu
		JOIN information_schema.table_constraints tc 
			ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
		JOIN information_schema.constraint_column_usage ccu
			ON tc.constraint_name = ccu.constraint_name
		WHERE c.column_name = kcu.column_name 
			AND c.table_name = kcu.table_name 
			AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
	) reference_table,
	(SELECT ccu.column_name FROM information_schema.key_column_usage kcu
		JOIN information_schema.table_constraints tc 
			ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
		JOIN information_schema.constraint_column_usage ccu
			ON tc.constraint_name = ccu.constraint_name
		WHERE c.column_name = kcu.column_name 
			AND c.table_name = kcu.table_name 
			AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
	) reference_column
	
FROM information_schema.columns c 
	JOIN information_schema.tables t on c.table_name = t.table_name
WHERE c.table_schema = &#39;test&#39; AND t.table_type = &#39;BASE TABLE&#39;&quot; | sed &#39;s/, /&lt;BR\/&gt;/g&#39; | head -n -2 | tail -n+3 | awk -F&quot;|&quot; &#39;
function ltrim(s) {
    sub(/^[ \t\r\n]+/, &quot;&quot;, s);
    return s
}

function rtrim(s) {
    sub(/[ \t\r\n]+$/, &quot;&quot;, s);
    return s
}

function trim(s) {
    return rtrim(ltrim(s));
}

BEGIN {
    print(&quot;digraph {&quot;)
    print(&quot;graph [overlap=false;splines=true;regular=true];&quot;)
    print(&quot;node [shape=Mrecord; fontname=\&quot;Courier New\&quot; style=\&quot;filled, bold\&quot; fillcolor=\&quot;white\&quot;, fontcolor=\&quot;black\&quot;];&quot;)
}

{
   if (length(currentTableName) &gt; 0 &amp;&amp; $1 != currentTableName) {
       print(&quot;&lt;/TABLE&gt;&gt;]&quot;)
   }
 
   if ($1 != currentTableName) {
        print(&quot;&quot;)
        print(trim($1) &quot; [shape=plaintext; label=&lt;&quot;)
        print(&quot;&lt;TABLE BORDER=\&quot;1\&quot; CELLBORDER=\&quot;0\&quot; CELLSPACING=\&quot;0\&quot; CELLPADDING=\&quot;3\&quot;&gt;&quot;)
        print(&quot;&lt;TR&gt;&quot;)
        print(&quot;&lt;TD COLSPAN=\&quot;5\&quot; BGCOLOR=\&quot;black\&quot;&gt;&lt;FONT color=\&quot;white\&quot;&gt;&lt;B&gt;&quot; trim($1) &quot;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;&quot;)
        print(&quot;&lt;/TR&gt;&quot;)

        print(&quot;&lt;TR&gt;&quot;)
        print(&quot;&lt;TD&gt;column&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;type&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;nullable&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;PK&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;FK&lt;/TD&gt;&quot;)
        print(&quot;&lt;/TR&gt;&quot;)
        port = 0
    }

    print(&quot;&lt;TR&gt;&quot;)
    print(&quot;&lt;TD port=\&quot;f&quot; ++port &quot;\&quot;&gt;&quot;trim($2)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($4)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($6)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($8)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($9)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;/TR&gt;&quot;)

    if (trim($9) == &quot;FOREIGN KEY&quot;) {
        edges[++edgeCounter] = trim($1) &quot; -&gt; &quot; trim($10) &quot;;&quot;
    }

    if (length(trim($5)) &gt; 0) {
        nodes[++nodeCounter] = trim($4) &quot;[shape=\&quot;box\&quot;, style=\&quot;rounded\&quot;, label=&lt;&lt;B&gt;&quot; trim($4) &quot; (enum)&lt;/B&gt;&lt;BR/&gt;&quot; trim($5) &quot;&gt;];&quot;
        edges[++edgeCounter] = trim($1) &quot;:f&quot; port &quot; -&gt; &quot; trim($4) &quot;;&quot;
    }
   
    currentTableName = $1
}

END {
    print(&quot;&lt;/TABLE&gt;&gt;]&quot;)

    for (node in nodes) {
        print(nodes[++i])
    }
    i = 0
    for (edge in edges){
        print(edges[++i])
    }
    print(&quot;}&quot;)
}&#39;</code></pre>
<p>I have put the result in a <a href="/images/schema.svg">external file</a> because the graph has become to big in size. Not so bad, I think.</p>
<p>Update 2017-10-12:</p>
<p>I added a <a href="https://github.com/enter-haken/scripts/blob/master/schema.sh">schema.sh</a> script to my <a href="https://github.com/enter-haken/scripts">script collection</a>.</p>]]></summary>
</entry>
<entry>
    <title>Working with immutable data in Postgres</title>
    <link href="https://enter-haken.github.io/posts/2017-07-15-database-architecture-part2.html" />
    <id>https://enter-haken.github.io/posts/2017-07-15-database-architecture-part2.html</id>
    <published>2017-07-15T00:00:00Z</published>
    <updated>2017-07-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>After taking a <a href="/posts/2017-07-06-database-architecture.html">first look</a> at the JSON columns, let’s look at a few possible applications. Imagine a simple shop system with articles, prices and purchase orders.</p>
<p>An article can be <code>active</code> or <code>inactive</code>.</p>
<pre><code>CREATE TYPE article_status AS ENUM (
    &#39;active&#39;,
    &#39;inactive&#39;
);</code></pre>
<p>Every article has an <code>article_number</code>.</p>
<pre><code>CREATE TABLE article (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    article_number VARCHAR(128) UNIQE NOT NULL DEFAULT &#39;&#39;,
    name VARCHAR(128),
    description VARCHAR(2048),
    status article_status NOT NULL DEFAULT &#39;active&#39;
);</code></pre>
<p>You can see that <code>id</code> and <code>article_number</code> are unique, so both could be used as a primary key. This is not normalized in a usual way.</p>
<p>There are a few points, why to stick to this solution.</p>
<!--more-->
<ul>
<li>A primary key should only be used to identify a record. Not more, not less.</li>
<li>There must be no reuse for a business case, like it would be for <code>article_number</code>. The <code>article_number</code> could not be changed so easily, after being promoted to a primary key.</li>
<li>A <code>article_number</code> identifies an article entity not a database record.</li>
</ul>
<h1 id="prices-with-history">prices with history</h1>
<p>Every <code>article</code> can have a price.</p>
<pre><code>CREATE TABLE price (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_article UUID NOT NULL REFERENCES article(id),
    price real NOT NULL DEFAULT 0.0,
    scale_lower_limit INT NOT NULL DEFAULT 1,
    scale_upper_limit INT NOT NULL DEFAULT 2147483647,
    valid_from DATE NOT NULL DEFAULT current_date,
    valid_to DATE NOT NULL DEFAULT current_date + interval &#39;1 year&#39;
);</code></pre>
<p>An <code>article</code> can have multiple prices over time. There can be multiple price scales. A <code>price</code> will be more likely changed than an <code>article</code>. Price changes may be interesting for reporting issues.</p>
<p>You can store these changes in a JSONB column.</p>
<pre><code>ALTER TABLE price ADD COLUMN history JSONB;</code></pre>
<p>Every time, a price record changes. these changes should be saved. These saved items should be immutable over time.</p>
<pre><code>CREATE FUNCTION history_trigger() RETURNS TRIGGER AS $$.

BEGIN
    IF NEW.history IS NULL THEN
        NEW.history := &#39;[]&#39;::JSONB;
    END IF;

    NEW.history := NEW.history::JSONB || (row_to_json(OLD)::JSONB - &#39;history&#39;);
    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER price_history_trigger BEFORE UPDATE ON price
    FOR EACH ROW EXECUTE PROCEDURE history_trigger();</code></pre>
<p>First of all, an <code>article</code> has to be created.</p>
<pre><code>$ psql -U postgres -c &quot;INSERT INTO test.article (article_number, name, description) \
&gt; VALUES (&#39;AB12345&#39;, &#39;Test article&#39;,&#39;Test desc&#39;)&quot;
INSERT 0 1</code></pre>
<p>For this newly inserted article</p>
<pre><code>$ psql -U postgres -c &quot;SELECT * from test.article&quot; | cat
                  id                  | article_number |     name     | description | status |         created_at         |         updated_at         
--------------------------------------+----------------+--------------+-------------+--------+----------------------------+----------------------------
 f12def37-3de6-4985-8912-054891631499 | AB12345        | Test article | Test desc   | active | 2017-07-15 19:17:14.727931 | 2017-07-15 19:17:14.727931
(1 row)</code></pre>
<p>you can add a <code>price</code>,</p>
<pre><code>$ psql -U postgres -c &quot;INSERT INTO test.price (id_article, price) \
&gt; VALUES (&#39;f12def37-3de6-4985-8912-054891631499&#39;,50.5)&quot;
INSERT 0 1

$ psql -U postgres -c &quot;SELECT * FROM test.price&quot; | cat
                  id                  |              id_article              | price | scale_lower_limit | scale_upper_limit | valid_from |  valid_to  | history |         created_at         |         updated_at         
--------------------------------------+--------------------------------------+-------+-------------------+-------------------+------------+------------+---------+----------------------------+----------------------------
 3a113796-05fd-4ff3-a33f-b08f92c01cd8 | f12def37-3de6-4985-8912-054891631499 |  50.5 |                 1 |        2147483647 | 2017-07-15 | 2018-07-15 |         | 2017-07-15 19:21:39.245331 | 2017-07-15 19:21:39.245331
(1 row)</code></pre>
<p>and raise the price value for the <code>price</code> record.</p>
<pre><code>$ psql -U postgres -c &quot;UPDATE test.price SET price = 70.2 WHERE id = &#39;3a113796-05fd-4ff3-a33f-b08f92c01cd8&#39;&quot;
UPDATE 1

$ psql -U postgres -c &quot;SELECT * FROM test.price&quot; | cat
                  id                  |              id_article              | price | scale_lower_limit | scale_upper_limit | valid_from |  valid_to  |                                                                                                                                                           history                                                                                                                                                            |         created_at         |         updated_at

 3a113796-05fd-4ff3-a33f-b08f92c01cd8 | f12def37-3de6-4985-8912-054891631499 |  70.2 |                 1 |        2147483647 | 2017-07-15 | 2018-07-15 | [{&quot;id&quot;: &quot;3a113796-05fd-4ff3-a33f-b08f92c01cd8&quot;, &quot;price&quot;: 50.5, &quot;valid_to&quot;: &quot;2018-07-15&quot;, &quot;created_at&quot;: &quot;2017-07-15T19:21:39.245331&quot;, &quot;id_article&quot;: &quot;f12def37-3de6-4985-8912-054891631499&quot;, &quot;updated_at&quot;: &quot;2017-07-15T19:21:39.245331&quot;, &quot;valid_from&quot;: &quot;2017-07-15&quot;, &quot;scale_lower_limit&quot;: 1, &quot;scale_upper_limit&quot;: 2147483647}] | 2017-07-15 19:21:39.245331 | 2017-07-15 19:25:04.672829
(1 row)</code></pre>
<p>The <code>history</code> is updated every time, a <code>price</code> record is updated.</p>
<h1 id="customer">customer</h1>
<p>A <code>customer</code> is a kind of <code>person</code> which has a <code>customer_number</code></p>
<pre><code>CREATE TABLE customer (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_person UUID NOT NULL REFERENCES person(id),
    customer_number VARCHAR(128) NOT NULL DEFAULT &#39;&#39;,
    json_view JSONB
);</code></pre>
<p>As you can see, a <code>json_view</code> column is added to the <code>customer</code>. The only difference between a <code>person</code> and a customer is the <code>customer_number</code>.</p>
<p>Analog to the <code>persons</code> <a href="/posts/2017-07-06-database-architecture.html#json-column">update function</a> we can write an update function for a <code>customer</code></p>
<pre><code>CREATE FUNCTION update_json_view_customer(id_customer UUID) RETURNS VOID AS $$
DECLARE
    customer_raw JSONB;
    person_id UUID;
BEGIN

    IF NOT EXISTS (SELECT 1 FROM person p 
        JOIN customer c on p.id = c.id_person 
        WHERE p.json_view IS NOT NULL AND c.id = id_customer) THEN

        SELECT id_person FROM customer WHERE id = id_customer INTO person_id;

        RAISE NOTICE &#39;update json_view for person %&#39;, person_id;

        perform update_json_view_person(person_id);
    END IF;

    SELECT row_to_json(c) FROM 
        (SELECT c.id, customer_number, p.json_view AS person_json_view FROM customer c
            JOIN person p on c.id_person = p.id
            WHERE c.id = id_customer LIMIT 1) c INTO customer_raw;

    customer_raw := customer_raw || jsonb_build_object(&#39;person&#39;, customer_raw-&gt;&#39;person_json_view&#39;);
    customer_raw := customer_raw - &#39;person_json_view&#39;;

    UPDATE customer SET json_view = customer_raw WHERE id = id_customer;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>The <code>json_view</code> of the <code>person</code> is reused.</p>
<p>Let’s take a inserted person.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT id FROM test.person&quot;
                  id
--------------------------------------
 da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2
(1 row)</code></pre>
<p>and insert a new <code>customer</code> for this <code>person</code>.</p>
<pre><code>$ psql -U postgres -c &quot;INSERT INTO test.customer (customer_number, id_person) \
VALUES (&#39;AB12345&#39;, &#39;da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2&#39;);&quot;
INSERT 0 1</code></pre>
<p>The newly inserted <code>customer</code> looks like</p>
<pre><code>$ psql -U postgres -c &quot;SELECT * FROM test.customer&quot; | cat
                  id                  |              id_person               | customer_number | json_view |         created_at         |         updated_at         
--------------------------------------+--------------------------------------+-----------------+-----------+----------------------------+----------------------------
 88a99ea7-4281-496b-9c95-3625101177ca | da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2 | AB12345         |           | 2017-07-15 18:41:27.811324 | 2017-07-15 18:41:27.811324
(1 row)</code></pre>
<p>Now the <code>customer</code>’s <code>json_view</code> must be filled.</p>
<pre><code>$ psql -U postgres -c &quot;SET search_path TO test,public; \
&gt;  SELECT test.update_json_view_customer(&#39;88a99ea7-4281-496b-9c95-3625101177ca&#39;);&quot;
 update_json_view_customer 
---------------------------
  
(1 row)

$ psql -U postgres -c &quot;SELECT * FROM test.customer&quot; | cat
                  id                  |              id_person               | customer_number |json_view|         created_at         |         updated_at         

 88a99ea7-4281-496b-9c95-3625101177ca | da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2 | AB12345         | {&quot;id&quot;: &quot;88a99ea7-4281-496b-9c95-3625101177ca&quot;, &quot;person&quot;: {&quot;id&quot;: &quot;da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;addresses&quot;: [{&quot;id&quot;: &quot;9a78ceb0-5169-4bca-bbf5-aac54fcaa95a&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44339&quot;, &quot;address_type&quot;: &quot;private&quot;, &quot;house_number&quot;: &quot;123&quot;}, {&quot;id&quot;: &quot;c69ec275-0a05-42ce-80ea-1ea1b5bcbd78&quot;, &quot;city&quot;: &quot;Bochum&quot;, &quot;street&quot;: &quot;Fakeroad&quot;, &quot;postal_code&quot;: &quot;44866&quot;, &quot;address_type&quot;: &quot;work&quot;, &quot;house_number&quot;: &quot;321&quot;}], &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;, &quot;phone_numbers&quot;: [{&quot;id&quot;: &quot;0df74379-6512-4f54-a1a7-fee1c1605342&quot;, &quot;phone_number&quot;: &quot;+49231123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;landline&quot;, &quot;is_primary_phone_number&quot;: true}, {&quot;id&quot;: &quot;a9d36784-7af3-47e8-b357-2f03500f7d66&quot;, &quot;phone_number&quot;: &quot;+49151123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;cellular_network&quot;, &quot;is_primary_phone_number&quot;: false}], &quot;email_addresses&quot;: [{&quot;id&quot;: &quot;ff2fee9e-490f-49b2-8e0e-69d5bddd2ca0&quot;, &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;is_primary_email_address&quot;: false}]}, &quot;customer_number&quot;: &quot;AB12345&quot;} | 2017-07-15 18:41:27.811324 | 2017-07-15 18:50:47.591534
(1 row)</code></pre>
<p>a little bit more beautifull</p>
<pre><code>{
    &quot;id&quot;: &quot;88a99ea7-4281-496b-9c95-3625101177ca&quot;,
    &quot;person&quot;: {
        &quot;id&quot;: &quot;da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2&quot;,
        &quot;notes&quot;: null,
        &quot;website&quot;: null,
        &quot;addresses&quot;: [{
            &quot;id&quot;: &quot;9a78ceb0-5169-4bca-bbf5-aac54fcaa95a&quot;,
            &quot;city&quot;: &quot;Dortmund&quot;,
            &quot;street&quot;: &quot;Fakestreet&quot;,
            &quot;postal_code&quot;: &quot;44339&quot;,
            &quot;address_type&quot;: &quot;private&quot;,
            &quot;house_number&quot;: &quot;123&quot;
        }, {
            &quot;id&quot;: &quot;c69ec275-0a05-42ce-80ea-1ea1b5bcbd78&quot;,
            &quot;city&quot;: &quot;Bochum&quot;,
            &quot;street&quot;: &quot;Fakeroad&quot;,
            &quot;postal_code&quot;: &quot;44866&quot;,
            &quot;address_type&quot;: &quot;work&quot;,
            &quot;house_number&quot;: &quot;321&quot;
        }],
        &quot;last_name&quot;: &quot;Hake&quot;,
        &quot;birth_date&quot;: null,
        &quot;first_name&quot;: &quot;Jan Frederik&quot;,
        &quot;phone_numbers&quot;: [{
            &quot;id&quot;: &quot;0df74379-6512-4f54-a1a7-fee1c1605342&quot;,
            &quot;phone_number&quot;: &quot;+49231123456789&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;communication_network&quot;: &quot;landline&quot;,
            &quot;is_primary_phone_number&quot;: true
        }, {
            &quot;id&quot;: &quot;a9d36784-7af3-47e8-b357-2f03500f7d66&quot;,
            &quot;phone_number&quot;: &quot;+49151123456789&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;communication_network&quot;: &quot;cellular_network&quot;,
            &quot;is_primary_phone_number&quot;: false
        }],
        &quot;email_addresses&quot;: [{
            &quot;id&quot;: &quot;ff2fee9e-490f-49b2-8e0e-69d5bddd2ca0&quot;,
            &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;is_primary_email_address&quot;: false
        }]
    },
    &quot;customer_number&quot;: &quot;AB12345&quot;
}</code></pre>
<h1 id="a-purchase-process">a purchase process</h1>
<p>Now we have a <code>customer</code> and <code>articles</code> with <code>prices</code>. The next step is to buy something. But first we take a look at a common workflow, when you buy something in a shop.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="1070pt" height="233pt"
 viewBox="0.00 0.00 1069.89 233.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 229)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-229 1065.8858,-229 1065.8858,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="109.8858,-8 109.8858,-217 394.8858,-217 394.8858,-8 109.8858,-8"/>
<text text-anchor="middle" x="252.3858" y="-201.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">mutable</text>
<text text-anchor="middle" x="252.3858" y="-186.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">data</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="475.8858,-89 475.8858,-181 991.8858,-181 991.8858,-89 475.8858,-89"/>
<text text-anchor="middle" x="733.8858" y="-165.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">immutable</text>
<text text-anchor="middle" x="733.8858" y="-150.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">data</text>
</g>
<!-- po -->
<g id="node1" class="node">
<title>po</title>
<path fill="#ffffff" stroke="#ffffff" d="M182.8858,-130C182.8858,-130 129.8858,-130 129.8858,-130 123.8858,-130 117.8858,-124 117.8858,-118 117.8858,-118 117.8858,-104 117.8858,-104 117.8858,-98 123.8858,-92 129.8858,-92 129.8858,-92 182.8858,-92 182.8858,-92 188.8858,-92 194.8858,-98 194.8858,-104 194.8858,-104 194.8858,-118 194.8858,-118 194.8858,-124 188.8858,-130 182.8858,-130"/>
<text text-anchor="middle" x="156.3858" y="-114.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">purchase</text>
<text text-anchor="middle" x="156.3858" y="-99.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">order</text>
</g>
<!-- rts -->
<g id="node2" class="node">
<title>rts</title>
<path fill="#ffffff" stroke="#ffffff" d="M374.8858,-171C374.8858,-171 329.8858,-171 329.8858,-171 323.8858,-171 317.8858,-165 317.8858,-159 317.8858,-159 317.8858,-145 317.8858,-145 317.8858,-139 323.8858,-133 329.8858,-133 329.8858,-133 374.8858,-133 374.8858,-133 380.8858,-133 386.8858,-139 386.8858,-145 386.8858,-145 386.8858,-159 386.8858,-159 386.8858,-165 380.8858,-171 374.8858,-171"/>
<text text-anchor="middle" x="352.3858" y="-155.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">ready to</text>
<text text-anchor="middle" x="352.3858" y="-140.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">send</text>
</g>
<!-- po&#45;&gt;rts -->
<g id="edge1" class="edge">
<title>po&#45;&gt;rts</title>
<path fill="none" stroke="#000000" d="M195.1205,-126.0655C206.7913,-130.1331 219.7312,-134.1829 231.8858,-137 256.6412,-142.7375 284.7996,-146.3975 307.668,-148.6644"/>
<polygon fill="#000000" stroke="#000000" points="307.4889,-152.1629 317.7716,-149.6104 308.1415,-145.1933 307.4889,-152.1629"/>
</g>
<!-- item -->
<g id="node3" class="node">
<title>item</title>
<path fill="#ffffff" stroke="#ffffff" d="M367.3858,-99C367.3858,-99 337.3858,-99 337.3858,-99 331.3858,-99 325.3858,-93 325.3858,-87 325.3858,-87 325.3858,-75 325.3858,-75 325.3858,-69 331.3858,-63 337.3858,-63 337.3858,-63 367.3858,-63 367.3858,-63 373.3858,-63 379.3858,-69 379.3858,-75 379.3858,-75 379.3858,-87 379.3858,-87 379.3858,-93 373.3858,-99 367.3858,-99"/>
<text text-anchor="middle" x="352.3858" y="-77.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">items</text>
</g>
<!-- po&#45;&gt;item -->
<g id="edge2" class="edge">
<title>po&#45;&gt;item</title>
<path fill="none" stroke="#000000" d="M172.3957,-91.7248C186.3184,-76.587 207.9713,-56.6671 231.8858,-48 259.6101,-37.9522 291.8723,-47.8836 316.0335,-59.4074"/>
<polygon fill="#000000" stroke="#000000" points="314.6936,-62.6517 325.1974,-64.0377 317.8505,-56.404 314.6936,-62.6517"/>
<text text-anchor="middle" x="256.3858" y="-51.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">add</text>
</g>
<!-- po&#45;&gt;item -->
<g id="edge3" class="edge">
<title>po&#45;&gt;item</title>
<path fill="none" stroke="#000000" d="M195.1719,-104.7641C206.9587,-102.8883 219.9492,-100.8401 231.8858,-99 259.7479,-94.7049 291.2594,-90.0033 315.0688,-86.4826"/>
<polygon fill="#000000" stroke="#000000" points="315.7145,-89.9253 325.0961,-85.0023 314.6921,-83.0003 315.7145,-89.9253"/>
<text text-anchor="middle" x="256.3858" y="-102.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">modify</text>
</g>
<!-- po&#45;&gt;item -->
<g id="edge4" class="edge">
<title>po&#45;&gt;item</title>
<path fill="none" stroke="#000000" d="M194.982,-116.6292C219.8035,-119.1019 252.5884,-120.2152 280.8858,-114 292.7629,-111.3914 305.018,-106.6118 315.9547,-101.4847"/>
<polygon fill="#000000" stroke="#000000" points="317.7616,-104.4962 325.1837,-96.9355 314.6667,-98.2175 317.7616,-104.4962"/>
<text text-anchor="middle" x="256.3858" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">remove</text>
</g>
<!-- snd -->
<g id="node4" class="node">
<title>snd</title>
<path fill="#ffffff" stroke="#ffffff" d="M525.8858,-134C525.8858,-134 495.8858,-134 495.8858,-134 489.8858,-134 483.8858,-128 483.8858,-122 483.8858,-122 483.8858,-110 483.8858,-110 483.8858,-104 489.8858,-98 495.8858,-98 495.8858,-98 525.8858,-98 525.8858,-98 531.8858,-98 537.8858,-104 537.8858,-110 537.8858,-110 537.8858,-122 537.8858,-122 537.8858,-128 531.8858,-134 525.8858,-134"/>
<text text-anchor="middle" x="510.8858" y="-112.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">send</text>
</g>
<!-- rts&#45;&gt;snd -->
<g id="edge5" class="edge">
<title>rts&#45;&gt;snd</title>
<path fill="none" stroke="#000000" d="M387.0924,-151.7605C409.9239,-150.7745 440.2175,-147.874 465.8858,-140 468.6634,-139.148 471.4682,-138.1201 474.2476,-136.9754"/>
<polygon fill="#000000" stroke="#000000" points="475.8941,-140.0708 483.5234,-132.7194 472.9749,-133.7086 475.8941,-140.0708"/>
</g>
<!-- item&#45;&gt;snd -->
<g id="edge9" class="edge">
<title>item&#45;&gt;snd</title>
<path fill="none" stroke="#000000" d="M379.834,-75.6625C403.3646,-72.2684 437.8077,-70.1507 465.8858,-80 473.0255,-82.5045 479.8739,-86.6709 485.9801,-91.2987"/>
<polygon fill="#000000" stroke="#000000" points="483.8714,-94.0968 493.8044,-97.7827 488.338,-88.707 483.8714,-94.0968"/>
<text text-anchor="middle" x="435.3858" y="-128.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">frozen</text>
<text text-anchor="middle" x="435.3858" y="-113.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">purchase</text>
<text text-anchor="middle" x="435.3858" y="-98.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">order</text>
<text text-anchor="middle" x="435.3858" y="-83.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">items</text>
</g>
<!-- delivered -->
<g id="node5" class="node">
<title>delivered</title>
<path fill="#ffffff" stroke="#ffffff" d="M676.8858,-134C676.8858,-134 624.8858,-134 624.8858,-134 618.8858,-134 612.8858,-128 612.8858,-122 612.8858,-122 612.8858,-110 612.8858,-110 612.8858,-104 618.8858,-98 624.8858,-98 624.8858,-98 676.8858,-98 676.8858,-98 682.8858,-98 688.8858,-104 688.8858,-110 688.8858,-110 688.8858,-122 688.8858,-122 688.8858,-128 682.8858,-134 676.8858,-134"/>
<text text-anchor="middle" x="650.8858" y="-112.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">delivered</text>
</g>
<!-- snd&#45;&gt;delivered -->
<g id="edge6" class="edge">
<title>snd&#45;&gt;delivered</title>
<path fill="none" stroke="#000000" d="M538.2116,-116C556.4704,-116 580.9932,-116 602.4985,-116"/>
<polygon fill="#000000" stroke="#000000" points="602.7726,-119.5001 612.7726,-116 602.7725,-112.5001 602.7726,-119.5001"/>
</g>
<!-- rfi -->
<g id="node6" class="node">
<title>rfi</title>
<path fill="#ffffff" stroke="#ffffff" d="M825.8858,-135C825.8858,-135 775.8858,-135 775.8858,-135 769.8858,-135 763.8858,-129 763.8858,-123 763.8858,-123 763.8858,-109 763.8858,-109 763.8858,-103 769.8858,-97 775.8858,-97 775.8858,-97 825.8858,-97 825.8858,-97 831.8858,-97 837.8858,-103 837.8858,-109 837.8858,-109 837.8858,-123 837.8858,-123 837.8858,-129 831.8858,-135 825.8858,-135"/>
<text text-anchor="middle" x="800.8858" y="-119.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">ready for</text>
<text text-anchor="middle" x="800.8858" y="-104.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">invoice</text>
</g>
<!-- delivered&#45;&gt;rfi -->
<g id="edge7" class="edge">
<title>delivered&#45;&gt;rfi</title>
<path fill="none" stroke="#000000" d="M689.1253,-116C708.7284,-116 732.7828,-116 753.5475,-116"/>
<polygon fill="#000000" stroke="#000000" points="753.753,-119.5001 763.753,-116 753.753,-112.5001 753.753,-119.5001"/>
</g>
<!-- inv -->
<g id="node7" class="node">
<title>inv</title>
<path fill="#ffffff" stroke="#ffffff" d="M971.8858,-134C971.8858,-134 924.8858,-134 924.8858,-134 918.8858,-134 912.8858,-128 912.8858,-122 912.8858,-122 912.8858,-110 912.8858,-110 912.8858,-104 918.8858,-98 924.8858,-98 924.8858,-98 971.8858,-98 971.8858,-98 977.8858,-98 983.8858,-104 983.8858,-110 983.8858,-110 983.8858,-122 983.8858,-122 983.8858,-128 977.8858,-134 971.8858,-134"/>
<text text-anchor="middle" x="948.3858" y="-112.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">invoiced</text>
</g>
<!-- rfi&#45;&gt;inv -->
<g id="edge8" class="edge">
<title>rfi&#45;&gt;inv</title>
<path fill="none" stroke="#000000" d="M838.1063,-116C857.6726,-116 881.8281,-116 902.5397,-116"/>
<polygon fill="#000000" stroke="#000000" points="902.7038,-119.5001 912.7037,-116 902.7037,-112.5001 902.7038,-119.5001"/>
</g>
<!-- end -->
<g id="node9" class="node">
<title>end</title>
<polygon fill="none" stroke="#000000" points="1061.8858,-136.5 1020.8858,-136.5 1020.8858,-95.5 1061.8858,-95.5 1061.8858,-136.5"/>
<polyline fill="none" stroke="#000000" points="1032.8858,-136.5 1020.8858,-124.5 "/>
<polyline fill="none" stroke="#000000" points="1020.8858,-107.5 1032.8858,-95.5 "/>
<polyline fill="none" stroke="#000000" points="1049.8858,-95.5 1061.8858,-107.5 "/>
<polyline fill="none" stroke="#000000" points="1061.8858,-124.5 1049.8858,-136.5 "/>
<text text-anchor="middle" x="1041.3858" y="-112.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">end</text>
</g>
<!-- inv&#45;&gt;end -->
<g id="edge11" class="edge">
<title>inv&#45;&gt;end</title>
<path fill="none" stroke="#000000" d="M984.0761,-116C992.7921,-116 1002.0445,-116 1010.5142,-116"/>
<polygon fill="#000000" stroke="#000000" points="1010.7245,-119.5001 1020.7245,-116 1010.7244,-112.5001 1010.7245,-119.5001"/>
</g>
<!-- start -->
<g id="node8" class="node">
<title>start</title>
<polygon fill="none" stroke="#000000" points="40.4429,-129 .057,-111 40.4429,-93 80.8288,-111 40.4429,-129"/>
<polyline fill="none" stroke="#000000" points="11.0176,-115.8851 11.0176,-106.1149 "/>
<polyline fill="none" stroke="#000000" points="29.4823,-97.8851 51.4035,-97.8851 "/>
<polyline fill="none" stroke="#000000" points="69.8682,-106.1149 69.8682,-115.8851 "/>
<polyline fill="none" stroke="#000000" points="51.4035,-124.1149 29.4823,-124.1149 "/>
<text text-anchor="middle" x="40.4429" y="-107.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">start</text>
</g>
<!-- start&#45;&gt;po -->
<g id="edge10" class="edge">
<title>start&#45;&gt;po</title>
<path fill="none" stroke="#000000" d="M80.9941,-111C89.5364,-111 98.6351,-111 107.4481,-111"/>
<polygon fill="#000000" stroke="#000000" points="107.6123,-114.5001 117.6123,-111 107.6123,-107.5001 107.6123,-114.5001"/>
</g>
</g>
</svg>
</div>
<p>When you enter a web shop, you can search for articles, and put them into a shopping cart. While you are creating your cart, you can change the amount of an article, or delete previously added ones. When you are satisfied with your selection, you finalize your requisition. After finalization, parts of your cart like the items can not be changed any more.</p>
<p>Article descriptions or names can be changed over time. Prices may vary.</p>
<h2 id="a-purchase-order">a purchase order</h2>
<p>A purchase order can have one of the following states</p>
<pre><code>CREATE TYPE purchase_order_status AS ENUM (
    &#39;requisition&#39;, 
    &#39;ready_to_send&#39;, 
    &#39;send&#39;, 
    &#39;delivered&#39;,
    &#39;ready_for_invoice&#39;,
    &#39;invoiced&#39;,
    &#39;finalized&#39;);</code></pre>
<p>It is assumed, that every purchase order has a relation to a <code>customer</code>. For this example this is enough.</p>
<pre><code>CREATE TABLE purchase_order (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_customer UUID NOT NULL REFERENCES customer(id),
    purchase_order_number VARCHAR(128) NOT NULL UNIQUE DEFAULT &#39;&#39;,
    status purchase_order_status NOT NULL DEFAULT &#39;requisition&#39;
);</code></pre>
<p>Every purchase order has a unique <code>purchase_order_number</code>.</p>
<pre><code>CREATE TABLE purchase_order_item (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_purchase_order UUID NOT NULL REFERENCES purchase_order(id),
    id_article UUID NOT NULL REFERENCES article(id),
    id_price UUID NOT NULL REFERENCES price(id),
    amount int NOT NULL DEFAULT 1
);</code></pre>
<p>A <code>purchase_order_item</code> has a reference to a <code>purchase_order</code>.</p>
<p>Unless we are in a mutable state, There is no need for storing extra data. This changes, when the <code>purchase_order_status</code> changes to <code>send</code>. The <code>purchase_order_items</code> can’t be changed any more. The purchased items are on their way to the <code>customer</code>. The only thing, which can change is the <code>purchase_order_status</code>, but only forward in the chain.</p>
<p>This is the point, where the items should be saved in a immutable way. There are no immutable types in Postgres, but it can be made hard for a process to change such data columns, which should not be updated.</p>
<p>For our example, we must store the article, with it’s price at the time of purchase. We also need the <code>customer</code>, who must have some kind of address, to send the delivery to.</p>
<pre><code>ALTER TABLE purchase_order ADD COLUMN frozen_purchase_order JSONB;</code></pre>
<p>This column should be updated, when the <code>purchase_order_status</code> is set to <code>send</code>. So, we need a trigger function which listens on state changes. The scaffold looks like</p>
<pre><code>CREATE FUNCTION freeze_purchase_order() RETURNS TRIGGER AS $$
BEGIN
    return NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER freeze_purchase_order_trigger BEFORE UPDATE ON purchase_order
    FOR EACH ROW EXECUTE PROCEDURE freeze_purchase_order();</code></pre>
<p>Now we listen to the <code>send</code> state. At this point, the purchase order some data have to be frozen. Everything below this state can be ignored.</p>
<pre><code>IF NEW.status = ANY(&#39;{requisition,ready_to_send}&#39;::purchase_order_status[]) THEN
    RAISE NOTICE &#39;nothing to do&#39;;
    RETURN NEW;
END IF;</code></pre>
<p>To store some JSON objects we define some variables</p>
<pre><code>DECLARE
    frozen_purchase_order JSONB;
    customer JSONB;
    purchase_order_items JSONB;
    rawItem RECORD;</code></pre>
<p>The <code>frozen_purchase_order</code> will be the result JSON. First we get the current <code>customer</code></p>
<pre><code>SELECT json_view FROM customer WHERE id = NEW.id_customer INTO customer;</code></pre>
<p>A purchase order item contains an article and a price. The function to get a json representation for a item can look like</p>
<pre><code>CREATE FUNCTION get_json_from_item(item_id UUID) RETURNS JSONB AS $$
DECLARE
    result JSONB;
    article JSONB;
    price JSONB;
BEGIN
    SELECT row_to_json(item) FROM (SELECT id_article, id_price, amount FROM purchase_order_item WHERE id = item_id) item INTO result; 
    SELECT row_to_json(rawArticle) FROM (SELECT id, article_number, name, description FROM article WHERE id = (result-&gt;&gt;&#39;id_article&#39;)::UUID) rawArticle INTO article;
    SELECT row_to_json(rawPrice) FROM (SELECT id, p.price, scale_lower_limit, scale_upper_limit, valid_from, valid_to FROM price p WHERE id = (result-&gt;&gt;&#39;id_price&#39;)::UUID) rawPrice INTO price;

    result := result 
     || jsonb_build_object(&#39;article&#39;, article)
     || jsonb_build_object(&#39;price&#39;, price);

    result := result - &#39;id_article&#39;;
    result := result - &#39;id_price&#39;;

    RETURN result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>The purchase order trigger function can consume this function as following</p>
<pre><code>purchase_order_items := &#39;[]&#39;::JSONB;

FOR rawItem IN (SELECT get_json_from_item(id)::JSONB AS get_json FROM purchase_order_item WHERE id_purchase_order = NEW.id) 
LOOP
    purchase_order_items := purchase_order_items || rawItem.get_json;    
END LOOP;</code></pre>
<p>The current NEW record must be set as root for our result JSON.</p>
<pre><code>SELECT row_to_json(NEW.*) INTO frozen_purchase_order;</code></pre>
<p>Then the <code>customer</code> and the <code>items</code> have to be merged into the result.</p>
<pre><code>frozen_purchase_order := frozen_purchase_order 
    || jsonb_build_object(&#39;items&#39;, purchase_order_items)
    || jsonb_build_object(&#39;customer&#39;, customer);</code></pre>
<p>At last, some unnecessary fields must be deleted from our frozen purchase order.</p>
<pre><code>frozen_purchase_order := frozen_purchase_order - &#39;frozen_purchase_order&#39;;
frozen_purchase_order := frozen_purchase_order - &#39;id_customer&#39;;</code></pre>
<p>Then we have our result.</p>
<pre><code>NEW.frozen_purchase_order := frozen_purchase_order;</code></pre>
<p>The complete function looks like</p>
<pre><code>CREATE FUNCTION freeze_purchase_order() RETURNS TRIGGER AS $$
DECLARE
    frozen_purchase_order JSONB;
    customer JSONB;
    purchase_order_items JSONB;
    rawItem RECORD;
BEGIN
    IF NEW.status = ANY(&#39;{requisition,ready_to_send}&#39;::purchase_order_status[]) THEN
        RAISE NOTICE &#39;nothing to do&#39;;
        RETURN NEW;
    END IF;
    RAISE NOTICE &#39;freeze&#39;;

    SELECT json_view FROM customer WHERE id = NEW.id_customer INTO customer;

    purchase_order_items := &#39;[]&#39;::JSONB;

    FOR rawItem IN (SELECT get_json_from_item(id)::JSONB AS get_json FROM purchase_order_item WHERE id_purchase_order = NEW.id) 
    LOOP
        purchase_order_items := purchase_order_items || rawItem.get_json;    
    END LOOP;

    SELECT row_to_json(NEW.*) INTO frozen_purchase_order;

    frozen_purchase_order := frozen_purchase_order 
        || jsonb_build_object(&#39;items&#39;, purchase_order_items)
        || jsonb_build_object(&#39;customer&#39;, customer);

    frozen_purchase_order := frozen_purchase_order - &#39;frozen_purchase_order&#39;;
    frozen_purchase_order := frozen_purchase_order - &#39;id_customer&#39;;

    NEW.frozen_purchase_order := frozen_purchase_order;
    
    RETURN NEW;
END
$$ LANGUAGE plpgsql;</code></pre>
<h2 id="add-some-data">add some data</h2>
<pre><code>$ psql -U postgres -c &quot;SELECT id FROM test.customer&quot;
                  id
--------------------------------------
 7a24ed2c-c873-4fdf-91cf-3574410acc49
(1 row)

$ psql -U postgres -c &quot;INSERT INTO test.purchase_order (id_customer, purchase_order_number) \
&gt; VALUES (&#39;7a24ed2c-c873-4fdf-91cf-3574410acc49&#39;, &#39;PO12345&#39;);&quot;
INSERT 0 1

$ psql -U postgres -c &quot;SELECT * FROM test.purchase_order;&quot;
                  id                  |             id_customer              | purchase_order_number |   status    | frozen_purchase_order |        created_at         |        updated_at         
--------------------------------------+--------------------------------------+-----------------------+-------------+-----------------------+---------------------------+---------------------------
 29e2fa06-edfc-49ed-878b-49e8ded9bb89 | 7a24ed2c-c873-4fdf-91cf-3574410acc49 | PO12345               | requisition |                       | 2017-07-16 21:15:41.81893 | 2017-07-16 21:15:41.81893
(1 row)</code></pre>
<p>Now we add our <code>article</code> with our <code>price</code>.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT * FROM test.article&quot;
                  id                  | article_number |     name     | description | status |         created_at         |         updated_at         
--------------------------------------+----------------+--------------+-------------+--------+----------------------------+----------------------------
 0b177d42-368a-4cfa-bf8d-e863f4e8a1bd | AB12345        | Test article | Test desc   | active | 2017-07-16 21:06:03.668307 | 2017-07-16 21:06:03.668307
(1 row)

$ psql -U postgres -c &quot;SELECT * FROM test.price;&quot;
                  id                  |              id_article              | price | scale_lower_limit | scale_upper_limit | valid_from |  valid_to  | history |         created_at         |         updated_at         
--------------------------------------+--------------------------------------+-------+-------------------+-------------------+------------+------------+---------+----------------------------+----------------------------
 ac73b43d-e5ef-46dd-81e9-94291aa669c7 | 0b177d42-368a-4cfa-bf8d-e863f4e8a1bd |  50.5 |                 1 |        2147483647 | 2017-07-16 | 2018-07-16 |         | 2017-07-16 21:06:03.668307 | 2017-07-16 21:06:03.668307
(1 row)

$ psql -U postgres -c &quot;INSERT INTO test.purchase_order_item (id_purchase_order, id_article, id_price) \
&gt; VALUES (&#39;29e2fa06-edfc-49ed-878b-49e8ded9bb89&#39;, &#39;0b177d42-368a-4cfa-bf8d-e863f4e8a1bd&#39;, &#39;ac73b43d-e5ef-46dd-81e9-94291aa669c7&#39;)&quot;
INSERT 0 1</code></pre>
<p>Changing the state to <code>ready_to_send</code> will result</p>
<pre><code>$ psql -U postgres -c &quot;SET search_path TO test,public; UPDATE purchase_order SET status = &#39;ready_to_send&#39; \ 
&gt; WHERE id = &#39;29e2fa06-edfc-49ed-878b-49e8ded9bb89&#39;&quot;
NOTICE:  nothing to do
UPDATE 1</code></pre>
<p>Now we set the state to ‘send’</p>
<pre><code>$ psql -U postgres -c &quot;SET search_path TO test,public; UPDATE purchase_order SET status = &#39;send&#39; \
&gt; WHERE id = &#39;29e2fa06-edfc-49ed-878b-49e8ded9bb89&#39;&quot;
NOTICE:  freeze
UPDATE 1

$ psql -U postgres -c &quot;SELECT * from test.purchase_order&quot; | cat
                  id                  |             id_customer              | purchase_order_number | status |frozen_purchase_order|        created_at         |        updated_at         

 29e2fa06-edfc-49ed-878b-49e8ded9bb89 | 7a24ed2c-c873-4fdf-91cf-3574410acc49 | PO12345               | send   | {&quot;id&quot;: &quot;29e2fa06-edfc-49ed-878b-49e8ded9bb89&quot;, &quot;items&quot;: [{&quot;price&quot;: {&quot;id&quot;: &quot;ac73b43d-e5ef-46dd-81e9-94291aa669c7&quot;, &quot;price&quot;: 50.5, &quot;valid_to&quot;: &quot;2018-07-16&quot;, &quot;valid_from&quot;: &quot;2017-07-16&quot;, &quot;scale_lower_limit&quot;: 1, &quot;scale_upper_limit&quot;: 2147483647}, &quot;amount&quot;: 1, &quot;article&quot;: {&quot;id&quot;: &quot;0b177d42-368a-4cfa-bf8d-e863f4e8a1bd&quot;, &quot;name&quot;: &quot;Test article&quot;, &quot;description&quot;: &quot;Test desc&quot;, &quot;article_number&quot;: &quot;AB12345&quot;}}], &quot;status&quot;: &quot;send&quot;, &quot;changes&quot;: null, &quot;customer&quot;: {&quot;id&quot;: &quot;7a24ed2c-c873-4fdf-91cf-3574410acc49&quot;, &quot;person&quot;: {&quot;id&quot;: &quot;35b40b2f-bf40-4f71-8319-f7757de3e1f4&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;addresses&quot;: [{&quot;id&quot;: &quot;7a7f1e44-f6a6-495e-893b-e5806289ea81&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44339&quot;, &quot;address_type&quot;: &quot;private&quot;, &quot;house_number&quot;: &quot;123&quot;}, {&quot;id&quot;: &quot;1d8c41e5-bcd6-4842-864d-62c4da2fc506&quot;, &quot;city&quot;: &quot;Bochum&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44866&quot;, &quot;address_type&quot;: &quot;work&quot;, &quot;house_number&quot;: &quot;321&quot;}], &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;, &quot;phone_numbers&quot;: [{&quot;id&quot;: &quot;618d19d6-3daf-4029-8d0f-1535272ec212&quot;, &quot;phone_number&quot;: &quot;+49123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;landline&quot;, &quot;is_primary_phone_number&quot;: true}, {&quot;id&quot;: &quot;81403e1d-1055-4953-8b1a-fcca9d034b1b&quot;, &quot;phone_number&quot;: &quot;+49151123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;cellular_network&quot;, &quot;is_primary_phone_number&quot;: false}], &quot;email_addresses&quot;: [{&quot;id&quot;: &quot;a2f79f62-a497-4bdb-8f1b-03d6b7aacb30&quot;, &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;is_primary_email_address&quot;: false}]}, &quot;customer_number&quot;: &quot;AB123456&quot;}, &quot;created_at&quot;: &quot;2017-07-16T21:15:41.81893&quot;, &quot;updated_at&quot;: &quot;2017-07-16T21:25:03.02978&quot;, &quot;purchase_order_number&quot;: &quot;PO12345&quot;} | 2017-07-16 21:15:41.81893 | 2017-07-16 21:26:44.87835
(1 row)</code></pre>
<p>The frozen purchase order looks like</p>
<pre><code>{
    &quot;id&quot;: &quot;29e2fa06-edfc-49ed-878b-49e8ded9bb89&quot;,
    &quot;items&quot;: [{
        &quot;price&quot;: {
            &quot;id&quot;: &quot;ac73b43d-e5ef-46dd-81e9-94291aa669c7&quot;,
            &quot;price&quot;: 50.5,
            &quot;valid_to&quot;: &quot;2018-07-16&quot;,
            &quot;valid_from&quot;: &quot;2017-07-16&quot;,
            &quot;scale_lower_limit&quot;: 1,
            &quot;scale_upper_limit&quot;: 2147483647
        },
        &quot;amount&quot;: 1,
        &quot;article&quot;: {
            &quot;id&quot;: &quot;0b177d42-368a-4cfa-bf8d-e863f4e8a1bd&quot;,
            &quot;name&quot;: &quot;Test article&quot;,
            &quot;description&quot;: &quot;Test desc&quot;,
            &quot;article_number&quot;: &quot;AB12345&quot;
        }
    }],
    &quot;status&quot;: &quot;send&quot;,
    &quot;changes&quot;: null,
    &quot;customer&quot;: {
        &quot;id&quot;: &quot;7a24ed2c-c873-4fdf-91cf-3574410acc49&quot;,
        &quot;person&quot;: {
            &quot;id&quot;: &quot;35b40b2f-bf40-4f71-8319-f7757de3e1f4&quot;,
            &quot;notes&quot;: null,
            &quot;website&quot;: null,
            &quot;addresses&quot;: [{
                &quot;id&quot;: &quot;7a7f1e44-f6a6-495e-893b-e5806289ea81&quot;,
                &quot;city&quot;: &quot;Dortmund&quot;,
                &quot;street&quot;: &quot;Fakestreet&quot;,
                &quot;postal_code&quot;: &quot;44339&quot;,
                &quot;address_type&quot;: &quot;private&quot;,
                &quot;house_number&quot;: &quot;123&quot;
            }, {
                &quot;id&quot;: &quot;1d8c41e5-bcd6-4842-864d-62c4da2fc506&quot;,
                &quot;city&quot;: &quot;Bochum&quot;,
                &quot;street&quot;: &quot;Fakestreet&quot;,
                &quot;postal_code&quot;: &quot;44866&quot;,
                &quot;address_type&quot;: &quot;work&quot;,
                &quot;house_number&quot;: &quot;321&quot;
            }],
            &quot;last_name&quot;: &quot;Hake&quot;,
            &quot;birth_date&quot;: null,
            &quot;first_name&quot;: &quot;Jan Frederik&quot;,
            &quot;phone_numbers&quot;: [{
                &quot;id&quot;: &quot;618d19d6-3daf-4029-8d0f-1535272ec212&quot;,
                &quot;phone_number&quot;: &quot;+49123456789&quot;,
                &quot;communication_type&quot;: &quot;private&quot;,
                &quot;communication_network&quot;: &quot;landline&quot;,
                &quot;is_primary_phone_number&quot;: true
            }, {
                &quot;id&quot;: &quot;81403e1d-1055-4953-8b1a-fcca9d034b1b&quot;,
                &quot;phone_number&quot;: &quot;+49151123456789&quot;,
                &quot;communication_type&quot;: &quot;private&quot;,
                &quot;communication_network&quot;: &quot;cellular_network&quot;,
                &quot;is_primary_phone_number&quot;: false
            }],
            &quot;email_addresses&quot;: [{
                &quot;id&quot;: &quot;a2f79f62-a497-4bdb-8f1b-03d6b7aacb30&quot;,
                &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;,
                &quot;communication_type&quot;: &quot;private&quot;,
                &quot;is_primary_email_address&quot;: false
            }]
        },
        &quot;customer_number&quot;: &quot;AB123456&quot;
    },
    &quot;created_at&quot;: &quot;2017-07-16T21:15:41.81893&quot;,
    &quot;updated_at&quot;: &quot;2017-07-16T21:25:03.02978&quot;,
    &quot;purchase_order_number&quot;: &quot;PO12345&quot;
}</code></pre>
<p>This approach looks promising. In the <a href="2017-08-07-database-architecture-part3.html">next part</a>, we look into updating those structures.</p>]]></summary>
</entry>
<entry>
    <title>Automatically update MIT licenses</title>
    <link href="https://enter-haken.github.io/posts/2017-07-07-update-mit-license.html" />
    <id>https://enter-haken.github.io/posts/2017-07-07-update-mit-license.html</id>
    <published>2017-07-07T00:00:00Z</published>
    <updated>2017-07-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>When you are using the MIT license for your own project, you can add copyright notices to the license. The license starts with</p>
<pre><code>The MIT License (MIT)
Copyright (c) 2016 Jan Frederik Hake

Permission is hereby granted, free of charge, ...</code></pre>
<p>For every year, you make changes to the source, you have to add the year to the copyright notice. Especially for projects, which are rarely updated, the license is often forgotten.</p>
<p>With some git and awk magic, this task can be automated. <!--more--></p>
<h1 id="git-log">git log</h1>
<p>I take my blog sources as an example. The source for my changes is my git log.</p>
<p>If I like to see only the commit date and the name of the committer you can start with</p>
<pre><code>$ git log --pretty=format:&quot;%ad|%an&quot; | head -n5
Wed Jun 28 19:00:52 2017 +0200|Jan Frederik Hake
Sat May 6 10:38:58 2017 +0200|Jan Frederik Hake
Sat May 6 10:29:15 2017 +0200|Jan Frederik Hake
Sat May 6 07:53:10 2017 +0200|Jan Frederik Hake
Thu May 4 11:57:25 2017 +0200|Jan Frederik Hake</code></pre>
<p>I choose the pipe character as a separator for further processing. The date can be formatted with the <code>--date</code> parameter.</p>
<pre><code>$ git log --pretty=format:&quot;%ad|%an&quot; --date=format:%Y | head -n 5
2017|Jan Frederik Hake
2017|Jan Frederik Hake
2017|Jan Frederik Hake
2017|Jan Frederik Hake
2017|Jan Frederik Hake</code></pre>
<p>In the next step I do some <code>uniq</code> and <code>sort</code> on the result. For the next process step, I switch the year and the name.</p>
<pre><code>$ git log --pretty=format:&quot;%an|%ad&quot;                  \
&gt;            --date=format:%Y | sort | uniq |        \
&gt;    awk &#39;BEGIN {FS=&quot;|&quot;}                             \
&gt;    {                                               \
&gt;      if ($1==currentName) {                        \
&gt;              year=year &quot;,&quot; $2;                     \
&gt;      }                                             \
&gt;      else {                                        \
&gt;          if (currentName) {                        \
&gt;              print &quot;(c) &quot; year &quot; &quot; currentName;    \
&gt;          };                                        \
&gt;          currentName=$1;                           \
&gt;          year=$2;                                  \
&gt;      }                                             \
&gt;    }                                               \
&gt;    END {                                           \
&gt;        if (currentName) {                          \
&gt;            print &quot;(c) &quot; year &quot; &quot; currentName;      \
&gt;        }                                           \
&gt;    }&#39; 
(c) 2016,2017 Jan Frederik Hake </code></pre>
<p>With a simple bash script you can update your LICENSE file of your project, if needed.</p>
<pre><code>#!/bin/sh
if [ ! -f LICENSE ]; then
    break; 
fi

copyright=$(git log --pretty=format:&quot;%an|%ad&quot;       \
            --date=format:%Y | sort | uniq |        \
    awk &#39;BEGIN {FS=&quot;|&quot;}                             \
    {                                               \
      if ($1==currentName) {                        \
              year=year &quot;,&quot; $2;                     \
      }                                             \
      else {                                        \
          if (currentName) {                        \
              print &quot;(c) &quot; year &quot; &quot; currentName;    \
          };                                        \
          currentName=$1;                           \
          year=$2;                                  \
      }                                             \
    }                                               \
    END {                                           \
        if (currentName) {                          \
            print &quot;(c) &quot; year &quot; &quot; currentName;      \
        }                                           \
    }&#39;)

license=$(cat LICENSE | sed -e &quot;s/(c).*$/$copyright/g&quot;)
echo &quot;$license&quot; &gt; LICENSE</code></pre>
<p>If you add the script to the project Makefile, there is no need for manually updating the LICENSE file any more.</p>]]></summary>
</entry>
<entry>
    <title>Moving ORM Mapping towards the database</title>
    <link href="https://enter-haken.github.io/posts/2017-07-06-database-architecture.html" />
    <id>https://enter-haken.github.io/posts/2017-07-06-database-architecture.html</id>
    <published>2017-07-06T00:00:00Z</published>
    <updated>2017-07-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Storing data in a <a href="https://en.wikipedia.org/wiki/Relational_database">relational database</a> has it’s roots in the late sixties of the past century. The core idea has survived the last decades. About 2009 the term <a href="https://en.wikipedia.org/wiki/NoSQL">NoSQL</a> appeared.</p>
<p>As for now <a href="https://www.postgresql.org/">PostgreSQL</a> is the most advanced relational database in the world. With version 9 you can store non atomic data in a JSON column. Document based NoSQL databases like <a href="https://www.mongodb.com/">MongoDb</a> are storing there data in so called <a href="https://docs.mongodb.com/v3.2/core/databases-and-collections/">collections</a>. These collections are similar to <a href="https://www.postgresql.org/docs/9.6/static/datatype-json.html">PostgreSQL JSON columns</a>.</p>
<p>With PostgreSQL you are able to use the best of both worlds.</p>
<!--more-->
<h1 id="some-tables">Some tables</h1>
<p>Before entering the JSON world, let’s look at a simple example. I use the <a href="https://www.postgresql.org/docs/current/static/pgcrypto.html">pgcrypto extension</a> for generating id columns for the tables.</p>
<pre><code>CREATE EXTENSION IF NOT EXISTS pgcrypto;</code></pre>
<p>For fast prototyping, you can use an own schema for the example.</p>
<pre><code>DROP SCHEMA IF EXISTS test CASCADE;
CREATE SCHEMA test;

SET search_path TO test,public;</code></pre>
<p>If you like to store personal data you start with a <code>person</code></p>
<pre><code>CREATE TABLE person (
    id BUD NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    first_name VARCHAR(512),
    last_name VARCHAR(512),
    birth_date DATE,
    notes VARCHAR(4096),
    website VARCHAR(256)
);</code></pre>
<p>With an <code>address</code> table,</p>
<pre><code>CREATE TABLE address (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    street VARCHAR(512), 
    house_number VARCHAR(128),
    postal_code VARCHAR(10),
    city VARCHAR(512)
);</code></pre>
<p>you can store several addresses for a person.</p>
<pre><code>CREATE TYPE address_type AS ENUM (
    &#39;private&#39;,
    &#39;delivery&#39;,
    &#39;invoice&#39;,
    &#39;work&#39;
);

CREATE TABLE person_to_address(
    id_person UUID NOT NULL REFERENCES person (id),
    id_address UUID NOT NULL REFERENCES address(id),
    is_primary_address boolean NOT NULL DEFAULT false,
    address_type address_type NOT NULL DEFAULT &#39;private&#39;,
    PRIMARY KEY (id_person, id_address)
);</code></pre>
<p>A simple table for storing emails can look like</p>
<pre><code>CREATE TABLE email (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    eMail_address VARCHAR(256)
);

CREATE TYPE communication_type AS ENUM (
    &#39;work&#39;,
    &#39;private&#39;,
    &#39;organization&#39;
);

CREATE TABLE person_to_email (
    id_person UUID NOT NULL REFERENCES person (id),
    id_email UUID NOT NULL REFERENCES email (id),
    communication_type communication_type NOT NULL DEFAULT &#39;private&#39;,
    is_primary_email_address BOOLEAN NOT NULL DEFAULT false,
    PRIMARY KEY (id_person, id_email)
);</code></pre>
<p>Similar to an email you can store <code>phone data</code> like</p>
<pre><code>CREATE TYPE communication_network AS ENUM (
    &#39;landline&#39;,
    &#39;cellular_network&#39;
);

CREATE TABLE phone (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    phone_number VARCHAR(128) NOT NULL,
    communication_network communication_network NOT NULL DEFAULT &#39;landline&#39;
);

CREATE TABLE person_to_phone (
    id_person UUID NOT NULL REFERENCES person (id),
    id_phone UUID NOT NULL REFERENCES phone (id),
    communication_type communication_type NOT NULL DEFAULT &#39;private&#39;,
    is_primary_phone_number BOOLEAN NOT NULL DEFAULT false,
    PRIMARY KEY (id_person, id_phone)
);</code></pre>
<p>If you like to need meta data for every table, like <code>last update date</code> or <code>create date</code>, you can do this with a simple trigger function.</p>
<pre><code>CREATE FUNCTION metadata_trigger() RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at := now();
    RETURN NEW;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>In the next step, you add to every table a <code>created_at</code> and a <code>updated_at</code> column. After this the <code>metadata_trigger</code> trigger function has to be added.</p>
<pre><code>CREATE FUNCTION add_metadata_to_every_table() RETURNS VOID AS $$
DECLARE 
    row record;
BEGIN
    FOR row IN SELECT tablename FROM pg_tables WHERE schemaname = &#39;test&#39; LOOP
        EXECUTE &#39;ALTER TABLE &#39; || row.tablename || 
            &#39; ADD COLUMN created_at timestamp NOT NULL DEFAULT NOW();&#39;;

        EXECUTE &#39;ALTER TABLE &#39; || row.tablename || 
            &#39; ADD COLUMN updated_at timestamp NOT NULL DEFAULT NOW();&#39;;

        EXECUTE &#39;CREATE TRIGGER &#39; || row.tablename || &#39;_trigger BEFORE UPDATE ON &#39; || row.tablename || 
            &#39; FOR EACH ROW EXECUTE PROCEDURE metadata_trigger();&#39;;
    END LOOP;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>No stunts so far.</p>
<p>Prior to the NoSQL movement, you would probably create a view for a <code>person</code>.</p>
<pre><code>CREATE VIEW person_view AS
    SELECT first_name, 
            last_name, 
            street, 
            house_number, 
            postal_code,
            city,
            email_address,
            phone_number
        FROM PERSON p
        JOIN person_to_address p2a ON p.id = p2a.id_person
        JOIN address a on p2a.id_address = a.id
        JOIN person_to_email p2e on p2e.id_person = p.id
        JOIN email e on e.id = p2e.id_email 
        JOIN person_to_phone p2p on p2p.id_person = p.id
        JOIN phone ph on ph.id = p2p.id_phone;</code></pre>
<p>You get a tabular result with many redundant data here. The next layer will take this raw data and transform it into objects.</p>
<pre><code>$ psql -U postgres -c &quot;select * from test.person_view&quot;
  first_name  | last_name |   street   | house_number | postal_code |   city   | address_type |  email_address   |  phone_number  
--------------+-----------+------------+---------------+-------------+----------+--------------+------------------+----------------
 Jan Frederik | Hake      | No Street  | 3-4           | 54321       | Dortmund | work         | jan_hake@fake.de | +4923111223344
 Jan Frederik | Hake      | Fakestreet | 123           | 12345       | Dortmund | private      | jan_hake@fake.de | +4923111223344
 Jan Frederik | Hake      | No Street  | 3-4           | 54321       | Dortmund | work         | jan_hake@fake.de | +4915199887766
 Jan Frederik | Hake      | Fakestreet | 123           | 12345       | Dortmund | private      | jan_hake@fake.de | +4915199887766
(4 rows)</code></pre>
<p>It would be nice, if the database it self could provide these objects. At this point, the JSON columns come into the game.</p>
<h1 id="json-column">JSON column</h1>
<p>In this example the <code>person</code> table is our root relation. We add the json column in this table.</p>
<pre><code>ALTER TABLE person ADD COLUMN json_view JSONB;</code></pre>
<p>In the first step we create a function, that fills this column.</p>
<pre><code>CREATE FUNCTION update_json_view_person(person_id UUID) RETURNS VOID AS $$
DECLARE
    person_raw JSONB;
BEGIN
    SELECT row_to_json(p) FROM 
        (SELECT id, first_name, last_name, 
         birth_date, notes, website FROM person 
            WHERE id = person_id) p INTO person_raw;
    
UPDATE person SET json_view = person_raw WHERE id = person_id;    
END
$$ LANGUAGE plpgsql;</code></pre>
<p>A sample output for <code>json_view</code> can look like</p>
<pre><code>$ psql -U postgres -c &quot;select json_view from test.person&quot;
                                                                       json_view                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 {&quot;id&quot;: &quot;e881de40-596d-47f1-801c-77bf32829bfa&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;}
(1 row)</code></pre>
<p>There are many <a href="https://www.postgresql.org/docs/9.3/static/functions-json.html">json functions</a> available for Postgres. The <code>row_to_json</code> function will create a json object for every result row. In this case it is just one row.</p>
<p>When you want to add the address data you can use the <code>array_agg</code> <a href="https://www.postgresql.org/docs/current/static/functions-aggregate.html">aggregate function</a> to create an array from a result,</p>
<pre><code>SELECT array_to_json(array_agg(addresses)) FROM 
    (SELECT a.id, street, house_number, postal_code, city, p2a.address_type FROM address a
    JOIN person_to_address p2a ON a.id = p2a.id_address WHERE p2a.id_person = person_id) addresses 
    INTO person_addresses;</code></pre>
<p>where <code>person_to_addresses</code> is a local <code>JSONB</code> variable. The <code>array_to_json</code> function creates a json array, which can be added to the <code>person_raw</code> with <code>json_build_object</code>.</p>
<pre><code>person_raw := person_raw 
    || jsonb_build_object(&#39;addresses&#39;, person_addresses); </code></pre>
<p>You can do this similar for <code>email</code> and <code>phone</code>.</p>
<p>The complete function looks like</p>
<pre><code>CREATE FUNCTION update_json_view_person(person_id UUID) RETURNS VOID AS $$
DECLARE
    person_raw JSONB;
    person_addresses JSONB;
    person_email_addresses JSONB;
    person_phone_numbers JSONB;
BEGIN
    SELECT row_to_json(p) FROM 
        (SELECT id, first_name, last_name, birth_date, notes, website FROM person 
            WHERE id = person_id LIMIT 1) p INTO person_raw;
    
    SELECT array_to_json(array_agg(addresses)) FROM 
        (SELECT a.id, street, house_number, postal_code, city, p2a.address_type FROM address a
        JOIN person_to_address p2a ON a.id = p2a.id_address WHERE p2a.id_person = person_id) addresses 
        INTO person_addresses;
    
    SELECT array_to_json(array_agg(email_addresses)) FROM
        (SELECT e.id, email_address, is_primary_email_address, communication_type FROM email e
            JOIN person_to_email p2e on e.id = p2e.id_email
            WHERE p2e.id_person = person_id) email_addresses INTO person_email_addresses;
 
    SELECT array_to_json(array_agg(phone_numbers)) FROM
        (SELECT p.id, phone_number, communication_type, communication_network, is_primary_phone_number FROM phone p 
            JOIN person_to_phone p2p on p.id = p2p.id_phone
            WHERE p2p.id_person = person_id) phone_numbers INTO person_phone_numbers;
    
    person_raw := person_raw 
        || jsonb_build_object(&#39;addresses&#39;, person_addresses) 
        || jsonb_build_object(&#39;email_addresses&#39;, person_email_addresses)
        || jsonb_build_object(&#39;phone_numbers&#39;, person_phone_numbers);

    UPDATE person SET json_view = person_raw WHERE id = person_id;    
END
$$ LANGUAGE plpgsql;</code></pre>
<p>Now the person looks more or less complete</p>
<pre><code>$ psql -U postgres -c &quot;select json_view from test.person&quot; | cat
json_view

 {&quot;id&quot;: &quot;5824be75-b444-4ac7-8d59-0763e6a6a9b3&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;addresses&quot;: [{&quot;id&quot;: &quot;41a93a1b-fd31-4f05-8a63-8921a926223c&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;12345&quot;, &quot;address_type&quot;: &quot;private&quot;, &quot;house_number&quot;: &quot;123&quot;}, {&quot;id&quot;: &quot;4a2558c9-13b5-49a8-89b8-52022575040b&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;No Street&quot;, &quot;postal_code&quot;: &quot;54321&quot;, &quot;address_type&quot;: &quot;work&quot;, &quot;house_number&quot;: &quot;3-4&quot;}], &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;, &quot;phone_numbers&quot;: [{&quot;id&quot;: &quot;86941ea5-fe53-4251-bdfc-abafca40b4ab&quot;, &quot;phone_number&quot;: &quot;+4923111223344&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;landline&quot;, &quot;is_primary_phone_number&quot;: true}, {&quot;id&quot;: &quot;96b8ebd3-f514-4fd7-997c-136e4a6eb270&quot;, &quot;phone_number&quot;: &quot;+4915199887766&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;cellular_network&quot;, &quot;is_primary_phone_number&quot;: false}], &quot;email_addresses&quot;: [{&quot;id&quot;: &quot;9fc2ea91-cf68-4624-a903-381d765be25c&quot;, &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;is_primary_email_address&quot;: false}]}
(1 row)</code></pre>
<p>With a little bit formatting you get.</p>
<pre><code>{
    &quot;id&quot;: &quot;5824be75-b444-4ac7-8d59-0763e6a6a9b3&quot;,
    &quot;notes&quot;: null,
    &quot;website&quot;: null,
    &quot;addresses&quot;: [{
        &quot;id&quot;: &quot;41a93a1b-fd31-4f05-8a63-8921a926223c&quot;,
        &quot;city&quot;: &quot;Dortmund&quot;,
        &quot;street&quot;: &quot;Fakestreet&quot;,
        &quot;postal_code&quot;: &quot;12345&quot;,
        &quot;address_type&quot;: &quot;private&quot;,
        &quot;house_number&quot;: &quot;123&quot;
    }, {
        &quot;id&quot;: &quot;4a2558c9-13b5-49a8-89b8-52022575040b&quot;,
        &quot;city&quot;: &quot;Dortmund&quot;,
        &quot;street&quot;: &quot;No Street&quot;,
        &quot;postal_code&quot;: &quot;54321&quot;,
        &quot;address_type&quot;: &quot;work&quot;,
        &quot;house_number&quot;: &quot;3-4&quot;
    }],
    &quot;last_name&quot;: &quot;Hake&quot;,
    &quot;birth_date&quot;: null,
    &quot;first_name&quot;: &quot;Jan Frederik&quot;,
    &quot;phone_numbers&quot;: [{
        &quot;id&quot;: &quot;86941ea5-fe53-4251-bdfc-abafca40b4ab&quot;,
        &quot;phone_number&quot;: &quot;+4923111223344&quot;,
        &quot;communication_type&quot;: &quot;private&quot;,
        &quot;communication_network&quot;: &quot;landline&quot;,
        &quot;is_primary_phone_number&quot;: true
    }, {
        &quot;id&quot;: &quot;96b8ebd3-f514-4fd7-997c-136e4a6eb270&quot;,
        &quot;phone_number&quot;: &quot;+4915199887766&quot;,
        &quot;communication_type&quot;: &quot;private&quot;,
        &quot;communication_network&quot;: &quot;cellular_network&quot;,
        &quot;is_primary_phone_number&quot;: false
    }],
    &quot;email_addresses&quot;: [{
        &quot;id&quot;: &quot;9fc2ea91-cf68-4624-a903-381d765be25c&quot;,
        &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;,
        &quot;communication_type&quot;: &quot;private&quot;,
        &quot;is_primary_email_address&quot;: false
    }]
}</code></pre>
<p>Every time the <code>update_json_view_person</code> function is called, the <code>json_view</code> column is updated with the current relational data.</p>
<p>In the <a href="2017-07-15-database-architecture-part2.html">next part</a>, I take a look at some other use cases.</p>]]></summary>
</entry>

</feed>
