<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>about code</title>
    <link href="https://enter-haken.github.io/atom.xml" rel="self" />
    <link href="https://enter-haken.github.io" />
    <id>https://enter-haken.github.io/atom.xml</id>
    <author>
        <name>Jan Frederik Hake</name>
        <email>jan_hake@gmx.de</email>
    </author>
    <updated>2018-08-07T00:00:00Z</updated>
    <entry>
    <title>time for money, money for time</title>
    <link href="https://enter-haken.github.io/posts/2018-08-07-time.html" />
    <id>https://enter-haken.github.io/posts/2018-08-07-time.html</id>
    <published>2018-08-07T00:00:00Z</published>
    <updated>2018-08-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I have two kids, 16 and 20 years old. My third child will see the light of the world in December this year. My oldest boy currently took a year of, went to Japan and currently lives in Australia. He ask me, what to do after graduate school. I told him, to find a job, which is currently complicated for robots to take off. My youngest girl still has three years in school, but she is also thinking about the time after graduation.</p>
<p>As they think about their future, I think about what kind of world I will leave for them.</p>
<p>Every being has a limited amount of time on this planet. <code>Time</code> is the only true <code>currency</code>, we have in our lives. As we think of <code>currency</code> we often hear the sentence.</p>
<pre><code>Time is money.</code></pre>
<p>I think the opposite is also true.</p>
<pre><code>Money is time.</code></pre>
<p>Let’s take a few thoughts.</p>
<!--more-->
<p>In the first days of humanity, a human bridges long distances by foot. Formerly we used horse-drawn carriages, later on cars, trains and planes. We became comfortable over the time.</p>
<p>I sold my car in 2002. Since then, I used public transport and my bicycle. In 2016, I bought a navigation device, which recorded my kilometers over time. I cycled about 6800 kilometers since recording.</p>
<p>In my thoughts, being physical active, means more <code>time</code> on this planet for me. A human body should be in motion as much as possible, so that the body is healthy till the old age. Of course, a motorist can also get old, but the quality of live is greater in a healthy body.</p>
<p>So what I did in fact is to spend <code>money</code> on a bicycle and get <code>time</code> in the end.</p>
<p>Until the <a href="https://en.wikipedia.org/wiki/Life_in_Great_Britain_during_the_Industrial_Revolution">beginning of the 20th century</a>, work is still hard. The mortality rate has decreased but is still at a high rate. Labour unions have helped to shape working life as we know it today. But how does the working live looks like in a few decades?</p>
<p>In the industrialized world, many workers have a 40 hours week with a weekend off. They change <code>time</code> for <code>money</code>. They use this <code>money</code> for their daily live. They pay their rent, buy their food, pay for child care or going on vacation. At the end of the day there is some <code>money</code> left, to save for bad times. After a hard working live you get your well-erned pension.</p>
<p>This is how it works today, but the world is in motion.</p>
<p>The automation rate grows at an exponential growth. There is less work for the whole population. Less workers means less people who funds the current pensions. So, who buys all the stuff, which the companies are producing? If the automation rate grows at the current rate, this will become a social problem. The richer are becoming richer, and the poorer are becoming poorer. The middle class is shrinking and it is a matter of time, until the system will collapse.</p>
<p>Today I pay into the pension fund. My father and other pensioners get paid from it. I doubt, that this will work for me, when I come into the pensioners age, although my children and other people children will pay into it. How can I tell my children, they will have a good live, when I doubt so? How can I change my <code>money</code> back into <code>time</code>? What needs to be changed so that my children have a future again?</p>
<p>Becoming rich isn’t a solution, because the system will collapse at some time. Working all day long will let your body collapse at some point.</p>
<p>What is a fair exchange for <code>money</code> and <code>time</code>? What is fair for descendants?</p>
<p>I think it’s a global problem, so there has to be a global solution. As it is often so, there exists more than one solution.</p>
<p>What will be yours?</p>]]></summary>
</entry>
<entry>
    <title>first steps with rasmus</title>
    <link href="https://enter-haken.github.io/posts/2018-07-31-rasmus-part3.html" />
    <id>https://enter-haken.github.io/posts/2018-07-31-rasmus-part3.html</id>
    <published>2018-07-31T00:00:00Z</published>
    <updated>2018-07-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Having the first parts of <code>rasmus</code> <a href="/posts/2018-07-23-rasmus-part2.html">in motion</a>, I started my first tests. There is no user management yet and the frontend is somehow static. So the first inserts will be made via <code>curl</code>.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="355pt" height="638pt"
 viewBox="0.00 0.00 355.00 638.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 634)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-634 351,-634 351,4 -4,4"/>
<!-- curl -->
<g id="node1" class="node">
<title>curl</title>
<path fill="#ffffff" stroke="#ffffff" d="M271.5,-630C271.5,-630 216.5,-630 216.5,-630 210.5,-630 204.5,-624 204.5,-618 204.5,-618 204.5,-606 204.5,-606 204.5,-600 210.5,-594 216.5,-594 216.5,-594 271.5,-594 271.5,-594 277.5,-594 283.5,-600 283.5,-606 283.5,-606 283.5,-618 283.5,-618 283.5,-624 277.5,-630 271.5,-630"/>
<text text-anchor="start" x="229" y="-615.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="233" y="-615.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">curl</text>
<text text-anchor="start" x="212.5" y="-601.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">web client </text>
</g>
<!-- router -->
<g id="node2" class="node">
<title>router</title>
<path fill="#ffffff" stroke="#ffffff" d="M273.5,-547C273.5,-547 214.5,-547 214.5,-547 208.5,-547 202.5,-541 202.5,-535 202.5,-535 202.5,-509 202.5,-509 202.5,-503 208.5,-497 214.5,-497 214.5,-497 273.5,-497 273.5,-497 279.5,-497 285.5,-503 285.5,-509 285.5,-509 285.5,-535 285.5,-535 285.5,-541 279.5,-547 273.5,-547"/>
<text text-anchor="start" x="222" y="-532.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="226" y="-532.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">router</text>
<text text-anchor="start" x="215" y="-518.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">managing</text>
<text text-anchor="start" x="210.5" y="-504.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">http routes </text>
</g>
<!-- curl&#45;&gt;router -->
<g id="edge1" class="edge">
<title>curl&#45;&gt;router</title>
<path fill="none" stroke="#000000" d="M244,-593.7872C244,-583.2736 244,-569.693 244,-557.1779"/>
<polygon fill="#000000" stroke="#000000" points="247.5001,-557.0065 244,-547.0065 240.5001,-557.0065 247.5001,-557.0065"/>
<text text-anchor="start" x="244" y="-569" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> </text>
<text text-anchor="start" x="247" y="-569" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="10.00" fill="#000000">POST</text>
<text text-anchor="start" x="273" y="-569" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> request </text>
</g>
<!-- inbound -->
<g id="node3" class="node">
<title>inbound</title>
<path fill="#ffffff" stroke="#ffffff" d="M249,-450C249,-450 143,-450 143,-450 137,-450 131,-444 131,-438 131,-438 131,-412 131,-412 131,-406 137,-400 143,-400 143,-400 249,-400 249,-400 255,-400 261,-406 261,-412 261,-412 261,-438 261,-438 261,-444 255,-450 249,-450"/>
<text text-anchor="start" x="167" y="-435.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="171" y="-435.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">inbound</text>
<text text-anchor="start" x="139" y="-421.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">add entities into the</text>
<text text-anchor="start" x="155.5" y="-407.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">transfer table </text>
</g>
<!-- router&#45;&gt;inbound -->
<g id="edge2" class="edge">
<title>router&#45;&gt;inbound</title>
<path fill="none" stroke="#000000" d="M231.5139,-496.7676C225.8472,-485.3163 219.0583,-471.5969 212.9409,-459.2348"/>
<polygon fill="#000000" stroke="#000000" points="215.9957,-457.5164 208.4236,-450.1061 209.7219,-460.6211 215.9957,-457.5164"/>
<text text-anchor="start" x="222" y="-471" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> validation </text>
</g>
<!-- transfer -->
<g id="node5" class="node">
<title>transfer</title>
<path fill="#ffffff" stroke="#ffffff" d="M233,-342C233,-342 121,-342 121,-342 115,-342 109,-336 109,-330 109,-330 109,-318 109,-318 109,-312 115,-306 121,-306 121,-306 233,-306 233,-306 239,-306 245,-312 245,-318 245,-318 245,-330 245,-330 245,-336 239,-342 233,-342"/>
<text text-anchor="start" x="149" y="-327.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="153" y="-327.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">transfer</text>
<text text-anchor="start" x="117" y="-313.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">database gatekeeper </text>
</g>
<!-- inbound&#45;&gt;transfer -->
<g id="edge4" class="edge">
<title>inbound&#45;&gt;transfer</title>
<path fill="none" stroke="#000000" d="M191.2545,-399.774C188.548,-385.3868 185.1478,-367.3122 182.3472,-352.4245"/>
<polygon fill="#000000" stroke="#000000" points="185.7208,-351.4261 180.4323,-342.2456 178.8415,-352.7203 185.7208,-351.4261"/>
<text text-anchor="start" x="188" y="-374" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> insert into</text>
<text text-anchor="start" x="191.5" y="-363" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000">database </text>
</g>
<!-- socket -->
<g id="node4" class="node">
<title>socket</title>
<path fill="#ffffff" stroke="#ffffff" d="M296,-36C296,-36 202,-36 202,-36 196,-36 190,-30 190,-24 190,-24 190,-12 190,-12 190,-6 196,0 202,0 202,0 296,0 296,0 302,0 308,-6 308,-12 308,-12 308,-24 308,-24 308,-30 302,-36 296,-36"/>
<text text-anchor="start" x="213.5" y="-21.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="217.5" y="-21.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">websocket</text>
<text text-anchor="start" x="198" y="-7.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">client connection </text>
</g>
<!-- socket&#45;&gt;router -->
<g id="edge3" class="edge">
<title>socket&#45;&gt;router</title>
<path fill="none" stroke="#000000" d="M264.9369,-36.081C269.0658,-41.5359 273.1476,-47.7446 276,-54 288.2606,-80.888 290,-89.4486 290,-119 290,-425 290,-425 290,-425 290,-447.3786 279.8807,-470.1035 269.1346,-487.9268"/>
<polygon fill="#000000" stroke="#000000" points="265.9218,-486.4564 263.5081,-496.7727 271.8283,-490.2133 265.9218,-486.4564"/>
<text text-anchor="start" x="290" y="-275.5" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> backchannel </text>
</g>
<!-- counter -->
<g id="node6" class="node">
<title>counter</title>
<path fill="#ffffff" stroke="#ffffff" d="M187.5,-250C187.5,-250 78.5,-250 78.5,-250 72.5,-250 66.5,-244 66.5,-238 66.5,-238 66.5,-212 66.5,-212 66.5,-206 72.5,-200 78.5,-200 78.5,-200 187.5,-200 187.5,-200 193.5,-200 199.5,-206 199.5,-212 199.5,-212 199.5,-238 199.5,-238 199.5,-244 193.5,-250 187.5,-250"/>
<text text-anchor="start" x="106" y="-235.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="110" y="-235.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">counter</text>
<text text-anchor="start" x="74.5" y="-221.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">Postgres notification</text>
<text text-anchor="start" x="110" y="-207.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">listener </text>
</g>
<!-- transfer&#45;&gt;counter -->
<g id="edge5" class="edge">
<title>transfer&#45;&gt;counter</title>
<path fill="none" stroke="#000000" d="M168.9297,-305.8419C163.177,-292.8983 155.2657,-275.0978 148.3308,-259.4943"/>
<polygon fill="#000000" stroke="#000000" points="151.4268,-257.8425 144.1671,-250.1259 145.0302,-260.6855 151.4268,-257.8425"/>
<text text-anchor="start" x="165" y="-281" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> send a</text>
<text text-anchor="start" x="161" y="-271" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="10.00" fill="#000000">receipt</text>
<text text-anchor="start" x="194" y="-271" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> </text>
</g>
<!-- manager -->
<g id="node7" class="node">
<title>manager</title>
<path fill="#ffffff" stroke="#ffffff" d="M112,-144C112,-144 12,-144 12,-144 6,-144 0,-138 0,-132 0,-132 0,-106 0,-106 0,-100 6,-94 12,-94 12,-94 112,-94 112,-94 118,-94 124,-100 124,-106 124,-106 124,-132 124,-132 124,-138 118,-144 112,-144"/>
<text text-anchor="start" x="32" y="-129.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="36" y="-129.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">manager</text>
<text text-anchor="start" x="32.5" y="-115.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">executes a</text>
<text text-anchor="start" x="8" y="-101.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">database manager </text>
</g>
<!-- counter&#45;&gt;manager -->
<g id="edge6" class="edge">
<title>counter&#45;&gt;manager</title>
<path fill="none" stroke="#000000" d="M66.4523,-199.7478C59.9518,-194.798 54.2163,-188.9329 50,-182 44.8903,-173.5981 44.7346,-163.4948 46.7228,-153.8643"/>
<polygon fill="#000000" stroke="#000000" points="50.1335,-154.6634 49.4531,-144.0905 43.3916,-152.7801 50.1335,-154.6634"/>
<text text-anchor="start" x="50" y="-175" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> executes the</text>
<text text-anchor="start" x="54.5" y="-165" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="10.00" fill="#000000">manager</text>
<text text-anchor="start" x="95.5" y="-165" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> </text>
</g>
<!-- graph_elixir -->
<g id="node8" class="node">
<title>graph_elixir</title>
<path fill="#ffffff" stroke="#ffffff" d="M250,-137C250,-137 166,-137 166,-137 160,-137 154,-131 154,-125 154,-125 154,-113 154,-113 154,-107 160,-101 166,-101 166,-101 250,-101 250,-101 256,-101 262,-107 262,-113 262,-113 262,-125 262,-125 262,-131 256,-137 250,-137"/>
<text text-anchor="start" x="187" y="-122.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000"> </text>
<text text-anchor="start" x="191" y="-122.8" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="14.00" fill="#000000">graph</text>
<text text-anchor="start" x="162" y="-108.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">entity manager </text>
</g>
<!-- counter&#45;&gt;graph_elixir -->
<g id="edge8" class="edge">
<title>counter&#45;&gt;graph_elixir</title>
<path fill="none" stroke="#000000" d="M164.9634,-199.9626C170.7747,-194.4602 176.433,-188.3623 181,-182 188.6212,-171.383 194.6726,-158.2803 199.0985,-146.7788"/>
<polygon fill="#000000" stroke="#000000" points="202.458,-147.7806 202.568,-137.1863 195.8753,-145.3996 202.458,-147.7806"/>
<text text-anchor="start" x="194.5" y="-175" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> load the result</text>
<text text-anchor="start" x="193" y="-165" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000">from </text>
<text text-anchor="start" x="216" y="-165" font-family="Helvetica,sans-Serif" font-weight="bold" font-size="10.00" fill="#000000">transfer</text>
<text text-anchor="start" x="254" y="-165" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> </text>
</g>
<!-- manager&#45;&gt;counter -->
<g id="edge7" class="edge">
<title>manager&#45;&gt;counter</title>
<path fill="none" stroke="#000000" d="M88.5672,-144.2292C93.7023,-149.8056 98.7881,-155.8831 103,-162 109.0287,-170.7555 114.4492,-180.9107 118.9702,-190.4775"/>
<polygon fill="#000000" stroke="#000000" points="115.8668,-192.1089 123.1805,-199.7744 122.2433,-189.2211 115.8668,-192.1089"/>
<text text-anchor="start" x="115" y="-169.5" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000"> gets the result </text>
</g>
<!-- graph_elixir&#45;&gt;socket -->
<g id="edge9" class="edge">
<title>graph_elixir&#45;&gt;socket</title>
<path fill="none" stroke="#000000" d="M214.6527,-100.9691C219.5547,-87.8689 226.4761,-69.7501 233,-54 234.1287,-51.275 235.3312,-48.4465 236.5506,-45.6267"/>
<polygon fill="#000000" stroke="#000000" points="239.8584,-46.7992 240.6787,-36.2361 233.4502,-43.9821 239.8584,-46.7992"/>
<text text-anchor="start" x="233" y="-68" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000">update the</text>
<text text-anchor="start" x="242.5" y="-57" font-family="Helvetica,sans-Serif" font-size="10.00" fill="#000000">client</text>
</g>
</g>
</svg>
</div>
<p>The <code>backchannel</code> isn’t in place yet.</p>
<p>Currently you can see the result in the <code>rasmus</code> log. Let’s demonstrate this workflow with an example.</p>
<!--more-->
<h1 id="router">router</h1>
<p>At first a <code>user</code> must be inserted into the database.</p>
<pre><code>API_URL=&quot;http://localhost:8080/api&quot;

curl -H &quot;Content-Type: application/json&quot; -X POST $API_URL -d @- &lt;&lt;BODY
{
  &quot;action&quot;: &quot;add&quot;,
   &quot;entity&quot;: &quot;user&quot;,
   &quot;data&quot;: {
     &quot;first_name&quot;: &quot;Jan Frederik&quot;,
     &quot;last_name&quot;: &quot;Hake&quot;,
     &quot;email_address&quot;: &quot;jan_hake@gmx.de&quot;,
     &quot;login&quot;: &quot;jan_hake&quot;
   }
}
BODY</code></pre>
<p>The <a href="https://github.com/enter-haken/rasmus/blob/master/lib/web/router.ex">router</a> make some simple checks on the posted json data.</p>
<pre><code>post &quot;/api&quot; do
    with {:ok, action} &lt;- get_action_from(conn.body_params),
         {:ok, entity}  &lt;- get_entity_from(conn.body_params),
         {:ok, data } &lt;- get_data_from(conn.body_params)
    do
      Logger.info(&quot;Got #{action} for #{entity} with #{inspect(data)}&quot;)

      Core.Inbound.add(conn.body_params)

      conn
      |&gt; send_resp(200, get_succeeded_response())
    else
      {:error, message} -&gt;
        Logger.warn(&quot;Got malformed request: #{message}&quot;)

        conn
        |&gt; send_resp(422, get_error_response(message))
    end
end</code></pre>
<p>Only the <code>actions</code> in</p>
<pre><code>@actions [&quot;add&quot;,&quot;update&quot;,&quot;get&quot;,&quot;delete&quot;]</code></pre>
<p>will be valid <code>actions</code>.</p>
<pre><code>defp get_action_from(%{ &quot;action&quot; =&gt;  action } = _body_params) do
    case Enum.member?(@actions, action) do
      true -&gt; {:ok, action }
      _ -&gt; { :error, &quot;Action &#39;#{action}&#39; is not valid. Valid actions are #{get_quoted(@actions)}&quot;}
    end
  end

defp get_action_from(_body_params), do: { :error, &quot;action is missing. Valid actions are #{get_quoted(@actions)}&quot; }</code></pre>
<p>Otherwise you get into the <code>error</code> path.</p>
<p>The similar things will be checked for valid <code>entities</code>.</p>
<pre><code>@entities [&quot;user&quot;,&quot;privilege&quot;,&quot;role&quot;,&quot;link&quot;,&quot;appointment&quot;,&quot;list&quot;,&quot;graph&quot;]

defp get_entity_from(%{ &quot;entity&quot; =&gt; entity } = _body_params) do
  case Enum.member?(@entities, entity) do
    true -&gt; {:ok, entity }
    _ -&gt; { :error, &quot;Entity &#39;#{entity}&#39; is not valid. Valid entities are #{get_quoted(@entities)}&quot; }
  end
end

defp get_entity_from(_body_params), do: { :error, &quot;entity is missing. Valid entities are #{get_quoted(@entities)}&quot; }</code></pre>
<p>A helper function will make some pretty stuff with the error message.</p>
<pre><code># get_quoted([&quot;a&quot;,&quot;b&quot;]) -&gt; &#39;a&#39;, &#39;b&#39;
defp get_quoted(strings) do
  strings
  |&gt; Enum.map(fn(x) -&gt; &quot;\&#39;#{x}\&#39;&quot; end)
  |&gt; Enum.join(&quot;, &quot;)
end</code></pre>
<p>If everything has worked as expected,</p>
<pre><code> Core.Inbound.add(conn.body_params)</code></pre>
<p>will add the <code>entity</code> into the database.</p>
<h1 id="inbound">Inbound</h1>
<p>The <a href="https://github.com/enter-haken/rasmus/blob/master/lib/core/inbound.ex">inbound</a> <code>GenServer</code> has the task, to insert <code>entities</code> into the database.</p>
<pre><code>def handle_cast({:add, payload}, state) do
  case Postgrex.query(state, &quot;INSERT INTO rasmus.transfer (request) VALUES ($1)&quot;, [payload]) do
    {:ok, result} -&gt; Logger.debug(&quot;added into transfer: #{inspect(result)}&quot;)
    {:error, error} -&gt; Logger.error(&quot;adding into transfer failed: #{inspect(error)}. Tried to add #{inspect(payload)}&quot;)
  end
  {:noreply, state }
end</code></pre>
<p>The <code>client</code> function</p>
<pre><code>def add(entity) do
  GenServer.cast(:inbound_worker, {:add, entity})
end</code></pre>
<p>is called from the <code>router</code>.</p>
<h1 id="transfer">transfer</h1>
<p>The <a href="https://github.com/enter-haken/rasmus/blob/master/database_scripts/transfer.sql#L35">transfer</a> table it self is quiet simple</p>
<pre><code>CREATE TABLE transfer(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    state transfer_state NOT NULL DEFAULT &#39;pending&#39;,
    request JSONB NOT NULL,
    response JSONB
);</code></pre>
<p>When a <code>request</code> is inserted, a <a href="https://github.com/enter-haken/rasmus/blob/master/database_scripts/notifications.sql">notification</a> will be send to the backend.</p>
<pre><code>CREATE FUNCTION send_message(id UUID, state transfer_state, request JSONB, response JSONB) RETURNS VOID AS $$
DECLARE
    message_response JSONB;
BEGIN
    message_response := &#39;[]&#39; || (
        jsonb_build_object(&#39;id&#39;, id) ||
        jsonb_build_object(&#39;state&#39;, state) ||
        jsonb_build_object(&#39;action&#39;, request-&gt;&gt;&#39;action&#39;) ||
        jsonb_build_object(&#39;entity&#39;, request-&gt;&gt;&#39;entity&#39;)
    );

    PERFORM pg_notify(&#39;rasmus&#39;, message_response-&gt;&gt;0);
END
$$ LANGUAGE plpgsql;

CREATE FUNCTION send_transfer_message() RETURNS TRIGGER AS $$
BEGIN 
    PERFORM rasmus.send_message(NEW.id, NEW.state, NEW.request, NEW.response);
    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER send_receipt_trigger BEFORE INSERT ON transfer
FOR EACH ROW EXECUTE PROCEDURE send_transfer_message();</code></pre>
<p>At this point, it does not happen very much. This approach will reduce the inbound message queue from the <code>inbound</code> <code>GenServer</code>. Inserting a <code>request</code> should be as fast as possible.</p>
<h1 id="counter">counter</h1>
<p>The <code>counter</code> listens to Postgres notifications,</p>
<pre><code>def handle_info({:notification, pid, ref, &quot;rasmus&quot;, payload},_) do
    case Jason.decode(payload) do

      {:ok , %{ &quot;id&quot; =&gt; id, &quot;state&quot; =&gt; &quot;pending&quot;, }} -&gt; Core.Manager.perform(id)

      #
      # ...
      #

      _ -&gt; Logger.warn(&quot;got unhandled notification: #{inspect(payload)}&quot;)
    end
    {:noreply, {pid, ref}}
end</code></pre>
<p>and calls the corresponding <code>manager</code> within the database.</p>
<h1 id="manager">manager</h1>
<p>The <a href="https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex">manager</a> performs the CRUD tasks for every entity.</p>
<p>As you can see in the shortened version,</p>
<pre><code>def handle_cast(transfer_id, state) do
  case Postgrex.query(state, &quot;SELECT rasmus.transfer_manager($1)&quot;, [transfer_id]) do
    {:ok, %{messages: messages}} -&gt;
      if Enum.any?(messages, fn(x) -&gt; x.severity == &quot;WARNING&quot; end) do
        set_succeeded_with_warning_state(state, transfer_id)
      else
         set_succeeded_state(state,transfer_id)
      end

    {:error, %{postgres: %{code: :raise_exception, severity: &quot;ERROR&quot;, message: message, hint: hint}}} -&gt;
      set_error_state(state, transfer_id)
    
    # ...
  end
  {:noreply, state }
end</code></pre>
<p>the <code>state</code> will be updated, after the manager <code>succeeded</code> or <code>failed</code>.</p>
<pre><code>defp set_state(state, transfer_id, sql_function_name, state_name) do
  case Postgrex.query(state, &quot;SELECT rasmus.#{sql_function_name}($1)&quot;, [transfer_id]) do
    {:ok, _} -&gt; Logger.debug(&quot;set state &#39;#{state_name}&#39; for #{transfer_id} succeeded&quot;)
    _ -&gt; Logger.error(&quot;set state &#39;#{state_name}&#39; for #{transfer_id} failed&quot;)
  end
end

defp set_error_state(state, transfer_id), do: set_state(state, transfer_id, &quot;set_error&quot;, &quot;error&quot;)
defp set_succeeded_state(state, transfer_id), do: set_state(state, transfer_id, &quot;set_succeeded&quot;, &quot;succeeded&quot;)
defp set_succeeded_with_warning_state(state, transfer_id), do: set_state(state, transfer_id, &quot;set_succeeded_with_warning&quot;, &quot;succeeded_with_warning&quot;)</code></pre>
<p>The Postgres function <a href="https://github.com/enter-haken/rasmus/blob/master/database_scripts/transfer.sql#L64">transfer_manager</a> itself looks for the correct manager, and does some checks.</p>
<pre><code>CREATE FUNCTION transfer_manager(transfer_id TEXT) RETURNS VOID AS $$
DECLARE
    transfer_record RECORD;
    transfer_response JSONB;
BEGIN
   SELECT id, state, request, response FROM rasmus.transfer WHERE id = transfer_id::UUID INTO transfer_record;

   CASE transfer_record.request-&gt;&gt;&#39;entity&#39;
       -- ... 
       WHEN &#39;user&#39; THEN
           BEGIN
               SELECT rasmus.user_manager(transfer_record.request) INTO transfer_response;
               PERFORM rasmus.set_response(transfer_id::UUID, transfer_response);
           END;
       -- ...
       ELSE
           BEGIN
               RAISE EXCEPTION &#39;entity `%` unknown&#39;, transfer_record.request-&gt;&gt;&#39;entity&#39;
                   USING HINT = &#39;entity must one of link, graph, appointment, list, person, role, privilege or user&#39;;
           END;
   END CASE;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>It also puts the <code>result</code> into the <code>response</code> column. If you are interested, what is happening within the <code>rasmus.user_manager</code> you can take a look at the <a href="https://github.com/enter-haken/rasmus/blob/master/database_scripts/user_account.sql">sources</a> for the <code>user_manager</code>.</p>
<p>When the <code>state</code> changes,</p>
<pre><code>CREATE TRIGGER got_response_trigger AFTER UPDATE ON transfer
    FOR EACH ROW 
    WHEN (OLD.state IS DISTINCT FROM NEW.state)
EXECUTE PROCEDURE send_transfer_message();</code></pre>
<p>the <code>counter</code> is informed, that a request is ready for processing.</p>
<pre><code>def handle_info({:notification, pid, ref, &quot;rasmus&quot;, payload},_) do
  case Jason.decode(payload) do
    
   # ... 

   {:ok , %{ &quot;id&quot; =&gt; id, &quot;state&quot; =&gt; state, &quot;entity&quot; =&gt; entity, &quot;action&quot; =&gt; action }} -&gt; 
     Logger.info(&quot;got a request change with state &#39;#{state}&#39; for action &#39;#{action}&#39; and entity &#39;#{entity}&#39; #{id}. ToDo: send message to processes using this entity.&quot;)

   # ...

  _ -&gt; Logger.warn(&quot;got unhandled notification: #{inspect(payload)}&quot;)
  end
  {:noreply, {pid, ref}}
end</code></pre>
<p>At this point, the UI can be informed about an entity change. On a single user system the entity is send back to the client, and the view will be updated. On a multi user system, multiple clients can be updated as well. In the case of <code>rasmus</code>, multiple users can work on the same <code>graph</code> at the same time.</p>
<h1 id="example">example</h1>
<p>As mentioned before, I added a <code>user</code> to the system. Now let’s take a look at a <a href="/posts/2018-07-23-rasmus-part2.html">previous example</a>.</p>
<div class="figure">
<img src="/images/rasmus_frontend.png" />

</div>
<p>This graph is described with <code>graphviz</code> code.</p>
<pre><code>graph {
  otp [label = &quot;*OTP tree*\nprocess configuration&quot;, url = &quot;https://github.com/enter-haken/rasmus/blob/master/lib/rasmus_app.ex&quot;];
  router [label =&quot;*router*\ncowboy router&quot;, url=&quot;https://github.com/enter-haken/rasmus/blob/master/lib/web/router.ex&quot;]
  counter [label = &quot;*counter*\nlisten to notifications\nfrom database&quot;, url = &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/counter.ex&quot;]
  inbound [label = &quot;*inbound*\nsend requests towards\nthe database&quot;, url = &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/inbound.ex&quot;]
  manager [label = &quot;*manager*\nexecute the\ndatabase manager&quot;, url = &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex&quot;]
  client [label = &quot;*client*\nreact / visjs app&quot;, url = &quot;https://github.com/enter-haken/rasmus/tree/master/frontend&quot;]
  configuration [label = &quot;*configuration*\ndatabase configuration&quot;, url = &quot;https://github.com/enter-haken/rasmus/tree/master/config&quot;]
  database [label = &quot;*PostgreSQL*&quot;, url =&quot;https://github.com/enter-haken/rasmus/tree/master/database_scripts&quot;]
  transfer [label = &quot;*transfer*\ninterface table&quot;, url = &quot;https://github.com/enter-haken/rasmus/blob/master/database_scripts/transfer.sql&quot;]
  postcreate [label = &quot;*postcreate*\ntable manipulation\nafter DDL&quot;, url = &quot;https://github.com/enter-haken/rasmus/blob/master/database_scripts/postcreate.sql&quot;]
  crud [label = &quot;*CRUD*\ngeneric CREATE, READ\nUPDATE, DELETE\nfunctions&quot;, url = &quot;https://github.com/enter-haken/rasmus/blob/master/database_scripts/crud.sql&quot;]
  otp -- router [ label = &quot;supervises&quot;]
  otp -- counter [ label = &quot;supervises&quot;]
  otp -- inbound [ label = &quot;supervises&quot;]
  otp -- manager [ label = &quot;supervises&quot;]
  counter -- manager [ label = &quot;executes the\nmanager&quot;]
  counter -- database [ label =&quot;listens for\ndatabase notifications&quot;]
  router -- client [label = &quot;serves&quot;]
  inbound -- transfer [label = &quot;insert request&quot;]
  database -- transfer 
  database -- postcreate
  database -- configuration
  database -- crud
}</code></pre>
<p>Due to there is no frontend, let’s make some <code>curl</code> stuff.</p>
<pre><code>$ curl -H &quot;Content-Type: application/json&quot; -X POST $API_URL -d @- &lt;&lt;BODY
{
  &quot;action&quot;: &quot;add&quot;,
   &quot;entity&quot;: &quot;user&quot;,
   &quot;data&quot;: {
     &quot;first_name&quot;: &quot;Jan Frederik&quot;,
     &quot;last_name&quot;: &quot;Hake&quot;,
     &quot;email_address&quot;: &quot;jan_hake@gmx.de&quot;,
     &quot;login&quot;: &quot;jan_hake&quot;
   }
}
BODY</code></pre>
<p>Log entries:</p>
<pre><code>14:35:11.041 module=Plug.Logger [info] POST /api
14:35:11.056 module=Web.Router [info] Got add for user with %{&quot;email_address&quot; =&gt; &quot;jan_hake@gmx.de&quot;, &quot;first_name&quot; =&gt; &quot;Jan Frederik&quot;, &quot;last_name&quot; =&gt; &quot;Hake&quot;, &quot;login&quot; =&gt; &quot;jan_hake&quot;}
14:35:11.058 module=Plug.Logger [info] Sent 200 in 17ms
14:35:11.063 module=Core.Manager [info] perform transfer_manager for transfer id: 87e8bed2-72ad-44aa-9dfe-ff7e69883df1
14:35:11.067 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 4528, messages: [], num_rows: 1, rows: nil}
14:35:11.110 module=Core.Manager [debug] set state &#39;succeeded&#39; for 87e8bed2-72ad-44aa-9dfe-ff7e69883df1 succeeded
14:35:11.110 module=Core.Manager [debug] manager succeeded:  %{notice: [&quot;crypted password: $2a$06$g6YczlE0qjE6dZbLNn4tLewaL80Bx5Pms/IONU8kblzNTQjFTU1zO&quot;, &quot;salt: $2a$06$g6YczlE0qjE6dZbLNn4tLe&quot;, &quot;blank password: $2a$06$Nbp0YIoQkPykTQMmVdgWbO&quot;, &quot;INSERT INTO rasmus.user (email_address, login, last_name, first_name) VALUES (&#39;jan_hake@gmx.de&#39;, &#39;jan_hake&#39;, &#39;Hake&#39;, &#39;Jan Frederik&#39;) RETURNING id;&quot;]}
14:35:11.110 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;87e8bed2-72ad-44aa-9dfe-ff7e69883df1\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;user\&quot;}&quot;</code></pre>
<p>(hint: the stuff with the password won’t stay this way. it is just some dummy stuff.)</p>
<p>The <code>user</code> is currently necessary for the owner association. The <code>user_id</code> must be stored for the the next calls.</p>
<pre><code>USER_ID=`psql -U postgres -d rasmus -c &quot;select id from rasmus.user&quot; | sed -e &#39;1,2d&#39; -e &#39;4,5d&#39; -e &#39;s/^ //&#39;`</code></pre>
<p>Now we take the <code>user</code> and add some links.</p>
<pre><code>curl -H &quot;Content-Type: application/json&quot; -X POST $API_URL -d @- &lt;&lt;BODY
{
  &quot;action&quot;: &quot;add&quot;,
    &quot;entity&quot;: &quot;link&quot;,
    &quot;data&quot;: {
      &quot;id_owner&quot;: &quot;$USER_ID&quot;,
      &quot;name&quot;: &quot;otp tree&quot;,
      &quot;description&quot;: &quot;process configuration&quot;,
      &quot;url&quot;: &quot;https://github.com/enter-haken/rasmus/blob/master/lib/rasmus_app.ex&quot;
    }
}
BODY

curl -H &quot;Content-Type: application/json&quot; -X POST $API_URL -d @- &lt;&lt;BODY
{
  &quot;action&quot;: &quot;add&quot;,
    &quot;entity&quot;: &quot;link&quot;,
    &quot;data&quot;: {
      &quot;id_owner&quot;: &quot;$USER_ID&quot;,
      &quot;name&quot;: &quot;router&quot;,
      &quot;description&quot;: &quot;cowboy router&quot;,
      &quot;url&quot;: &quot;https://github.com/enter-haken/rasmus/blob/master/lib/web/router.ex&quot;
    }
}
BODY

...</code></pre>
<p>The <code>link</code> is stored into the database.</p>
<pre><code>CREATE TABLE &quot;link&quot;(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_owner UUID NOT NULL REFERENCES &quot;user&quot;(id) ON DELETE CASCADE,
    name VARCHAR(80) UNIQUE NOT NULL,
    description VARCHAR(254),
    url VARCHAR(2048),
    json_view JSONB
);</code></pre>
<p>The <code>json_view</code> column is populated, when it is needed for the first time. All necessary functions can be found in the <a href="https://github.com/enter-haken/rasmus/blob/master/database_scripts/link.sql">database script</a>.</p>
<p>Log entries:</p>
<pre><code>14:38:28.319 module=Plug.Logger [info] POST /api
14:38:28.319 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;process configuration&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;otp tree&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/rasmus_app.ex&quot;}
14:38:28.319 module=Plug.Logger [info] Sent 200 in 487µs
14:38:28.324 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.324 module=Core.Manager [info] perform transfer_manager for transfer id: e2fe6b9c-18ec-436d-97a1-2153243c90fb
14:38:28.331 module=Plug.Logger [info] POST /api
14:38:28.332 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;cowboy router&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;router&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/web/router.ex&quot;}
14:38:28.332 module=Plug.Logger [info] Sent 200 in 462µs
14:38:28.334 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.340 module=Plug.Logger [info] POST /api
14:38:28.340 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;listen to notifications\nfrom database&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;counter&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/counter.ex&quot;}
14:38:28.340 module=Plug.Logger [info] Sent 200 in 292µs
14:38:28.340 module=Core.Manager [debug] set state &#39;succeeded&#39; for e2fe6b9c-18ec-436d-97a1-2153243c90fb succeeded
14:38:28.341 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/lib/rasmus_app.ex&#39;, &#39;otp tree&#39;, &#39;process configuration&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.341 module=Core.Manager [info] perform transfer_manager for transfer id: 44c832eb-b034-4e4f-884c-4d20c3da6fa1
14:38:28.341 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;e2fe6b9c-18ec-436d-97a1-2153243c90fb\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.342 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.346 module=Plug.Logger [info] POST /api
14:38:28.346 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;send requests towards\nthe database&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;inbound&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/inbound.ex&quot;}
14:38:28.346 module=Plug.Logger [info] Sent 200 in 220µs
14:38:28.347 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.350 module=Core.Manager [debug] set state &#39;succeeded&#39; for 44c832eb-b034-4e4f-884c-4d20c3da6fa1 succeeded
14:38:28.350 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/lib/web/router.ex&#39;, &#39;router&#39;, &#39;cowboy router&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.350 module=Core.Manager [info] perform transfer_manager for transfer id: 1812a173-715c-4d7f-9983-29706dc5174b
14:38:28.350 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;44c832eb-b034-4e4f-884c-4d20c3da6fa1\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.350 module=Plug.Logger [info] POST /api
14:38:28.350 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;execute the\ndatabase manager&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;manager&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex&quot;}
14:38:28.350 module=Plug.Logger [info] Sent 200 in 175µs
14:38:28.352 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.354 module=Plug.Logger [info] POST /api
14:38:28.354 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;react / visjs app&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;client&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex&quot;}
14:38:28.354 module=Plug.Logger [info] Sent 200 in 223µs
14:38:28.359 module=Plug.Logger [info] POST /api
14:38:28.359 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;database configuration&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;configuration&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/tree/master/config&quot;}
14:38:28.359 module=Plug.Logger [info] Sent 200 in 157µs
14:38:28.360 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.361 module=Core.Manager [debug] set state &#39;succeeded&#39; for 1812a173-715c-4d7f-9983-29706dc5174b succeeded
14:38:28.361 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/lib/core/counter.ex&#39;, &#39;counter&#39;, &#39;listen to notifications\nfrom database&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.361 module=Core.Manager [info] perform transfer_manager for transfer id: 00039c03-2b12-42ee-b0ee-4f3251eba820
14:38:28.361 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;1812a173-715c-4d7f-9983-29706dc5174b\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.362 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.363 module=Plug.Logger [info] POST /api
14:38:28.363 module=Web.Router [info] Got add for link with %{&quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;database&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/tree/master/database_scripts&quot;}
14:38:28.363 module=Plug.Logger [info] Sent 200 in 163µs
14:38:28.365 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.367 module=Plug.Logger [info] POST /api
14:38:28.367 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;interface table&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;transfer&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/database_scripts/transfer.sql&quot;}
14:38:28.367 module=Plug.Logger [info] Sent 200 in 157µs
14:38:28.368 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.369 module=Core.Manager [debug] set state &#39;succeeded&#39; for 00039c03-2b12-42ee-b0ee-4f3251eba820 succeeded
14:38:28.369 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/lib/core/inbound.ex&#39;, &#39;inbound&#39;, &#39;send requests towards\nthe database&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.369 module=Core.Manager [info] perform transfer_manager for transfer id: 488b40d5-e364-413b-b796-5706533b36ed
14:38:28.369 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;00039c03-2b12-42ee-b0ee-4f3251eba820\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.371 module=Plug.Logger [info] POST /api
14:38:28.371 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;table manipulation\nafter DDL&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;postcreate&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/database_scripts/postcreate.sql&quot;}
14:38:28.371 module=Plug.Logger [info] Sent 200 in 138µs
14:38:28.372 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.374 module=Plug.Logger [info] POST /api
14:38:28.374 module=Web.Router [info] Got add for link with %{&quot;description&quot; =&gt; &quot;generic CREATE, READ\nUPDATE, DELETE\nfunctions&quot;, &quot;id_owner&quot; =&gt; &quot;fed1e016-0730-4d04-b6cd-bdd8da676e76&quot;, &quot;name&quot; =&gt; &quot;crud&quot;, &quot;url&quot; =&gt; &quot;https: //github.com/enter-haken/rasmus/blob/master/database_scripts/crud.sql&quot;}
14:38:28.374 module=Plug.Logger [info] Sent 200 in 210µs
14:38:28.376 module=Core.Inbound [debug] added into transfer: %Postgrex.Result{columns: nil, command: :insert, connection_id: 5768, messages: [], num_rows: 1, rows: nil}
14:38:28.377 module=Core.Manager [debug] set state &#39;succeeded&#39; for 488b40d5-e364-413b-b796-5706533b36ed succeeded
14:38:28.377 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex&#39;, &#39;manager&#39;, &#39;execute the\ndatabase manager&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.377 module=Core.Manager [info] perform transfer_manager for transfer id: 912e14df-ee7c-45c0-898a-895c98d1a36a
14:38:28.377 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;488b40d5-e364-413b-b796-5706533b36ed\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.381 module=Core.Manager [debug] set state &#39;succeeded&#39; for 912e14df-ee7c-45c0-898a-895c98d1a36a succeeded
14:38:28.381 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex&#39;, &#39;client&#39;, &#39;react / visjs app&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.381 module=Core.Manager [info] perform transfer_manager for transfer id: a3492a80-4289-46bd-bfc2-9b880af42517
14:38:28.381 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;912e14df-ee7c-45c0-898a-895c98d1a36a\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.388 module=Core.Manager [debug] set state &#39;succeeded&#39; for a3492a80-4289-46bd-bfc2-9b880af42517 succeeded
14:38:28.388 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/tree/master/config&#39;, &#39;configuration&#39;, &#39;database configuration&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.388 module=Core.Manager [info] perform transfer_manager for transfer id: 1aac3309-39f0-4f4a-b92f-a89e8a49e6ba
14:38:28.388 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;a3492a80-4289-46bd-bfc2-9b880af42517\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.392 module=Core.Manager [debug] set state &#39;succeeded&#39; for 1aac3309-39f0-4f4a-b92f-a89e8a49e6ba succeeded
14:38:28.392 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/tree/master/database_scripts&#39;, &#39;database&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.392 module=Core.Manager [info] perform transfer_manager for transfer id: 9feb5f68-9f97-4351-b324-7b8d8436a94f
14:38:28.392 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;1aac3309-39f0-4f4a-b92f-a89e8a49e6ba\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.396 module=Core.Manager [debug] set state &#39;succeeded&#39; for 9feb5f68-9f97-4351-b324-7b8d8436a94f succeeded
14:38:28.396 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/database_scripts/transfer.sql&#39;, &#39;transfer&#39;, &#39;interface table&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.396 module=Core.Manager [info] perform transfer_manager for transfer id: 965ff0e8-43ae-4b7d-b76e-a55bcd721058
14:38:28.396 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;9feb5f68-9f97-4351-b324-7b8d8436a94f\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.399 module=Core.Manager [debug] set state &#39;succeeded&#39; for 965ff0e8-43ae-4b7d-b76e-a55bcd721058 succeeded
14:38:28.400 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https://github.com/enter-haken/rasmus/blob/master/database_scripts/postcreate.sql&#39;, &#39;postcreate&#39;, &#39;table manipulation\nafter DDL&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.400 module=Core.Manager [info] perform transfer_manager for transfer id: 161771a3-e153-44bf-89bf-42f7b5b2cd53
14:38:28.400 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;965ff0e8-43ae-4b7d-b76e-a55bcd721058\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;
14:38:28.406 module=Core.Manager [debug] set state &#39;succeeded&#39; for 161771a3-e153-44bf-89bf-42f7b5b2cd53 succeeded
14:38:28.406 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;INSERT INTO rasmus.link (url, name, description, id_owner) VALUES (&#39;https: //github.com/enter-haken/rasmus/blob/master/database_scripts/crud.sql&#39;, &#39;crud&#39;, &#39;generic CREATE, READ\nUPDATE, DELETE\nfunctions&#39;, &#39;fed1e016-0730-4d04-b6cd-bdd8da676e76&#39;) RETURNING id;&quot;]}
14:38:28.406 module=Core.Counter [warn] got unhandled notification: &quot;{\&quot;id\&quot;: \&quot;161771a3-e153-44bf-89bf-42f7b5b2cd53\&quot;, \&quot;state\&quot;: \&quot;succeeded\&quot;, \&quot;action\&quot;: \&quot;add\&quot;, \&quot;entity\&quot;: \&quot;link\&quot;}&quot;</code></pre>
<p>As you can see, the <code>inbound</code> tasks are very quick. A <code>manager</code> task can take a while and it will report to the <code>counter</code>, when it is ready.</p>
<p>After all links are inserted you can post a get request, to get the graph.</p>
<pre><code>curl -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;action&quot; : &quot;get&quot;, &quot;entity&quot;:&quot;graph&quot;, &quot;data&quot; : { &quot;id_owner&quot;:&quot;&#39;&quot;$USER_ID&quot;&#39;&quot;  }}&#39; $API_URL</code></pre>
<p>The <code>request</code> is inserted into the <code>transfer</code> table and the <code>counter</code> will call the corresponding manager for the <code>graph</code>.</p>
<p>The result of</p>
<pre><code>CREATE FUNCTION get_graph_for(raw_request JSONB) RETURNS JSONB AS $$
  import json

  request = json.loads(raw_request)

  link_request = json.dumps({
    &quot;entity&quot; : &quot;link&quot;,
    &quot;action&quot; : &quot;get&quot;,
    &quot;data&quot; : {
      &quot;id_owner&quot; : request[&quot;data&quot;][&quot;id_owner&quot;]
    }
  })

  links = json.loads(plpy.execute(plpy.prepare(
      &quot;SELECT rasmus.link_get_manager($1)&quot;,[&quot;jsonb&quot;]), [link_request])[0][&quot;link_get_manager&quot;])

  response = {
    &quot;owner&quot; : request[&quot;data&quot;][&quot;id_owner&quot;],
    &quot;nodes&quot; : links
  }

  return json.dumps(response)

$$ LANGUAGE plpython3u</code></pre>
<p>will be inserted into the <code>response</code> column and the <code>counter</code> is informed, that the <code>graph</code> request is ready for processing.</p>
<pre><code>def handle_info({:notification, pid, ref, &quot;rasmus&quot;, payload},_) do
  case Jason.decode(payload) do
    
    # ...

    {:ok , %{ &quot;id&quot; =&gt; id, &quot;state&quot; =&gt; state, &quot;entity&quot; =&gt; &quot;graph&quot;, &quot;action&quot; =&gt; &quot;get&quot; }} -&gt; 
      Logger.info(&quot;got a &#39;get&#39; request for a graph&quot;)
      Core.Entity.Graph.get(id);
    
    # ...

    _ -&gt; Logger.warn(&quot;got unhandled notification: #{inspect(payload)}&quot;)
  end
  {:noreply, {pid, ref}}
end</code></pre>
<p>The <a href="https://github.com/enter-haken/rasmus/blob/master/lib/core/entity/graph.ex#L30">Core.Entity.Graph.get/1</a> function</p>
<pre><code>def handle_cast({:get, transfer_id}, state) do
  case Postgrex.query(state, &quot;SELECT response FROM  rasmus.transfer WHERE id = $1&quot;, [UUID.string_to_binary!(transfer_id)]) do
    {:ok, result} -&gt; Logger.debug(&quot;got response from transfer: #{inspect(result)}&quot;)
    {:error, error} -&gt; Logger.error(&quot;getting response from transfer failed: #{inspect(error)}. Tried to get #{inspect(transfer_id)}&quot;)
  end
  {:noreply, state }
end

# ...

def get(transfer_id) do
  GenServer.cast(:graph, {:get, transfer_id})
end</code></pre>
<p>puts the result into the <code>rasmus</code> log.</p>
<p>Log entries:</p>
<pre><code>...

14:44:28.126 module=Plug.Logger [info] POST /api
14:44:28.126 module=Web.Router [info] Got get for graph with %{&quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;}
...
14:44:28.156 module=Core.Counter [info] got a &#39;get&#39; request for a graph
14:44:28.157 module=Core.Manager [debug] manager succeded:  %{notice: [&quot;dirty or empty ids for link: []&quot;, &quot;SELECT id, json_view FROM rasmus.link WHERE id_owner = &#39;376d0e62-2438-455a-ada6-b1a188274f38&#39;&quot;, &quot;update json_view for link 98b83cb9-5273-424f-bbd9-cd0d1b006014&quot;, &quot;update json_view for link 606f21fa-879f-4dda-a710-31e436046d09&quot;, &quot;update json_view for link fcea53b3-81bf-419b-8443-5944fb674c46&quot;, &quot;update json_view for link aadd3610-c71d-48c2-983a-1c74f8ff4dd0&quot;, &quot;update json_view for link cde93d44-1324-476d-b7ba-1b8a737ef90a&quot;, &quot;update json_view for link 71cda2ab-4116-49f9-9dfc-3b08a3462260&quot;, &quot;update json_view for link 890b3947-bd9e-4506-8ca5-ded220503f00&quot;, &quot;update json_view for link 0c31d9dd-8d39-4536-85b7-0048c58dd872&quot;, &quot;update json_view for link 8c8bbb39-7047-4260-95c4-20c0eed6c69b&quot;, &quot;update json_view for link 78a2b625-9116-4e8d-8bf7-b3124d105d73&quot;, &quot;update json_view for link 8c99ce4a-cea4-42e5-a991-17b2c34fa8e8&quot;, &quot;dirty or empty ids for link: [{\&quot;id\&quot;: \&quot;8c99ce4a-cea4-42e5-a991-17b2c34fa8e8\&quot;}, {\&quot;id\&quot;: \&quot;78a2b625-9116-4e8d-8bf7-b3124d105d73\&quot;}, {\&quot;id\&quot;: \&quot;8c8bbb39-7047-4260-95c4-20c0eed6c69b\&quot;}, {\&quot;id\&quot;: \&quot;0c31d9dd-8d39-4536-85b7-0048c58dd872\&quot;}, {\&quot;id\&quot;: \&quot;890b3947-bd9e-4506-8ca5-ded220503f00\&quot;}, {\&quot;id\&quot;: \&quot;71cda2ab-4116-49f9-9dfc-3b08a3462260\&quot;}, {\&quot;id\&quot;: \&quot;cde93d44-1324-476d-b7ba-1b8a737ef90a\&quot;}, {\&quot;id\&quot;: \&quot;aadd3610-c71d-48c2-983a-1c74f8ff4dd0\&quot;}, {\&quot;id\&quot;: \&quot;fcea53b3-81bf-419b-8443-5944fb674c46\&quot;}, {\&quot;id\&quot;: \&quot;606f21fa-879f-4dda-a710-31e436046d09\&quot;}, {\&quot;id\&quot;: \&quot;98b83cb9-5273-424f-bbd9-cd0d1b006014\&quot;}]&quot;, &quot;SELECT id, json_view FROM rasmus.link WHERE id_owner = &#39;376d0e62-2438-455a-ada6-b1a188274f38&#39;&quot;]}
14:44:28.160 module=Core.Entity.Graph [debug] got response from transfer: %Postgrex.Result{columns: [&quot;response&quot;], command: :select, connection_id: 7981, messages: [], num_rows: 1, rows: [[%{&quot;nodes&quot; =&gt; [%{&quot;description&quot; =&gt; &quot;process configuration&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;8c99ce4a-cea4-42e5-a991-17b2c34fa8e8&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;otp tree&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/rasmus_app.ex&quot;}, %{&quot;description&quot; =&gt; &quot;cowboy router&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;78a2b625-9116-4e8d-8bf7-b3124d105d73&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;router&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/web/router.ex&quot;}, %{&quot;description&quot; =&gt; &quot;listen to notifications\nfrom database&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;8c8bbb39-7047-4260-95c4-20c0eed6c69b&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;counter&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/counter.ex&quot;}, %{&quot;description&quot; =&gt; &quot;send requests towards\nthe database&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;0c31d9dd-8d39-4536-85b7-0048c58dd872&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;inbound&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/inbound.ex&quot;}, %{&quot;description&quot; =&gt; &quot;execute the\ndatabase manager&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;890b3947-bd9e-4506-8ca5-ded220503f00&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;manager&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex&quot;}, %{&quot;description&quot; =&gt; &quot;react / visjs app&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;71cda2ab-4116-49f9-9dfc-3b08a3462260&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;client&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/lib/core/manager.ex&quot;}, %{&quot;description&quot; =&gt; &quot;database configuration&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;cde93d44-1324-476d-b7ba-1b8a737ef90a&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;configuration&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/tree/master/config&quot;}, %{&quot;description&quot; =&gt; nil, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;aadd3610-c71d-48c2-983a-1c74f8ff4dd0&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;database&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/tree/master/database_scripts&quot;}, %{&quot;description&quot; =&gt; &quot;interface table&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;fcea53b3-81bf-419b-8443-5944fb674c46&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;transfer&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/database_scripts/transfer.sql&quot;}, %{&quot;description&quot; =&gt; &quot;table manipulation\nafter DDL&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;606f21fa-879f-4dda-a710-31e436046d09&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;postcreate&quot;, &quot;url&quot; =&gt; &quot;https://github.com/enter-haken/rasmus/blob/master/database_scripts/postcreate.sql&quot;}, %{&quot;description&quot; =&gt; &quot;generic CREATE, READ\nUPDATE, DELETE\nfunctions&quot;, &quot;entity&quot; =&gt; &quot;link&quot;, &quot;id&quot; =&gt; &quot;98b83cb9-5273-424f-bbd9-cd0d1b006014&quot;, &quot;id_owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;, &quot;is_dirty&quot; =&gt; false, &quot;name&quot; =&gt; &quot;crud&quot;, &quot;url&quot; =&gt; &quot;https: //github.com/enter-haken/rasmus/blob/master/database_scripts/crud.sql&quot;}], &quot;owner&quot; =&gt; &quot;376d0e62-2438-455a-ada6-b1a188274f38&quot;}]]}</code></pre>
<p>(hint: I reseeded the database to get a cleaner log for the <code>link</code> inserts. the <code>id</code>s won’t match with the other log example)</p>
<p>(hint: at the time of writing, the edges are not part of the response.)</p>
<h1 id="next-steps">next steps</h1>
<p>So far so good.</p>
<p>Currently, I am working on the <a href="https://en.wikipedia.org/wiki/Adjacency_list">adjacency lists</a> for rasmus. You can take a look into the <a href="https://github.com/enter-haken/rasmus/blob/master/database_scripts/graph_edge.sql">database scripts</a> for the graph itself, but it is still kind of raw.</p>]]></summary>
</entry>
<entry>
    <title>connect the dots</title>
    <link href="https://enter-haken.github.io/posts/2018-07-23-rasmus-part2.html" />
    <id>https://enter-haken.github.io/posts/2018-07-23-rasmus-part2.html</id>
    <published>2018-07-23T00:00:00Z</published>
    <updated>2018-07-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>A few months ago, I <a href="/posts/2018-02-19-rasmus.html">started a little project</a> named <a href="https://github.com/enter-haken/rasmus">rasmus</a>. It was my plan, to build a competitive CMS, which I can be proud of. During the work on <code>rasmus</code>, I gather a lot of different information. I stored some of them as bookmarks. Weeks later, I stared on my bookmarks, which I’ve partly stored over the years and tried to remember, why I saved these links. Some of the links were so old, that the presented information has become obsolete. I noticed, that the context is missing.</p>
<p>The question is, how to save the context? I took a step back, and started to work on a possible solution for that problem.</p>
<p>On some links, I could remember how I came up with it. I found the missing links via Google and started painting a map. As a result, I got a graph with links as <code>nodes</code> and the context as <code>edges</code>.</p>
<!--more-->
<h1 id="architecture">architecture</h1>
<p>The architecture for <code>rasmus</code> looks like</p>
<div class="figure">
<img src="/images/rasmus_concept.png" />

</div>
<p>The heart of <code>rasmus</code> is its PostgreSQL database. <code>ramsus</code> uses the idea of the <a href="/posts/2017-08-07-database-architecture-part3.html">database gate keeper</a>. Data transformation happens within the database, as long no business logic is required.</p>
<div class="figure">
<img src="/images/rasmus_information_flow.png" />

</div>
<h1 id="backend">backend</h1>
<p>Because of the event driven approach and the desired robustness, I choose <a href="https://elixir-lang.org/">elixir</a> as a backend language. I don’t expect massive number crunching, so I take the road with the Erlang VM.</p>
<p>A famous web framework in the elixir universe is the <a href="https://phoenixframework.org/">phoenix framework</a>. There is a lot of boiler plate and <a href="https://hexdocs.pm/mix/Mix.html">mix</a> tasks involved, so I bootstrap the backend for now and add what is needed.</p>
<p>Phoenix uses <a href="https://ninenines.eu/">cowboy</a> as a web server and so do I. With some suitable <a href="https://hexdocs.pm/plug/readme.html">plugs</a> the configuration is a no brainer.</p>
<p>Within the <a href="https://hexdocs.pm/elixir/Application.html">application behaviour</a> you can define the web server as a child process.</p>
<pre><code>Plug.Adapters.Cowboy2, scheme: :http, plug: Web.Router, options: [port: 8080]</code></pre>
<p>The <code>Web.Router</code> process uses the <a href="https://hexdocs.pm/plug/Plug.Router.html">router plug</a>. You can define the web endpoints of the application here.</p>
<p>There a two ways to access the database</p>
<h2 id="pub-sub-database-access">pub sub database access</h2>
<p>When you want to listen to <a href="https://www.postgresql.org/docs/current/static/sql-notify.html">Postgres notifications</a>, you need to open a channel to the database.</p>
<p>A <a href="https://hexdocs.pm/elixir/GenServer.html">GenServer</a> can look like</p>
<pre><code>defmodule Core.Counter do
  use GenServer

  def start_link(args) do
    GenServer.start_link(__MODULE__, args, name: :listener)
  end

  def init(pg_config) do
    {:ok, pid} = Postgrex.Notifications.start_link(pg_config)
    {:ok, ref} = Postgrex.Notifications.listen(pid, &quot;rasmus&quot;)

    {:ok, {pid, ref }}
  end

  def handle_info({:notification, pid, ref, &quot;rasmus&quot;, payload},_) do
    case Jason.decode(payload) do
     {:ok , %{ &quot;id&quot; =&gt; id, &quot;state&quot; =&gt; &quot;pending&quot;, }} -&gt; Core.Manager.perform(id)

     # additional pattern matches

     _ -&gt; Logger.warn(&quot;got unhandled notification: #{inspect(payload)}&quot;)
    end
    {:noreply, {pid, ref}}
  end

  def handle_info(_, state) do
    Logger.warn(&quot;unhandled info: #{inspect(state)}&quot;)
    {:noreply, state}
  end
end</code></pre>
<p>The notification pattern</p>
<pre><code>{:notification, connection_pid, ref, channel, payload}</code></pre>
<p>can be matched in <code>handle_info/2</code> function, which is defined in the <a href="https://hexdocs.pm/elixir/GenServer.html#c:handle_info/2">GenServer behaviour</a>.</p>
<h2 id="simple-database-access">simple database access</h2>
<p>If you want to access the <code>transfer</code> table of the database, the module looks a little bit different.</p>
<pre><code>defmodule Core.Inbound do
  use GenServer

  # genserver functions

  def start_link(args) do
    GenServer.start_link(__MODULE__, args, name: :inbound_worker)
  end

  def init(pg_config) do
    {:ok, pid} = Postgrex.start_link(pg_config)
    Logger.info(&quot;#{__MODULE__} started.&quot;)

    {:ok, pid}
  end

  def handle_cast({:add, payload}, state) do
    case Postgrex.query(state, &quot;INSERT INTO rasmus.transfer (request) VALUES ($1)&quot;, [payload]) do
      {:ok, result} -&gt; Logger.debug(&quot;added into transfer: #{inspect(result)}&quot;)
      {:error, error} -&gt; Logger.error(&quot;adding into transfer failed: #{inspect(error)}. Tried to add #{inspect(payload)}&quot;)
    end
    {:noreply, state }
  end

  def handle_info(_, state) do
    Logger.warn(&quot;unhandled info: #{inspect(state)}&quot;)
    {:noreply, state}
  end
end</code></pre>
<p>First you define the <code>GenServer</code> callbacks. When you want to use them, you have to send messages to the process.</p>
<pre><code>def add(entity) do
  GenServer.cast(:inbound_worker, {:add, entity})
end</code></pre>
<p>You don’t expect an answer for your add function. When the database is ready, it sends a notification to the listener, that the requested task is done, and that you can fetch the result, if it is wished.</p>
<h1 id="client">client</h1>
<p>The client is responsible for drawing the graph. The library <a href="http://visjs.org/">visjs</a> provides functions for drawing graphs on a canvas element. Drawing graphs is not a trivial thing, so this is the best fit for now.</p>
<p>All other user interaction will be done with a UI library. <a href="https://material-ui.com/">material-ui</a> is a mature UI library based on react. Having a react based application, <a href="https://github.com/facebook/create-react-app">create-react-app</a> will give you a good toolchain.</p>
<h1 id="example">example</h1>
<p>Coming back to the bookmark context problem, I have described some parts of <code>rasmus</code> as links to github.</p>
<div class="figure">
<img src="/images/rasmus_frontend.png" />

</div>
<p>This is just a first throw. If you like the idea, you can test a static <a href="/example/rasmus/alpha/index.html">alpha version</a> of the frontend, to make yourself a picture. You can also checkout the <a href="https://github.com/enter-haken/rasmus">sources</a>, if you like.</p>]]></summary>
</entry>
<entry>
    <title>get in touch with vue</title>
    <link href="https://enter-haken.github.io/posts/2018-03-08-vue.html" />
    <id>https://enter-haken.github.io/posts/2018-03-08-vue.html</id>
    <published>2018-03-08T00:00:00Z</published>
    <updated>2018-03-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’ve been recently asked to build up a little <code>vue</code> example. The task is, to show appointments from a google calendar. I know some <code>react</code> stuff, but the <code>vue</code> framework and the google api was new for me. So I start with some digging.</p>
<p>First things first. The <code>vue</code> example will be a client only solution. As like <code>create-react-app</code>, I use <a href="https://github.com/vuejs/vue-cli">vue-cli</a> to bootstrap my application.</p>
<!--more-->
<h1 id="editor-preparation">editor preparation</h1>
<p>I use vim on a daily base. Editing <code>vue</code> files is similar to editing <code>react</code> files. You can have a mixture of javascript and templates. There is a <a href="https://github.com/posva/vim-vue">vim plugin</a>,</p>
<pre><code>Plugin &#39;posva/vim-vue&#39;</code></pre>
<p>which helps editing <code>vue</code> files. I also update the linter, to get error information from <a href="https://github.com/vim-syntastic/syntastic">syntastic</a></p>
<pre><code> $ npm i -g eslint eslint-plugin-vue</code></pre>
<h1 id="set-up-the-development-stack">set up the development stack</h1>
<p>After installing the vue cli tool,</p>
<pre><code>$ npm install -g @vue/cli</code></pre>
<p>I can bootstrap my <code>appointment</code> application with</p>
<pre><code>$ vue create appointment</code></pre>
<p>A git repo is initialized with the current logged on user credentials.</p>
<p>With</p>
<pre><code>$ npm run build</code></pre>
<p>a minified version of the application is put into the <code>dist</code> folder.</p>
<pre><code>$ npm run serve </code></pre>
<p>will build and run the application on port <code>8080</code>. This will be used during development.</p>
<h1 id="google-api">google api</h1>
<p>To get access to the google calendar, I have to create a project in the <a href="https://console.developers.google.com">google developer console</a>. I need an <code>oauth2 id</code> for my application. The <code>authorized javascript sources</code> must be configured for the <code>oauth2 id</code>. The <a href="https://developers.google.com/google-apps/calendar/quickstart/js">example</a> from the <a href="https://developers.google.com/google-apps/calendar">google api documentation</a> works as expected.</p>
<h1 id="root-component">root component</h1>
<p>The <code>data</code> is stored in <code>eventResult</code>.</p>
<pre><code>data: function() {
    return { eventResult : [] } 
}</code></pre>
<p>The root component will hold the state of <code>appointment</code>.</p>
<pre><code>const CLIENT_ID = process.env.VUE_APP_CLIENT_ID; 
const DISCOVERY_DOCS = [&quot;https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest&quot;];
const SCOPES = &quot;https://www.googleapis.com/auth/calendar.readonly&quot;;</code></pre>
<p>The <code>process.env</code> part will be <a href="https://github.com/vuejs/vue-cli/blob/dev/docs/env.md">replaced</a> during build process with the actual client id. A vue component can have <a href="https://vuejs.org/v2/guide/events.html#Method-Event-Handlers">methods</a>, which are accessible in <a href="https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks">lifecycle hook functions</a></p>
<pre><code>gapiLoad: function() {
  gapi.load(&#39;client:auth2&#39;, this.initClient)
}</code></pre>
<p>will load the client and the oauth part of the google api.</p>
<p>The <code>initClient</code> function is passed with the credentials.</p>
<pre><code>initClient: function() {
  gapi.client.init({
  clientId: CLIENT_ID,
  discoveryDocs: DISCOVERY_DOCS,
  scope: SCOPES
  }).then(() =&gt; { 
      gapi.auth2.getAuthInstance().isSignedIn.listen(this.signedIn);
      // get signed in status on startup
      this.signedIn(gapi.auth2.getAuthInstance().isSignedIn.get());
  })
}</code></pre>
<p>The <code>signedIn</code> function will load the data from the google api,</p>
<pre><code>signedIn: function(isSignedIn) {
    if (isSignedIn) {
        gapi.client.calendar.events.list({
          &#39;calendarId&#39;: &#39;primary&#39;,
          &#39;timeMin&#39;: (new Date().toISOString(),
          &#39;showDeleted&#39;: false,
          &#39;singleEvents&#39;: true,
          &#39;maxResults&#39;: 10,
          &#39;orderBy&#39;: &#39;startTime&#39;
        }).then((response) =&gt; {
          this.eventResult = response.result.items;
        })  
    } else {
        this.eventResult = []; 
    }
} </code></pre>
<p>and stores the result in <code>eventResult</code>.</p>
<p>These functions will be triggered after the component is <a href="https://vuejs.org/v2/api/#mounted">mounted</a>.</p>
<pre><code>mounted: function() {
  this.gapiLoad();
}</code></pre>
<p>At this point the data will be fetched, if the user gives the permission to load data from his primary calendar.</p>
<h1 id="display-component">Display component</h1>
<p>The data for the component will be delivered via <a href="https://vuejs.org/v2/guide/components.html#Props">props</a>. The component it self will be stateless. This means, the component depends only on the props, delivered on start up. When the underlying data changes, the view will rerender.</p>
<p>For the visual, I use <a href="https://vuematerial.io">vue material</a>. The display component will be a simple table with some data from the <a href="https://developers.google.com/google-apps/calendar/v3/reference/events/list">response</a>. For displaying dates, I use <a href="https://momentjs.com">momentjs</a>. I first create a method, to make <code>momentjs</code> accessible within the template.</p>
<pre><code>methods: {
  moment: function () {
    return moment();
  }
}</code></pre>
<p>To reduce the amount of code within the templates, <a href="https://vuejs.org/v2/guide/filters.html#ad">filters</a> can be used.</p>
<pre><code>filters: {
  moment: function (date) {
    if (date) {
      return moment(date).locale(&#39;en&#39;).format(&#39;lll&#39;);
    }
    return &#39;&#39;;
  }
}</code></pre>
<p><code>moment</code> will be called, only when <code>date</code> is not empty.</p>
<p>The resulting template looks like</p>
<pre><code>&lt;template&gt;
  &lt;div&gt;
    &lt;md-table v-model=&quot;gridData&quot; md-card&gt;
      &lt;md-table-toolbar&gt;
        &lt;h1 class=&quot;md-title&quot;&gt;Events&lt;/h1&gt;
      &lt;/md-table-toolbar&gt;

      &lt;md-table-row slot=&quot;md-table-row&quot; slot-scope=&quot;{ item }&quot;&gt;
        &lt;md-table-cell md-label=&quot;Start&quot;&gt;{{ item.start.dateTime | moment }}&lt;/md-table-cell&gt;
        &lt;md-table-cell md-label=&quot;End&quot;&gt;{{ item.end.dateTime | moment }}&lt;/md-table-cell&gt;
        &lt;md-table-cell md-label=&quot;Created&quot;&gt;{{ item.created | moment }}&lt;/md-table-cell&gt;
        &lt;md-table-cell md-label=&quot;Summary&quot;&gt;&lt;a :href=&quot;item.htmlLink&quot; target=&quot;_blank&quot;&gt;{{ item.summary }}&lt;/a&gt;&lt;/md-table-cell&gt;
        &lt;md-table-cell md-label=&quot;Creator&quot;&gt;{{ item.creator.displayName }}&lt;/md-table-cell&gt;
        &lt;md-table-cell md-label=&quot;Organizer&quot;&gt;{{ item.organizer.displayName }}&lt;/md-table-cell&gt;
     &lt;/md-table-row&gt;
    &lt;/md-table&gt;
  &lt;/div&gt;
&lt;/template&gt;</code></pre>
<p>If you like, you can take a look at the <a href="/example/vue/index.html">result</a> and at the <a href="https://github.com/enter-haken/appointment">sources</a>.</p>]]></summary>
</entry>
<entry>
    <title>Alternative content management system approach</title>
    <link href="https://enter-haken.github.io/posts/2018-02-19-rasmus.html" />
    <id>https://enter-haken.github.io/posts/2018-02-19-rasmus.html</id>
    <published>2018-02-19T00:00:00Z</published>
    <updated>2018-02-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>In the last months, I had to manage a bigger Wordpress instance with many plugins installed. It is a kind of mess. Plugins affecting each other. Different look and feel. Different UX. Plugins which must not be plugins, solving caching issues for example. The site <a href="http://www.cms-garden.org/">CMS Garden</a> shows several approaches.</p>
<p>I would like to think of a CMS like an application platform, let’s call it <code>rasmus</code>, where there plugins can be understood as a separate application. Accepting the challenge, I start something new.</p>
<p>At first, let’s start small and build a scaffold for the application platform. You can imagine this like a fast food restaurant.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="593pt" height="500pt"
 viewBox="0.00 0.00 593.00 500.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 496)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-496 589,-496 589,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="8,-301 8,-484 199,-484 199,-301 8,-301"/>
<text text-anchor="middle" x="103.5" y="-468.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">internet</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="211,-91 211,-462 572,-462 572,-91 211,-91"/>
<text text-anchor="middle" x="391.5" y="-446.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">counter</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="#ffffff" stroke="#ffffff" points="219,-354 219,-431 564,-431 564,-354 219,-354"/>
<text text-anchor="middle" x="391.5" y="-415.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">core</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="#ffffff" stroke="#ffffff" points="329.5,-99 329.5,-176 411.5,-176 411.5,-99 329.5,-99"/>
<text text-anchor="middle" x="370.5" y="-160.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">cms</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="#ffffff" stroke="#ffffff" points="317,-184 317,-261 424,-261 424,-184 317,-184"/>
<text text-anchor="middle" x="370.5" y="-245.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">lms</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="#ffffff" stroke="#ffffff" points="317,-269 317,-346 424,-346 424,-269 317,-269"/>
<text text-anchor="middle" x="370.5" y="-330.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">forum</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="444,-8 444,-83 577,-83 577,-8 444,-8"/>
<text text-anchor="middle" x="510.5" y="-15.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">behind the counter</text>
</g>
<!-- client1 -->
<g id="node1" class="node">
<title>client1</title>
<path fill="#ffffff" stroke="#ffffff" d="M79,-453C79,-453 28,-453 28,-453 22,-453 16,-447 16,-441 16,-441 16,-429 16,-429 16,-423 22,-417 28,-417 28,-417 79,-417 79,-417 85,-417 91,-423 91,-429 91,-429 91,-441 91,-441 91,-447 85,-453 79,-453"/>
<text text-anchor="middle" x="53.5" y="-431.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">web client</text>
</g>
<!-- web -->
<g id="node2" class="node">
<title>web</title>
<path fill="#ffffff" stroke="#ffffff" d="M179,-400C179,-400 139,-400 139,-400 133,-400 127,-394 127,-388 127,-388 127,-374 127,-374 127,-368 133,-362 139,-362 139,-362 179,-362 179,-362 185,-362 191,-368 191,-374 191,-374 191,-388 191,-388 191,-394 185,-400 179,-400"/>
<text text-anchor="middle" x="159" y="-384.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">web</text>
<text text-anchor="middle" x="159" y="-369.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">backend</text>
</g>
<!-- client1&#45;&gt;web -->
<g id="edge1" class="edge">
<title>client1&#45;&gt;web</title>
<path fill="none" stroke="#000000" d="M88.9235,-416.8686C98.1776,-412.1318 108.2321,-406.9855 117.7599,-402.1087"/>
<polygon fill="#000000" stroke="#000000" points="119.3832,-405.2097 126.6902,-397.5377 116.1938,-398.9785 119.3832,-405.2097"/>
</g>
<!-- transfer -->
<g id="node5" class="node">
<title>transfer</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M277,-400C277,-400 239,-400 239,-400 233,-400 227,-394 227,-388 227,-388 227,-374 227,-374 227,-368 233,-362 239,-362 239,-362 277,-362 277,-362 283,-362 289,-368 289,-374 289,-374 289,-388 289,-388 289,-394 283,-400 277,-400"/>
<text text-anchor="middle" x="258" y="-384.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">transfer</text>
<text text-anchor="middle" x="258" y="-369.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">table</text>
</g>
<!-- web&#45;&gt;transfer -->
<g id="edge9" class="edge">
<title>web&#45;&gt;transfer</title>
<path fill="none" stroke="#000000" d="M191.1425,-381C199.2506,-381 208.0702,-381 216.5642,-381"/>
<polygon fill="#000000" stroke="#000000" points="216.6939,-384.5001 226.6938,-381 216.6938,-377.5001 216.6939,-384.5001"/>
</g>
<!-- client2 -->
<g id="node3" class="node">
<title>client2</title>
<path fill="#ffffff" stroke="#ffffff" d="M79,-399C79,-399 28,-399 28,-399 22,-399 16,-393 16,-387 16,-387 16,-375 16,-375 16,-369 22,-363 28,-363 28,-363 79,-363 79,-363 85,-363 91,-369 91,-375 91,-375 91,-387 91,-387 91,-393 85,-399 79,-399"/>
<text text-anchor="middle" x="53.5" y="-377.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">web client</text>
</g>
<!-- client2&#45;&gt;web -->
<g id="edge2" class="edge">
<title>client2&#45;&gt;web</title>
<path fill="none" stroke="#000000" d="M91.2899,-381C99.5287,-381 108.2982,-381 116.6993,-381"/>
<polygon fill="#000000" stroke="#000000" points="116.7037,-384.5001 126.7037,-381 116.7036,-377.5001 116.7037,-384.5001"/>
</g>
<!-- client3 -->
<g id="node4" class="node">
<title>client3</title>
<path fill="#ffffff" stroke="#ffffff" d="M79,-345C79,-345 28,-345 28,-345 22,-345 16,-339 16,-333 16,-333 16,-321 16,-321 16,-315 22,-309 28,-309 28,-309 79,-309 79,-309 85,-309 91,-315 91,-321 91,-321 91,-333 91,-333 91,-339 85,-345 79,-345"/>
<text text-anchor="middle" x="53.5" y="-323.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">web client</text>
</g>
<!-- client3&#45;&gt;web -->
<g id="edge3" class="edge">
<title>client3&#45;&gt;web</title>
<path fill="none" stroke="#000000" d="M88.9235,-345.1314C98.1776,-349.8682 108.2321,-355.0145 117.7599,-359.8913"/>
<polygon fill="#000000" stroke="#000000" points="116.1938,-363.0215 126.6902,-364.4623 119.3832,-356.7903 116.1938,-363.0215"/>
</g>
<!-- user -->
<g id="node6" class="node">
<title>user</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M404,-400C404,-400 337,-400 337,-400 331,-400 325,-394 325,-388 325,-388 325,-374 325,-374 325,-368 331,-362 337,-362 337,-362 404,-362 404,-362 410,-362 416,-368 416,-374 416,-374 416,-388 416,-388 416,-394 410,-400 404,-400"/>
<text text-anchor="middle" x="370.5" y="-384.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">user</text>
<text text-anchor="middle" x="370.5" y="-369.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">management</text>
</g>
<!-- transfer&#45;&gt;user -->
<g id="edge4" class="edge">
<title>transfer&#45;&gt;user</title>
<path fill="none" stroke="#000000" d="M289.0389,-381C296.9857,-381 305.779,-381 314.5621,-381"/>
<polygon fill="#000000" stroke="#000000" points="314.8167,-384.5001 324.8167,-381 314.8167,-377.5001 314.8167,-384.5001"/>
</g>
<!-- content -->
<g id="node8" class="node">
<title>content</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M391.5,-145C391.5,-145 349.5,-145 349.5,-145 343.5,-145 337.5,-139 337.5,-133 337.5,-133 337.5,-119 337.5,-119 337.5,-113 343.5,-107 349.5,-107 349.5,-107 391.5,-107 391.5,-107 397.5,-107 403.5,-113 403.5,-119 403.5,-119 403.5,-133 403.5,-133 403.5,-139 397.5,-145 391.5,-145"/>
<text text-anchor="middle" x="370.5" y="-129.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">content</text>
<text text-anchor="middle" x="370.5" y="-114.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">relations</text>
</g>
<!-- transfer&#45;&gt;content -->
<g id="edge6" class="edge">
<title>transfer&#45;&gt;content</title>
<path fill="none" stroke="#000000" d="M260.4375,-361.7455C265.8283,-324.4288 281.2346,-240.6061 317,-180 322.9054,-169.993 331.0772,-160.4818 339.2579,-152.3091"/>
<polygon fill="#000000" stroke="#000000" points="341.887,-154.6383 346.7085,-145.2041 337.0561,-149.5724 341.887,-154.6383"/>
</g>
<!-- lms -->
<g id="node9" class="node">
<title>lms</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M404,-230C404,-230 337,-230 337,-230 331,-230 325,-224 325,-218 325,-218 325,-204 325,-204 325,-198 331,-192 337,-192 337,-192 404,-192 404,-192 410,-192 416,-198 416,-204 416,-204 416,-218 416,-218 416,-224 410,-230 404,-230"/>
<text text-anchor="middle" x="370.5" y="-214.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">lms</text>
<text text-anchor="middle" x="370.5" y="-199.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">management</text>
</g>
<!-- transfer&#45;&gt;lms -->
<g id="edge7" class="edge">
<title>transfer&#45;&gt;lms</title>
<path fill="none" stroke="#000000" d="M265.5374,-361.9031C275.4315,-338.0369 294.242,-296.5012 317,-265 324.0533,-255.237 332.8772,-245.5719 341.3128,-237.1757"/>
<polygon fill="#000000" stroke="#000000" points="343.8179,-239.622 348.5716,-230.1534 338.9508,-234.5909 343.8179,-239.622"/>
</g>
<!-- forum -->
<g id="node10" class="node">
<title>forum</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M404,-315C404,-315 337,-315 337,-315 331,-315 325,-309 325,-303 325,-303 325,-289 325,-289 325,-283 331,-277 337,-277 337,-277 404,-277 404,-277 410,-277 416,-283 416,-289 416,-289 416,-303 416,-303 416,-309 410,-315 404,-315"/>
<text text-anchor="middle" x="370.5" y="-299.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">forum</text>
<text text-anchor="middle" x="370.5" y="-284.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">management</text>
</g>
<!-- transfer&#45;&gt;forum -->
<g id="edge8" class="edge">
<title>transfer&#45;&gt;forum</title>
<path fill="none" stroke="#000000" d="M283.2472,-361.9243C299.1696,-349.8941 319.9117,-334.2223 337.177,-321.1774"/>
<polygon fill="#000000" stroke="#000000" points="339.4683,-323.8329 345.3371,-315.012 335.2484,-318.2478 339.4683,-323.8329"/>
</g>
<!-- role -->
<g id="node7" class="node">
<title>role</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M544,-400C544,-400 477,-400 477,-400 471,-400 465,-394 465,-388 465,-388 465,-374 465,-374 465,-368 471,-362 477,-362 477,-362 544,-362 544,-362 550,-362 556,-368 556,-374 556,-374 556,-388 556,-388 556,-394 550,-400 544,-400"/>
<text text-anchor="middle" x="510.5" y="-384.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">role</text>
<text text-anchor="middle" x="510.5" y="-369.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">management</text>
</g>
<!-- user&#45;&gt;role -->
<g id="edge5" class="edge">
<title>user&#45;&gt;role</title>
<path fill="none" stroke="#000000" d="M416.3412,-381C428.4277,-381 441.6095,-381 454.1789,-381"/>
<polygon fill="#000000" stroke="#000000" points="454.5558,-384.5001 464.5558,-381 454.5557,-377.5001 454.5558,-384.5001"/>
</g>
<!-- bl -->
<g id="node11" class="node">
<title>bl</title>
<path fill="#ffffff" stroke="#ffffff" d="M557,-75C557,-75 464,-75 464,-75 458,-75 452,-69 452,-63 452,-63 452,-51 452,-51 452,-45 458,-39 464,-39 464,-39 557,-39 557,-39 563,-39 569,-45 569,-51 569,-51 569,-63 569,-63 569,-69 563,-75 557,-75"/>
<text text-anchor="middle" x="510.5" y="-53.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">database backend</text>
</g>
<!-- content&#45;&gt;bl -->
<g id="edge10" class="edge">
<title>content&#45;&gt;bl</title>
<path fill="none" stroke="#000000" d="M403.678,-109.648C421.8271,-100.7031 444.5928,-89.4828 464.4395,-79.7012"/>
<polygon fill="#000000" stroke="#000000" points="466.1969,-82.7371 473.6194,-75.1769 463.1023,-76.4583 466.1969,-82.7371"/>
</g>
<!-- lms&#45;&gt;bl -->
<g id="edge11" class="edge">
<title>lms&#45;&gt;bl</title>
<path fill="none" stroke="#000000" d="M408.2084,-191.9606C413.7881,-188.3642 419.2503,-184.3503 424,-180 454.8258,-151.7669 480.9304,-110.7322 496.1602,-83.9553"/>
<polygon fill="#000000" stroke="#000000" points="499.2718,-85.5618 501.0836,-75.123 493.1575,-82.1535 499.2718,-85.5618"/>
</g>
<!-- forum&#45;&gt;bl -->
<g id="edge12" class="edge">
<title>forum&#45;&gt;bl</title>
<path fill="none" stroke="#000000" d="M410.4539,-276.8879C415.4181,-273.4019 420.1075,-269.4393 424,-265 471.164,-211.2113 495.0905,-128.0961 504.9076,-85.0248"/>
<polygon fill="#000000" stroke="#000000" points="508.3331,-85.7437 507.0533,-75.2264 501.4951,-84.2462 508.3331,-85.7437"/>
</g>
</g>
</svg>
</div>
<p>You put your request at the <code>counter</code> and behind the <code>counter</code> the magic happens. The worker behind the <code>counter</code> must not know how a burger is made, and how many fries must be in a fryer. He sees the current orders on a screen, and put the meals together, when the separate parts are ready. When the order is ready, the customer can be served.</p>
<!--more-->
<h1 id="architectural-overview">Architectural overview</h1>
<p>As you can see the database take a place in the middle.</p>
<p>As mentioned in the <a href="/posts/2017-08-07-database-architecture-part3.html">database architecture series</a> the <code>web backend</code> can put a request in the database <code>transfer</code> table. This is the only table, which can be accessed by the <code>web backend</code>. After a request is processed, the result is put back into the <code>transfer</code> entity. The database sends a <a href="https://www.postgresql.org/docs/current/static/sql-notify.html">notification</a> to the <code>web backend</code>, which can pull the response from the database. This represents a very thin interface to database. This approach leads to less security issues, because more database related functions are hidden from the <code>web backend</code>.</p>
<h1 id="the-database">The database</h1>
<p>Every application’s heart is it’s database. <code>rasmus</code> is no exception. An <code>rasmus</code> application has it’s own schema within the database. The schemes look as following.</p>
<h2 id="the-core">The core</h2>
<p>The different <code>rasmus</code> applications share a <code>core</code>. Here you can find functions, used across all applications, like user and role management.</p>
<p>First start with a simple user / role management approach.</p>
<pre><code>CREATE TABLE user_account(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    first_name VARCHAR(254),
    last_name VARCHAR(254),
    email_address VARCHAR(254),
    password VARCHAR(254),
    login VARCHAR(254),
    signature VARCHAR(254)
);</code></pre>
<p>For the time being, we store the <code>password</code> with the user. This field can be moved later on, when different authorization methods will be introduced.</p>
<p>Starting with a simple role definition,</p>
<pre><code>CREATE TYPE role_level AS ENUM (&#39;admin&#39;,&#39;user&#39;,&#39;guest&#39;);

CREATE TABLE role(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(254) NOT NULL,
    description VARCHAR(254),
    role_level role_level NOT NULL DEFAULT &#39;guest&#39;
);</code></pre>
<p><code>user</code>s can have several roles.</p>
<pre><code>CREATE TABLE user_in_role(
    id_user_account UUID NOT NULL REFERENCES user_account(id),
    id_role UUID NOT NULL REFERENCES role(id),
    PRIMARY KEY(id_user_account, id_role)
);</code></pre>
<p>Every part of an <code>rasmus</code> application can be associated with a <code>privilege</code></p>
<pre><code>CREATE TABLE privilege(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(80),
    description VARCHAR(254)
);</code></pre>
<p>Each <code>privilege</code> can be assigned to a <code>role</code>.</p>
<pre><code>CREATE TABLE role_privilege(
    id_role UUID NOT NULL REFERENCES role(id),
    id_privilege UUID NOT NULL REFERENCES privilege(id),
    PRIMARY KEY (id_role, id_privilege)
);</code></pre>
<p>These are the minimal relations for user and role management storage.</p>
<h2 id="transfer">transfer</h2>
<p>The <code>transfer</code> relation is located in the <code>core</code> schema. It uses the following state definitions.</p>
<pre><code>CREATE TYPE transfer_status as ENUM (
    &#39;pending&#39;,
    &#39;processing&#39;,
    &#39;succeeded&#39;,
    &#39;succeeded_with_warning&#39;,
    &#39;error&#39;
);</code></pre>
<p>This is not carved into stone. It will fit the first requirements to a stateful exchange between the <code>web backend</code> and the database.</p>
<p>The <code>transfer</code> relation itself looks like</p>
<pre><code>CREATE TABLE transfer(
	id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    status transfer_status NOT NULL DEFAULT &#39;pending&#39;,
    request JSONB NOT NULL,
    result JSONB
);</code></pre>
<p>Per default, every request is a <code>pending</code> request. A <code>transfer</code> entity must have at least a request body.</p>
<p>At this point conventions have to be made. A request must contain</p>
<ul>
<li>a <code>schema</code> field</li>
<li>the name of the <code>entity</code></li>
<li>the actual <code>payload</code></li>
<li>and the <code>action</code> to perform.</li>
</ul>
<p>After a request is inserted into <code>transfer</code>,</p>
<pre><code>CREATE FUNCTION transfer_trigger() RETURNS TRIGGER AS $$
BEGIN 
    PERFORM pg_notify(NEW.request-&gt;&gt;&#39;schema&#39;,NEW.id); 
    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER transfer_before_trigger BEFORE INSERT ON transfer
    FOR EACH ROW EXECUTE PROCEDURE transfer_trigger();</code></pre>
<p>a notification is send to the <code>database backend</code>. Pattern matching is used to find the right addressee for the request. A closer look has to be made, to decide, which operation must be done inside the database, to prevent multiple round trips.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="276pt" height="46pt"
 viewBox="0.00 0.00 276.00 46.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 42)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-42 272,-42 272,4 -4,4"/>
<!-- web -->
<g id="node1" class="node">
<title>web</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M52,-38C52,-38 12,-38 12,-38 6,-38 0,-32 0,-26 0,-26 0,-12 0,-12 0,-6 6,0 12,0 12,0 52,0 52,0 58,0 64,-6 64,-12 64,-12 64,-26 64,-26 64,-32 58,-38 52,-38"/>
<text text-anchor="middle" x="32" y="-22.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">web</text>
<text text-anchor="middle" x="32" y="-7.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">backend</text>
</g>
<!-- database -->
<g id="node2" class="node">
<title>database</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M154,-37C154,-37 112,-37 112,-37 106,-37 100,-31 100,-25 100,-25 100,-13 100,-13 100,-7 106,-1 112,-1 112,-1 154,-1 154,-1 160,-1 166,-7 166,-13 166,-13 166,-25 166,-25 166,-31 160,-37 154,-37"/>
<text text-anchor="middle" x="133" y="-15.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">database</text>
</g>
<!-- web&#45;&gt;database -->
<g id="edge1" class="edge">
<title>web&#45;&gt;database</title>
<path fill="none" stroke="#000000" d="M64.2347,-12.6588C72.2792,-12.2832 81.0383,-12.1664 89.5273,-12.3084"/>
<polygon fill="#000000" stroke="#000000" points="89.5822,-15.8115 99.6817,-12.61 89.7901,-8.8146 89.5822,-15.8115"/>
</g>
<!-- database&#45;&gt;web -->
<g id="edge4" class="edge">
<title>database&#45;&gt;web</title>
<path fill="none" stroke="#000000" d="M99.6817,-25.39C91.5753,-25.7425 82.7983,-25.8361 74.3355,-25.671"/>
<polygon fill="#000000" stroke="#000000" points="74.3436,-22.1695 64.2347,-25.3412 74.1152,-29.1657 74.3436,-22.1695"/>
</g>
<!-- bl -->
<g id="node3" class="node">
<title>bl</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M256,-38C256,-38 214,-38 214,-38 208,-38 202,-32 202,-26 202,-26 202,-12 202,-12 202,-6 208,0 214,0 214,0 256,0 256,0 262,0 268,-6 268,-12 268,-12 268,-26 268,-26 268,-32 262,-38 256,-38"/>
<text text-anchor="middle" x="235" y="-22.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">database</text>
<text text-anchor="middle" x="235" y="-7.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">backend</text>
</g>
<!-- database&#45;&gt;bl -->
<g id="edge2" class="edge">
<title>database&#45;&gt;bl</title>
<path fill="none" stroke="#000000" d="M166.1165,-12.6333C174.2222,-12.2719 183.018,-12.1661 191.5279,-12.3158"/>
<polygon fill="#000000" stroke="#000000" points="191.5988,-15.8195 201.7006,-12.6251 191.8117,-8.8227 191.5988,-15.8195"/>
</g>
<!-- bl&#45;&gt;database -->
<g id="edge3" class="edge">
<title>bl&#45;&gt;database</title>
<path fill="none" stroke="#000000" d="M201.7006,-25.3749C193.5846,-25.7324 184.7858,-25.8344 176.2803,-25.6808"/>
<polygon fill="#000000" stroke="#000000" points="176.2198,-22.1773 166.1165,-25.3667 176.0036,-29.174 176.2198,-22.1773"/>
</g>
</g>
</svg>
</div>
<p>As said before, the business logic is completely separated from the <code>web backend</code>.</p>
<h2 id="cms">cms</h2>
<p>A cms starts with an <code>article</code>.</p>
<pre><code>CREATE TABLE article(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_author UUID NOT NULL REFERENCES core.user_account(id),
    title VARCHAR(254),
    raw text,
    html text,
    is_visible boolean NOT NULL DEFAULT FALSE,
    is_draft boolean NOT NULL DEFAULT TRUE
);</code></pre>
<p>The <code>author</code> lives in the <code>core</code> namespace, and can be used inside the <code>cms</code> schema. The <code>raw</code> text is markdown based, the <code>html</code> is the generated result. A new <code>article</code> is per default invisible and in draft mode.</p>
<p>Before uploading <code>attachment</code>s to the database, the <code>file_type</code> has to be set.</p>
<pre><code>CREATE TYPE file_type AS ENUM (
    &#39;binary&#39;,
    &#39;jpeg&#39;,
    &#39;png&#39;,
    &#39;mp3&#39;,
    &#39;mp4&#39;,
    &#39;mkv&#39;
);

CREATE TABLE attachment(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    raw bytea NOT NULL,
    file_type file_type NOT NULL DEFAULT &#39;binary&#39;
);</code></pre>
<p>As for now, the binary content is stored within the database.</p>
<p>Every <code>article</code> can have multiple attachments.</p>
<pre><code>CREATE TABLE article_attachment(
    id_article UUID NOT NULL REFERENCES article(id),
    id_attachment UUID NOT NULL REFERENCES attachment(id),
    PRIMARY KEY(id_article, id_attachment)
);</code></pre>
<p>The <code>attachment</code>s can be addressed within the <code>article</code>s markdown content.</p>
<p>The <code>cms</code> provides a tree of <code>category</code>s.</p>
<pre><code>CREATE TABLE category(
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(254) NOT NULL,
    description VARCHAR(512),
    icon VARCHAR(1), -- font awesome
    is_active BOOLEAN NOT NULL DEFAULT false,
    is_visible BOOLEAN NOT NULL DEFAULT false,
    LNUM INTEGER NOT NULL,
    RNUM INTEGER NOT NULL
);</code></pre>
<p>The tree is described as a <a href="https://en.wikipedia.org/wiki/Nested_set_model">nested set</a>.</p>
<p>An <code>article</code> can be assigned to multiple <code>categories</code>.</p>
<pre><code>CREATE TABLE article_in_category(
    id_article UUID NOT NULL REFERENCES article(id),
    id_category UUID NOT NULL REFERENCES category(id),
    PRIMARY KEY(id_article, id_category)
);</code></pre>
<h1 id="backend">backend</h1>
<p>Having set up the database, it comes for choosing the technology for the backend. There are several possibilities choosing the ‘right’ backend technology.</p>
<p>This will be covered with the next article.</p>
<p>Fell free to browse through the <a href="https://github.com/enter-haken/rasmus">sources</a>.</p>]]></summary>
</entry>
<entry>
    <title>A database gate keeper</title>
    <link href="https://enter-haken.github.io/posts/2017-08-07-database-architecture-part3.html" />
    <id>https://enter-haken.github.io/posts/2017-08-07-database-architecture-part3.html</id>
    <published>2017-08-07T00:00:00Z</published>
    <updated>2017-08-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>After <a href="/posts/2017-07-15-database-architecture-part2.html">working with some entities</a> it comes the question, how to get the data inside and outside the database. There is no need, that other parts of an application need to now, how the data is organized in relations. One possible way of hiding the inner database structure is to create a kind of transfer table.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="669pt" height="242pt"
 viewBox="0.00 0.00 669.00 242.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 238)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-238 665,-238 665,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="0,-59 0,-136 161,-136 161,-59 0,-59"/>
<text text-anchor="middle" x="80.5" y="-120.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">some kind of middleware</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="181,-8 181,-226 653,-226 653,-8 181,-8"/>
<text text-anchor="middle" x="417" y="-210.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">PostgreSQL</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="#ffffff" stroke="#ffffff" points="279,-16 279,-195 645,-195 645,-16 279,-16"/>
<text text-anchor="middle" x="462" y="-179.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">relational</text>
<text text-anchor="middle" x="462" y="-164.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">data</text>
</g>
<!-- mwnode -->
<g id="node1" class="node">
<title>mwnode</title>
<path fill="#ffffff" stroke="#ffffff" d="M110,-105C110,-105 51,-105 51,-105 45,-105 39,-99 39,-93 39,-93 39,-79 39,-79 39,-73 45,-67 51,-67 51,-67 110,-67 110,-67 116,-67 122,-73 122,-79 122,-79 122,-93 122,-93 122,-99 116,-105 110,-105"/>
<text text-anchor="middle" x="80.5" y="-89.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">middleware</text>
<text text-anchor="middle" x="80.5" y="-74.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">node</text>
</g>
<!-- transfer -->
<g id="node8" class="node">
<title>transfer</title>
<path fill="#ffffff" stroke="#ffffff" d="M239,-105C239,-105 201,-105 201,-105 195,-105 189,-99 189,-93 189,-93 189,-79 189,-79 189,-73 195,-67 201,-67 201,-67 239,-67 239,-67 245,-67 251,-73 251,-79 251,-79 251,-93 251,-93 251,-99 245,-105 239,-105"/>
<text text-anchor="middle" x="220" y="-89.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">transfer</text>
<text text-anchor="middle" x="220" y="-74.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">table</text>
</g>
<!-- mwnode&#45;&gt;transfer -->
<g id="edge6" class="edge">
<title>mwnode&#45;&gt;transfer</title>
<path fill="none" stroke="#000000" d="M122.3546,-86C140.2001,-86 160.9623,-86 178.7419,-86"/>
<polygon fill="#000000" stroke="#000000" points="178.8211,-89.5001 188.821,-86 178.821,-82.5001 178.8211,-89.5001"/>
</g>
<!-- customer -->
<g id="node2" class="node">
<title>customer</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M344,-104C344,-104 299,-104 299,-104 293,-104 287,-98 287,-92 287,-92 287,-80 287,-80 287,-74 293,-68 299,-68 299,-68 344,-68 344,-68 350,-68 356,-74 356,-80 356,-80 356,-92 356,-92 356,-98 350,-104 344,-104"/>
<text text-anchor="middle" x="321.5" y="-82.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">customer</text>
</g>
<!-- person -->
<g id="node3" class="node">
<title>person</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M435,-104C435,-104 404,-104 404,-104 398,-104 392,-98 392,-92 392,-92 392,-80 392,-80 392,-74 398,-68 404,-68 404,-68 435,-68 435,-68 441,-68 447,-74 447,-80 447,-80 447,-92 447,-92 447,-98 441,-104 435,-104"/>
<text text-anchor="middle" x="419.5" y="-82.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">person</text>
</g>
<!-- customer&#45;&gt;person -->
<g id="edge1" class="edge">
<title>customer&#45;&gt;person</title>
<path fill="none" stroke="#000000" d="M356.0511,-86C364.2655,-86 373.0749,-86 381.4365,-86"/>
<polygon fill="#000000" stroke="#000000" points="381.71,-89.5001 391.7099,-86 381.7099,-82.5001 381.71,-89.5001"/>
</g>
<!-- p2p -->
<g id="node4" class="node">
<title>p2p</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M528,-77.5C528,-77.5 497,-77.5 497,-77.5 491,-77.5 485,-71.5 485,-65.5 485,-65.5 485,-36.5 485,-36.5 485,-30.5 491,-24.5 497,-24.5 497,-24.5 528,-24.5 528,-24.5 534,-24.5 540,-30.5 540,-36.5 540,-36.5 540,-65.5 540,-65.5 540,-71.5 534,-77.5 528,-77.5"/>
<text text-anchor="middle" x="512.5" y="-62.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">person</text>
<text text-anchor="middle" x="512.5" y="-47.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">to</text>
<text text-anchor="middle" x="512.5" y="-32.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">phone</text>
</g>
<!-- person&#45;&gt;p2p -->
<g id="edge2" class="edge">
<title>person&#45;&gt;p2p</title>
<path fill="none" stroke="#000000" d="M447.1513,-75.5936C455.9733,-72.2735 465.8848,-68.5433 475.2711,-65.0109"/>
<polygon fill="#000000" stroke="#000000" points="476.6683,-68.2248 484.7947,-61.4267 474.2027,-61.6734 476.6683,-68.2248"/>
</g>
<!-- p2a -->
<g id="node6" class="node">
<title>p2a</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M530,-148.5C530,-148.5 495,-148.5 495,-148.5 489,-148.5 483,-142.5 483,-136.5 483,-136.5 483,-107.5 483,-107.5 483,-101.5 489,-95.5 495,-95.5 495,-95.5 530,-95.5 530,-95.5 536,-95.5 542,-101.5 542,-107.5 542,-107.5 542,-136.5 542,-136.5 542,-142.5 536,-148.5 530,-148.5"/>
<text text-anchor="middle" x="512.5" y="-133.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">person</text>
<text text-anchor="middle" x="512.5" y="-118.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">to</text>
<text text-anchor="middle" x="512.5" y="-103.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">address</text>
</g>
<!-- person&#45;&gt;p2a -->
<g id="edge4" class="edge">
<title>person&#45;&gt;p2a</title>
<path fill="none" stroke="#000000" d="M447.1513,-96.7037C455.4086,-99.9001 464.6204,-103.466 473.4626,-106.8887"/>
<polygon fill="#000000" stroke="#000000" points="472.2603,-110.1764 482.8495,-110.5224 474.7873,-103.6484 472.2603,-110.1764"/>
</g>
<!-- phone -->
<g id="node5" class="node">
<title>phone</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M622.5,-69C622.5,-69 592.5,-69 592.5,-69 586.5,-69 580.5,-63 580.5,-57 580.5,-57 580.5,-45 580.5,-45 580.5,-39 586.5,-33 592.5,-33 592.5,-33 622.5,-33 622.5,-33 628.5,-33 634.5,-39 634.5,-45 634.5,-45 634.5,-57 634.5,-57 634.5,-63 628.5,-69 622.5,-69"/>
<text text-anchor="middle" x="607.5" y="-47.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">phone</text>
</g>
<!-- p2p&#45;&gt;phone -->
<g id="edge3" class="edge">
<title>p2p&#45;&gt;phone</title>
<path fill="none" stroke="#000000" d="M540.2333,-51C549.5822,-51 560.1744,-51 570.1417,-51"/>
<polygon fill="#000000" stroke="#000000" points="570.2242,-54.5001 580.2241,-51 570.2241,-47.5001 570.2242,-54.5001"/>
</g>
<!-- address -->
<g id="node7" class="node">
<title>address</title>
<path fill="#d3d3d3" stroke="#d3d3d3" d="M625,-140C625,-140 590,-140 590,-140 584,-140 578,-134 578,-128 578,-128 578,-116 578,-116 578,-110 584,-104 590,-104 590,-104 625,-104 625,-104 631,-104 637,-110 637,-116 637,-116 637,-128 637,-128 637,-134 631,-140 625,-140"/>
<text text-anchor="middle" x="607.5" y="-118.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">address</text>
</g>
<!-- p2a&#45;&gt;address -->
<g id="edge5" class="edge">
<title>p2a&#45;&gt;address</title>
<path fill="none" stroke="#000000" d="M542.0378,-122C550.1697,-122 559.1252,-122 567.7327,-122"/>
<polygon fill="#000000" stroke="#000000" points="567.9805,-125.5001 577.9804,-122 567.9804,-118.5001 567.9805,-125.5001"/>
</g>
<!-- transfer&#45;&gt;customer -->
<g id="edge7" class="edge">
<title>transfer&#45;&gt;customer</title>
<path fill="none" stroke="#000000" d="M251.0049,-86C259.134,-86 268.0639,-86 276.7554,-86"/>
<polygon fill="#000000" stroke="#000000" points="276.7869,-89.5001 286.7869,-86 276.7868,-82.5001 276.7869,-89.5001"/>
</g>
</g>
</svg>
</div>
<p>This table is a kind of a gate keeper. Only this table should be used to communicate with he outside world. Maybe this sounds a little bit weird for a moment, but let me show you my idea.</p>
<!--more-->
<p>First we have to know, which entities can be used by the middleware.</p>
<pre><code>CREATE TYPE entity AS ENUM (
    &#39;employee&#39;,
    &#39;customer&#39;,
    &#39;purchase_order&#39;,
    &#39;article&#39;,
    &#39;price&#39;
);</code></pre>
<p>These are <a href="/posts/2017-07-15-database-architecture-part2.html">previously</a> used examples.</p>
<pre><code>CREATE TYPE transfer_status AS ENUM (
    &#39;pending&#39;,
    &#39;processing&#39;,
    &#39;succeeded&#39;,
    &#39;succeeded_with_warning&#39;,
    &#39;error&#39;
);</code></pre>
<p>The requested process can have a state.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="324pt" height="225pt"
 viewBox="0.00 0.00 324.00 225.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 221)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-221 320,-221 320,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="8,-62 8,-137 86,-137 86,-62 8,-62"/>
<text text-anchor="middle" x="47" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">request</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="106,-62 106,-167 199,-167 199,-62 106,-62"/>
<text text-anchor="middle" x="152.5" y="-151.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">server</text>
<text text-anchor="middle" x="152.5" y="-136.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">internal</text>
<text text-anchor="middle" x="152.5" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">processing</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="219,-8 219,-209 308,-209 308,-8 219,-8"/>
<text text-anchor="middle" x="263.5" y="-193.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">result</text>
</g>
<!-- pending -->
<g id="node1" class="node">
<title>pending</title>
<path fill="#ffffff" stroke="#ffffff" d="M66,-106C66,-106 28,-106 28,-106 22,-106 16,-100 16,-94 16,-94 16,-82 16,-82 16,-76 22,-70 28,-70 28,-70 66,-70 66,-70 72,-70 78,-76 78,-82 78,-82 78,-94 78,-94 78,-100 72,-106 66,-106"/>
<text text-anchor="middle" x="47" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">pending</text>
</g>
<!-- processing -->
<g id="node2" class="node">
<title>processing</title>
<path fill="#ffffff" stroke="#ffffff" d="M179,-106C179,-106 126,-106 126,-106 120,-106 114,-100 114,-94 114,-94 114,-82 114,-82 114,-76 120,-70 126,-70 126,-70 179,-70 179,-70 185,-70 191,-76 191,-82 191,-82 191,-94 191,-94 191,-100 185,-106 179,-106"/>
<text text-anchor="middle" x="152.5" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">processing</text>
</g>
<!-- pending&#45;&gt;processing -->
<g id="edge1" class="edge">
<title>pending&#45;&gt;processing</title>
<path fill="none" stroke="#000000" d="M78.0829,-88C86.1212,-88 94.9719,-88 103.6791,-88"/>
<polygon fill="#000000" stroke="#000000" points="103.7774,-91.5001 113.7774,-88 103.7773,-84.5001 103.7774,-91.5001"/>
</g>
<!-- succeeded_with_warning -->
<g id="node3" class="node">
<title>succeeded_with_warning</title>
<path fill="#ffffff" stroke="#ffffff" d="M285,-177.5C285,-177.5 242,-177.5 242,-177.5 236,-177.5 230,-171.5 230,-165.5 230,-165.5 230,-136.5 230,-136.5 230,-130.5 236,-124.5 242,-124.5 242,-124.5 285,-124.5 285,-124.5 291,-124.5 297,-130.5 297,-136.5 297,-136.5 297,-165.5 297,-165.5 297,-171.5 291,-177.5 285,-177.5"/>
<text text-anchor="middle" x="263.5" y="-162.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">succeded</text>
<text text-anchor="middle" x="263.5" y="-147.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">with</text>
<text text-anchor="middle" x="263.5" y="-132.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">warning</text>
</g>
<!-- processing&#45;&gt;succeeded_with_warning -->
<g id="edge2" class="edge">
<title>processing&#45;&gt;succeeded_with_warning</title>
<path fill="none" stroke="#000000" d="M184.3081,-106.0533C195.6413,-112.4856 208.597,-119.8389 220.7011,-126.7087"/>
<polygon fill="#000000" stroke="#000000" points="219.3256,-129.9525 229.7501,-131.8447 222.7809,-123.8647 219.3256,-129.9525"/>
</g>
<!-- succeeded -->
<g id="node4" class="node">
<title>succeeded</title>
<path fill="#ffffff" stroke="#ffffff" d="M288,-106C288,-106 239,-106 239,-106 233,-106 227,-100 227,-94 227,-94 227,-82 227,-82 227,-76 233,-70 239,-70 239,-70 288,-70 288,-70 294,-70 300,-76 300,-82 300,-82 300,-94 300,-94 300,-100 294,-106 288,-106"/>
<text text-anchor="middle" x="263.5" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">succeeded</text>
</g>
<!-- processing&#45;&gt;succeeded -->
<g id="edge3" class="edge">
<title>processing&#45;&gt;succeeded</title>
<path fill="none" stroke="#000000" d="M191.0109,-88C199.2909,-88 208.1292,-88 216.6852,-88"/>
<polygon fill="#000000" stroke="#000000" points="216.925,-91.5001 226.925,-88 216.925,-84.5001 216.925,-91.5001"/>
</g>
<!-- error -->
<g id="node5" class="node">
<title>error</title>
<path fill="#ffffff" stroke="#ffffff" d="M278.5,-52C278.5,-52 248.5,-52 248.5,-52 242.5,-52 236.5,-46 236.5,-40 236.5,-40 236.5,-28 236.5,-28 236.5,-22 242.5,-16 248.5,-16 248.5,-16 278.5,-16 278.5,-16 284.5,-16 290.5,-22 290.5,-28 290.5,-28 290.5,-40 290.5,-40 290.5,-46 284.5,-52 278.5,-52"/>
<text text-anchor="middle" x="263.5" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">error</text>
</g>
<!-- processing&#45;&gt;error -->
<g id="edge4" class="edge">
<title>processing&#45;&gt;error</title>
<path fill="none" stroke="#000000" d="M189.7702,-69.8686C201.7967,-64.0178 215.1081,-57.542 227.073,-51.7212"/>
<polygon fill="#000000" stroke="#000000" points="228.8685,-54.74 236.3297,-47.218 225.8062,-48.4454 228.8685,-54.74"/>
</g>
</g>
</svg>
</div>
<p>For the start, the transfer table has some kind of <code>request</code> and some kind of <code>response</code>.</p>
<pre><code>CREATE TABLE transfer (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    status transfer_status NOT NULL DEFAULT &#39;pending&#39;,
    request JSONB NOT NULL,
    result JSONB
);</code></pre>
<p>A simple insert like</p>
<pre><code>INSERT INTO transfer (request) 
    VALUES (&#39;{&quot;some_data&quot; : &quot;values&quot;}&#39;::JSONB);</code></pre>
<p>should be enough, to communicate with the database.</p>
<p>Now it is time to fill this <code>request</code> object with life. First we define some keys, which are mandatory for every request.</p>
<ul>
<li>The <code>entity</code> key defines the entity known to the database. (e.g. <code>customer</code> or <code>purchase_order</code>)</li>
<li>The <code>payload</code> is the actual data</li>
<li>The <code>action</code> key tells the database, what to do with the <code>payload</code>. Valid actions for now are <code>select</code>, <code>upsert</code> and <code>delete</code></li>
</ul>
<p>The trigger function is the entry point for every data access.</p>
<pre><code>CREATE FUNCTION transfer_trigger_function() RETURNS TRIGGER AS $$
DECLARE
BEGIN
    CASE NEW.request-&gt;&gt;&#39;entity&#39;
        WHEN &#39;customer&#39; THEN
            SELECT customer_manager(NEW.id, NEW.request) INTO NEW.response;
        ELSE
            RAISE EXCEPTION &#39;not a valid entity&#39;;
    END CASE;
    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER transfer_after_trigger BEFORE INSERT ON transfer
    FOR EACH ROW EXECUTE PROCEDURE transfer_trigger_function();</code></pre>
<p>As you can see, you can access the <code>request</code> data from within the trigger function via <a href="https://www.postgresql.org/docs/current/static/functions-json.html">build in json functions</a>.</p>
<p>There shouldn’t be much logic in the transfer trigger. The entity managers should do the “hard work”.</p>
<p>Due to this is a trigger function, you should be aware of nesting functions too much. You should not update the <code>transfer</code> table out of the trigger function it self. This can lead to infinite loops.</p>
<h1 id="customer-entity-manager">customer entity manager</h1>
<p>Every entity manager should perform the <code>select</code>, <code>upsert</code> and <code>delete</code> tasks. Let’s take the <code>customer</code> as an example.</p>
<h2 id="select">select</h2>
<p>When every root entity like the <code>customer</code> relation has a <code>json_view</code> column, this should be the result for a select operation. In the first step, the request can look like</p>
<pre><code>{
    &quot;entity&quot; : &quot;customer&quot;,
    &quot;action&quot; : &quot;select&quot;,
    &quot;payload&quot; : { 
        &quot;id&quot; : &quot;29e2fa06-edfc-49ed-878b-49e8ded9bb89&quot; 
    }
}</code></pre>
<p>The <code>customer_manager</code> checks if the action is valid and calls the assigned function.</p>
<pre><code>CREATE FUNCTION customer_manager(request JSONB) RETURNS JSONB AS $$
DECLARE
    raw_response JSON;
BEGIN
    CASE request-&gt;&gt;&#39;action&#39;
        WHEN &#39;select&#39; THEN
            SELECT customer_manager_select(request-&gt;&#39;payload&#39;) INTO raw_response;
        ELSE
            RAISE EXCEPTION &#39;not a valid action&#39;;
    END CASE;
    
    RETURN raw_response;
END
$$ LANGUAGE plpgsql; </code></pre>
<p>The <code>customer_manager_select</code> function takes the payload and returns the <code>json_view</code> of the customer as a response.</p>
<pre><code>CREATE FUNCTION customer_manager_select(raw_payload JSONB) RETURNS JSONB AS $$
DECLARE 
    raw_result JSONB;
BEGIN
    SELECT json_view FROM customer WHERE id = (raw_payload-&gt;&gt;&#39;id&#39;)::UUID INTO raw_result;

    raw_result = &#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0 }&#39; || jsonb_build_object(&#39;data&#39;, raw_result);

    RETURN raw_result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>An</p>
<pre><code>INSERT INTO transfer (request) 
    VALUES (&#39;{ &quot;entity&quot; : &quot;customer&quot;, &quot;action&quot; : &quot;select&quot;, &quot;payload&quot; : { &quot;id&quot; : &quot;162a5041-14ba-442e-bc1b-a062b9926d49&quot; } }&#39;::JSONB);</code></pre>
<p>will result into the following row.</p>
<pre><code>                  id                  | status  |                                                request                                                |response|         created_at         |         updated_at         

 874c1126-8ea6-4609-9c6d-ed52fc8bb682 | pending | {&quot;action&quot;: &quot;select&quot;, &quot;entity&quot;: &quot;customer&quot;, &quot;payload&quot;: {&quot;id&quot;: &quot;162a5041-14ba-442e-bc1b-a062b9926d49&quot;}} | {&quot;data&quot;: {&quot;id&quot;: &quot;162a5041-14ba-442e-bc1b-a062b9926d49&quot;, &quot;person&quot;: {&quot;id&quot;: &quot;0ec888ea-b84b-4dab-97fc-c1a6fb8ff313&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;addresses&quot;: [{&quot;id&quot;: &quot;06690a9c-92ea-4791-8922-e4e2da7f8991&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44339&quot;, &quot;address_type&quot;: &quot;private&quot;, &quot;house_number&quot;: &quot;123&quot;}, {&quot;id&quot;: &quot;e81b9449-7c0e-4d39-993e-e483064dd6c9&quot;, &quot;city&quot;: &quot;Bochum&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44866&quot;, &quot;address_type&quot;: &quot;work&quot;, &quot;house_number&quot;: &quot;321&quot;}], &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;, &quot;phone_numbers&quot;: [{&quot;id&quot;: &quot;6c09f794-45f4-4746-ba0b-2a6ae9f8dd97&quot;, &quot;phone_number&quot;: &quot;+49123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;landline&quot;, &quot;is_primary_phone_number&quot;: true}, {&quot;id&quot;: &quot;5e08670f-0cf7-46b4-9c0b-40b87a727607&quot;, &quot;phone_number&quot;: &quot;+49151123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;cellular_network&quot;, &quot;is_primary_phone_number&quot;: false}], &quot;email_addresses&quot;: [{&quot;id&quot;: &quot;815fe354-b157-422e-b3c3-6686fead0152&quot;, &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;is_primary_email_address&quot;: false}]}, &quot;customer_number&quot;: &quot;AB123456&quot;}, &quot;status&quot;: &quot;ok&quot;, &quot;error_code&quot;: 0} | 2017-07-31 10:13:46.250357 | 2017-07-31 10:13:46.250357</code></pre>
<p>This is a fist shoot. The <code>response</code> can be quite big, so this should be refactored later. You might also want to build a <code>WHERE</code> clause out of the <code>payload</code> (e.g. Give me all customers living in Hamburg)</p>
<h2 id="delete">delete</h2>
<p>The <code>delete</code> action works with the root <code>id</code>.</p>
<pre><code>{
    &quot;entity&quot; : &quot;customer&quot;,
    &quot;action&quot; : &quot;delete&quot;,
    &quot;payload&quot; : { 
        &quot;id&quot; : &quot;29e2fa06-edfc-49ed-878b-49e8ded9bb89&quot; 
    }
}</code></pre>
<p>The <code>customer_manager</code> must be extended for the <code>delete</code> action.</p>
<pre><code>CREATE FUNCTION customer_manager(request JSONB) RETURNS JSONB AS $$
DECLARE
    raw_response JSON;
BEGIN
    CASE request-&gt;&gt;&#39;action&#39;
        WHEN &#39;select&#39; THEN
            SELECT customer_manager_select(request-&gt;&#39;payload&#39;) INTO raw_response;
        WHEN &#39;delete&#39; THEN
            SELECT customer_manager_delete(request-&gt;&#39;payload&#39;) INTO raw_response;
        ELSE
            RAISE EXCEPTION &#39;not a valid action&#39;;
    END CASE;
    
    RETURN raw_response;
END
$$ LANGUAGE plpgsql; </code></pre>
<p>The simplest approach would be</p>
<pre><code>CREATE FUNCTION customer_manager_delete(raw_payload JSONB) RETURNS JSONB AS $$
DECLARE 
    raw_result JSONB;
BEGIN
    DELETE FROM customer WHERE id = (raw_payload-&gt;&gt;&#39;id&#39;)::UUID;

    raw_result := (&#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0, &quot;data&quot; : { &quot;id&quot; : &quot;&#39; || (raw_payload-&gt;&gt;&#39;id&#39;) || &#39;&quot;}}&#39;)::JSONB;

    RETURN raw_result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>This will work, if the <code>customer</code> has no reference to other tables. After a first <code>purchase_order</code> is created, deletion won’t work any more, due to referential integrity constraints. This is an issue, to think about. In Germany for example, you have to store invoices for several years. This means, customers won’t be deleted, until there last invoice is deleted. There is one approach, to set a own <code>deleted</code> property for a <code>customer</code>. This property is very handy, so it can be included into the post <a href="https://en.wikipedia.org/wiki/Data_definition_language">DDL</a> script.</p>
<pre><code>CREATE FUNCTION add_metadata_to_every_table() RETURNS VOID AS $$
DECLARE 
    row record;
BEGIN
    FOR row IN SELECT tablename FROM pg_tables WHERE schemaname = &#39;test&#39; LOOP

        -- ...   
        EXECUTE &#39;ALTER TABLE &#39; || row.tablename || 
            &#39; ADD COLUMN deleted boolean NOT NULL DEFAULT false&#39;;
        -- ...

    END LOOP;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>Now every table has a <code>deleted</code> column.</p>
<p>Now the <code>customer_manager_select</code> looks like</p>
<pre><code>CREATE FUNCTION customer_manager_delete(raw_payload JSONB) RETURNS JSONB AS $$
BEGIN
    UPDATE customer SET deleted = true WHERE id = (raw_payload-&gt;&gt;&#39;id&#39;)::UUID;

    RETURN (&#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0, &quot;data&quot; : { &quot;id&quot; : &quot;&#39; || (raw_payload-&gt;&gt;&#39;id&#39;) || &#39;&quot;}}&#39;)::JSONB;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>It might be handy, if a <code>deleted</code> record can’t be updated any more. The <code>metadata_trigger</code> is a good place for checking for the <code>deleted</code> column.</p>
<pre><code>CREATE FUNCTION metadata_trigger() RETURNS TRIGGER AS $$
BEGIN
    IF NEW.deleted = true THEN
        RAISE EXCEPTION &#39;can not update the deleted record %&#39;, NEW.id::text;
    END IF;

    NEW.updated_at := now();
    RETURN NEW;
END
$$ LANGUAGE plpgsql;</code></pre>
<h2 id="upsert">upsert</h2>
<p>Let’s start with a <a href="/posts/2017-07-15-database-architecture-part2.html#customer">known customer</a>.</p>
<pre><code>    &quot;person&quot;: {
        &quot;addresses&quot;: [{
            &quot;city&quot;: &quot;Dortmund&quot;,
            &quot;street&quot;: &quot;Fakestreet&quot;,
            &quot;postal_code&quot;: &quot;44339&quot;,
            &quot;address_type&quot;: &quot;private&quot;,
            &quot;house_number&quot;: &quot;123&quot;
        }, {
            &quot;city&quot;: &quot;Bochum&quot;,
            &quot;street&quot;: &quot;Fakestreet&quot;,
            &quot;postal_code&quot;: &quot;44866&quot;,
            &quot;address_type&quot;: &quot;work&quot;,
            &quot;house_number&quot;: &quot;321&quot;
        }],
        &quot;last_name&quot;: &quot;Hake&quot;,
        &quot;first_name&quot;: &quot;Jan Frederik&quot;,
        &quot;phone_numbers&quot;: [{
            &quot;phone_number&quot;: &quot;+49123456789&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;communication_network&quot;: &quot;landline&quot;
        }, {
            &quot;phone_number&quot;: &quot;+49151123456789&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;communication_network&quot;: &quot;cellular_network&quot;
        }],
        &quot;email_addresses&quot;: [{
            &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;,
            &quot;communication_type&quot;: &quot;private&quot;
        }]
    }
}</code></pre>
<p>As you can see, there are no <code>id</code>s or <code>customer_numbers</code> present in the whole entity. For this example, a new customer is assumed. Imagine, you have a web form, where you enter your data. When you’re ready with editing, this might be a result for a customer.</p>
<p>So we first take a look at a possible insert function.</p>
<p>For now, we use a simple customer number generator.</p>
<pre><code>CREATE FUNCTION customer_number() RETURNS text AS $$
    from random import randint
    return &quot;AB%05d&quot; % randint(0,99999)
$$ LANGUAGE plpython3u;</code></pre>
<p>The default value of the <code>customer_number</code> must be changed to</p>
<pre><code>ALTER TABLE customer ALTER COLUMN customer_number SET DEFAULT customer_number();</code></pre>
<p>For a new <code>customer</code>, only <code>person</code> data is needed. The <code>customer_manager</code> has to be extended.</p>
<pre><code>CREATE FUNCTION customer_manager(request JSONB) RETURNS JSONB AS $$
DECLARE
    raw_response JSON;
BEGIN
    CASE request-&gt;&gt;&#39;action&#39;
       -- ...
       WHEN &#39;upsert&#39; THEN
            SELECT customer_manager_upsert(request-&gt;&#39;payload&#39;) INTO raw_response;
       -- ...  
    END CASE; 
$$ LANGUAGE plpgsql; </code></pre>
<p>We insert this new <code>customer</code>.</p>
<pre><code>CREATE FUNCTION customer_manager_upsert(raw_payload JSONB) RETURNS JSONB AS $$
DECLARE
    person_id UUID;
    customer_id UUID;
    result JSONB;
BEGIN
    INSERT INTO person (first_name, last_name, birth_date, notes, website)
         VALUES (raw_payload#&gt;&gt;&#39;{person,first_name}&#39;, 
             raw_payload#&gt;&gt;&#39;{person,last_name}&#39;,
             (raw_payload#&gt;&gt;&#39;{person,birth_date}&#39;)::DATE,
             raw_payload#&gt;&gt;&#39;{person,notes}&#39;,
             raw_payload#&gt;&gt;&#39;{person,website}&#39;) RETURNING id INTO person_id;
   
    INSERT INTO customer (id_person) VALUES (person_id) RETURNING id INTO customer_id;

    PERFORM update_json_view_customer(customer_id);

    SELECT json_view FROM customer WHERE id = customer_id INTO result;

    result = &#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0 }&#39;::JSONB || jsonb_build_object(&#39;data&#39;, result);

    RETURN result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>This creates a new <code>customer</code> with a new <code>person</code>. The <code>update_json_view_customer</code> <a href="/posts/2017-07-15-database-architecture-part2.html#customer">function</a> will update the <code>json_view</code> of the <code>customer</code>.</p>
<pre><code>{
    &quot;id&quot;: &quot;46624c40-c50a-478e-83e9-9117d7b87f39&quot;,
    &quot;person&quot;: {
        &quot;id&quot;: &quot;81b46e11-cdef-4a71-b850-68882b474c90&quot;,
        &quot;notes&quot;: null,
        &quot;website&quot;: null,
        &quot;addresses&quot;: null,
        &quot;last_name&quot;: &quot;Hake&quot;,
        &quot;birth_date&quot;: null,
        &quot;first_name&quot;: &quot;Jan Frederik&quot;,
        &quot;phone_numbers&quot;: null,
        &quot;email_addresses&quot;: null
    },
    &quot;customer_number&quot;: &quot;AB19856&quot;
}</code></pre>
<p>For the addresses, we have to loop through the nested json array</p>
<pre><code>IF raw_payload#&gt;&#39;{person}&#39; ? &#39;addresses&#39; THEN
    FOR address in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,addresses}&#39;) 
    LOOP
        INSERT INTO address (street, house_number, postal_code, city)
            VALUES (address-&gt;&gt;&#39;street&#39;, 
                address-&gt;&gt;&#39;house_number&#39;, 
                address-&gt;&gt;&#39;postal_code&#39;, 
                address-&gt;&gt;&#39;city&#39;)
            RETURNING id INTO address_id;

        INSERT INTO person_to_address (id_person, id_address)
            VALUES (person_id, address_id);
    END LOOP;
END IF;</code></pre>
<p>The phone numbers can be added with the following loop.</p>
<pre><code>IF raw_payload#&gt;&#39;{person}&#39; ? &#39;phone_numbers&#39; THEN
    FOR phone in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,phone_numbers}&#39;) 
    LOOP
        INSERT INTO phone (phone_number, communication_network)
            VALUES (phone-&gt;&gt;&#39;phone_number&#39;, 
                (phone-&gt;&gt;&#39;communication_network&#39;)::communication_network)
            RETURNING id INTO phone_id;

        INSERT INTO person_to_phone (id_person, id_phone, communication_type)
            VALUES (person_id,  phone_id, (phone-&gt;&gt;&#39;communication_type&#39;)::communication_type);
    END LOOP;
END IF;</code></pre>
<p>As you can see, the <code>communication_network</code> and <code>communication_type</code> have to be casted. This is good. Cast errors will cause an exception. This kind of type safety will help during more complex events.</p>
<p>Together we have</p>
<pre><code>CREATE FUNCTION customer_manager_upsert(raw_payload JSONB) RETURNS JSONB AS $$
DECLARE
    person_id UUID;
    customer_id UUID; 
    address_id UUID;
    phone_id UUID;
    email_id UUID;
    address JSONB;
    phone JSONB;
    email JSONB;
    result JSONB;
BEGIN
    INSERT INTO person (first_name, last_name, birth_date, notes, website)
         VALUES (raw_payload#&gt;&gt;&#39;{person,first_name}&#39;, 
             raw_payload#&gt;&gt;&#39;{person,last_name}&#39;,
             (raw_payload#&gt;&gt;&#39;{person,birth_date}&#39;)::DATE,
             raw_payload#&gt;&gt;&#39;{person,notes}&#39;,
             raw_payload#&gt;&gt;&#39;{person,website}&#39;) RETURNING id INTO person_id;

    IF raw_payload#&gt;&#39;{person}&#39; ? &#39;addresses&#39; THEN
        FOR address in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,addresses}&#39;) 
        LOOP
            INSERT INTO address (street, house_number, postal_code, city)
                VALUES (address-&gt;&gt;&#39;street&#39;, 
                    address-&gt;&gt;&#39;house_number&#39;, 
                    address-&gt;&gt;&#39;postal_code&#39;, 
                    address-&gt;&gt;&#39;city&#39;)
                RETURNING id INTO address_id;

            INSERT INTO person_to_address (id_person, id_address)
                VALUES (person_id, address_id);
        END LOOP;
    END IF;

    IF raw_payload#&gt;&#39;{person}&#39; ? &#39;phone_numbers&#39; THEN
        FOR phone in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,phone_numbers}&#39;) 
        LOOP
            INSERT INTO phone (phone_number, communication_network)
                VALUES (phone-&gt;&gt;&#39;phone_number&#39;, 
                    (phone-&gt;&gt;&#39;communication_network&#39;)::communication_network)
                RETURNING id INTO phone_id;

            INSERT INTO person_to_phone (id_person, id_phone, communication_type)
                VALUES (person_id,  phone_id, (phone-&gt;&gt;&#39;communication_type&#39;)::communication_type);
        END LOOP;
    END IF;

    IF raw_payload#&gt;&#39;{person}&#39; ? &#39;email_addresses&#39; THEN
        FOR email in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,email_addresses}&#39;) 
        LOOP
            INSERT INTO email (email_address)
                VALUES (email-&gt;&gt;&#39;email_address&#39;) 
                RETURNING id INTO email_id;

            INSERT INTO person_to_email (id_person, id_email, communication_type)
                VALUES (person_id, email_id, (email-&gt;&gt;&#39;communication_type&#39;)::communication_type);
        END LOOP;
    END IF;
    
    INSERT INTO customer (id_person) VALUES (person_id) RETURNING id INTO customer_id;

    PERFORM update_json_view_customer(customer_id);

    SELECT json_view FROM customer WHERE id = customer_id INTO result;

    result = &#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0 }&#39;::JSONB || jsonb_build_object(&#39;data&#39;, result);

    RETURN result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>This is a best case scenario. There are no duplicate checks for example. Maybe, the upsert function needs some rewrite in a more compact language like <a href="https://www.postgresql.org/docs/current/static/plpython.html">PL/Python</a>.</p>]]></summary>
</entry>
<entry>
    <title>Generate a ERM from a PostgreSQL database schema</title>
    <link href="https://enter-haken.github.io/posts/2017-07-20-erm-graphviz.html" />
    <id>https://enter-haken.github.io/posts/2017-07-20-erm-graphviz.html</id>
    <published>2017-07-20T00:00:00Z</published>
    <updated>2017-07-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Creating a <a href="https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model">ERM</a> is one of the first tasks, when a database is designed. During implementation, you have to sync the model with the schema. This manual task can be very annoying. With some database knowledge and some Linux standard tools, this task can be automated.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="335pt" height="101pt"
 viewBox="0.00 0.00 335.00 101.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 97)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-97 331,-97 331,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="8,-8 8,-85 90,-85 90,-8 8,-8"/>
<text text-anchor="middle" x="49" y="-69.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">Database</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="110,-8 110,-85 319,-85 319,-8 110,-8"/>
<text text-anchor="middle" x="214.5" y="-69.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">bash</text>
</g>
<!-- schema -->
<g id="node1" class="node">
<title>schema</title>
<path fill="#ffffff" stroke="#ffffff" d="M70,-54C70,-54 28,-54 28,-54 22,-54 16,-48 16,-42 16,-42 16,-28 16,-28 16,-22 22,-16 28,-16 28,-16 70,-16 70,-16 76,-16 82,-22 82,-28 82,-28 82,-42 82,-42 82,-48 76,-54 70,-54"/>
<text text-anchor="middle" x="49" y="-38.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">database</text>
<text text-anchor="middle" x="49" y="-23.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">schema</text>
</g>
<!-- awk -->
<g id="node2" class="node">
<title>awk</title>
<path fill="#ffffff" stroke="#ffffff" d="M183,-54C183,-54 130,-54 130,-54 124,-54 118,-48 118,-42 118,-42 118,-28 118,-28 118,-22 124,-16 130,-16 130,-16 183,-16 183,-16 189,-16 195,-22 195,-28 195,-28 195,-42 195,-42 195,-48 189,-54 183,-54"/>
<text text-anchor="middle" x="156.5" y="-38.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">awk</text>
<text text-anchor="middle" x="156.5" y="-23.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">processing</text>
</g>
<!-- schema&#45;&gt;awk -->
<g id="edge1" class="edge">
<title>schema&#45;&gt;awk</title>
<path fill="none" stroke="#000000" d="M82.1307,-35C90.2007,-35 99.0017,-35 107.6332,-35"/>
<polygon fill="#000000" stroke="#000000" points="107.6343,-38.5001 117.6342,-35 107.6342,-31.5001 107.6343,-38.5001"/>
</g>
<!-- dot -->
<g id="node3" class="node">
<title>dot</title>
<path fill="#ffffff" stroke="#ffffff" d="M299,-54C299,-54 243,-54 243,-54 237,-54 231,-48 231,-42 231,-42 231,-28 231,-28 231,-22 237,-16 243,-16 243,-16 299,-16 299,-16 305,-16 311,-22 311,-28 311,-28 311,-42 311,-42 311,-48 305,-54 299,-54"/>
<text text-anchor="middle" x="271" y="-38.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">graphviz</text>
<text text-anchor="middle" x="271" y="-23.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">processing </text>
</g>
<!-- awk&#45;&gt;dot -->
<g id="edge2" class="edge">
<title>awk&#45;&gt;dot</title>
<path fill="none" stroke="#000000" d="M195.2645,-35C203.3823,-35 212.0556,-35 220.528,-35"/>
<polygon fill="#000000" stroke="#000000" points="220.7121,-38.5001 230.7121,-35 220.7121,-31.5001 220.7121,-38.5001"/>
</g>
</g>
</svg>
</div>
<!--more-->
<h1 id="get-the-schema">get the schema</h1>
<p>The <a href="https://www.postgresql.org/docs/current/static/information-schema.html">information_schema</a> exists in all databases.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT table_name, column_name, data_type, udt_name \
&gt; FROM information_schema.columns WHERE table_schema = &#39;test&#39;&quot; | head
       table_name       |       column_name        |          data_type          |       udt_name        
------------------------+--------------------------+-----------------------------+-----------------------
 person_to_email        | id_person                | uuid                        | uuid
 person_to_email        | id_email                 | uuid                        | uuid
 person_to_email        | communication_type       | USER-DEFINED                | communication_type
 person_to_email        | is_primary_email_address | boolean                     | bool
 person_to_email        | created_at               | timestamp without time zone | timestamp
 person_to_email        | updated_at               | timestamp without time zone | timestamp
 person_view            | first_name               | character varying           | varchar
 person_view            | last_name                | character varying           | varchar</code></pre>
<p>These are all the columns from our test schema. We still need some information about references between the relations. For the next processing step, all of the necessary column data should be in one result record.</p>
<p>With the key column constraints</p>
<pre><code>$ psql -U postgres -c &quot;SELECT constraint_name, table_name, column_name \
&gt; FROM information_schema.key_column_usage WHERE table_schema = &#39;test&#39;&quot; | head
              constraint_name               |       table_name       |      column_name      
--------------------------------------------+------------------------+-----------------------
 person_to_email_id_email_fkey              | person_to_email        | id_email
 person_to_email_id_person_fkey             | person_to_email        | id_person
 person_to_email_pkey                       | person_to_email        | id_person
 person_to_email_pkey                       | person_to_email        | id_email
 person_pkey                                | person                 | id
 address_pkey                               | address                | id
 employee_id_person_fkey                    | employee               | id_person
 employee_pkey                              | employee               | id</code></pre>
<p>and a list of <a href="https://www.postgresql.org/docs/current/static/infoschema-table-constraints.html">table_constraints</a>,</p>
<pre><code>$ psql -U postgres -c &quot;SELECT constraint_name, table_name, constraint_type \
&gt; FROM information_schema.table_constraints WHERE table_schema = &#39;test&#39; \
&gt; AND constraint_type IN (&#39;FOREIGN KEY&#39;,&#39;PRIMARY KEY&#39;)&quot; | head
              constraint_name               |       table_name       | constraint_type
--------------------------------------------+------------------------+-----------------
 person_pkey                                | person                 | PRIMARY KEY
 address_pkey                               | address                | PRIMARY KEY
 person_to_address_pkey                     | person_to_address      | PRIMARY KEY
 person_to_address_id_person_fkey           | person_to_address      | FOREIGN KEY
 person_to_address_id_address_fkey          | person_to_address      | FOREIGN KEY
 email_pkey                                 | email                  | PRIMARY KEY
 person_to_email_pkey                       | person_to_email        | PRIMARY KEY
 person_to_email_id_person_fkey             | person_to_email        | FOREIGN KEY</code></pre>
<p>we can build our first query.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT c.table_name, 
&gt; c.column_name, 
&gt; c.data_type, 
&gt; c.udt_name,
&gt; is_nullable, 
&gt; c.character_maximum_length,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;PRIMARY KEY&#39; LIMIT 1
&gt; ) primary_key
&gt; FROM information_schema.columns c 
&gt;         JOIN information_schema.tables t on c.table_name = t.table_name
&gt; WHERE c.table_schema = &#39;test&#39; AND t.table_type = &#39;BASE TABLE&#39;&quot; | head
       table_name       |       column_name        |          data_type          |       udt_name        | is_nullable | character_maximum_length | primary_key 
------------------------+--------------------------+-----------------------------+-----------------------+-------------+--------------------------+-------------
 person_to_email        | id_person                | uuid                        | uuid                  | NO          |                          | PRIMARY KEY
 person_to_email        | id_email                 | uuid                        | uuid                  | NO          |                          | PRIMARY KEY
 person_to_email        | communication_type       | USER-DEFINED                | communication_type    | NO          |                          | 
 person_to_email        | is_primary_email_address | boolean                     | bool                  | NO          |                          | 
 person_to_email        | created_at               | timestamp without time zone | timestamp             | NO          |                          | 
 person_to_email        | updated_at               | timestamp without time zone | timestamp             | NO          |                          | 
 person                 | id                       | uuid                        | uuid                  | NO          |                          | PRIMARY KEY
 person                 | first_name               | character varying           | varchar               | YES         |                      512 | </code></pre>
<p>Now we need the foreign keys and the target of the relation. These information can be fetched from the <a href="https://www.postgresql.org/docs/current/static/infoschema-constraint-column-usage.html">constraint_column_usage view</a>.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT table_name, column_name, constraint_name FROM information_schema.constraint_column_usage \
&gt; WHERE table_schema = &#39;test&#39;&quot; | head
       table_name       |      column_name      |              constraint_name               
------------------------+-----------------------+--------------------------------------------
 person                 | id                    | person_pkey
 address                | id                    | address_pkey
 person_to_address      | id_person             | person_to_address_pkey
 person_to_address      | id_address            | person_to_address_pkey
 person                 | id                    | person_to_address_id_person_fkey
 address                | id                    | person_to_address_id_address_fkey
 email                  | id                    | email_pkey
 person_to_email        | id_person             | person_to_email_pkey</code></pre>
<p>With this we are coming to our next query.</p>
<pre><code>$  psql -U postgres -c &quot;SELECT c.table_name,
&gt; c.column_name,
&gt; c.data_type,
&gt; c.udt_name,
&gt; c.is_nullable,
&gt; c.character_maximum_length,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name
&gt;                 AND c.table_name = kcu.table_name
&gt;                 AND tc.constraint_type = &#39;PRIMARY KEY&#39; LIMIT 1
&gt; ) primary_key,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name
&gt;                 AND c.table_name = kcu.table_name
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) foreign_key,
&gt; (SELECT ccu.table_name FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         JOIN information_schema.constraint_column_usage ccu
&gt;                 ON tc.constraint_name = ccu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name
&gt;                 AND c.table_name = kcu.table_name
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) reference_table,
&gt; (SELECT ccu.column_name FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         JOIN information_schema.constraint_column_usage ccu
&gt;                 ON tc.constraint_name = ccu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name
&gt;                 AND c.table_name = kcu.table_name
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) reference_column
&gt;
&gt; FROM information_schema.columns c
&gt;         JOIN information_schema.tables t on c.table_name = t.table_name
&gt; WHERE c.table_schema = &#39;test&#39; AND t.table_type = &#39;BASE TABLE&#39;&quot; | head
       table_name       |       column_name        |          data_type          |       udt_name        | is_nullable | character_maximum_length | primary_key | foreign_key | reference_table | reference_column
------------------------+--------------------------+-----------------------------+-----------------------+-------------+--------------------------+-------------+-------------+-----------------+------------------
 person_to_email        | id_person                | uuid                        | uuid                  | NO          |                          | PRIMARY KEY | FOREIGN KEY | person          | id
 person_to_email        | id_email                 | uuid                        | uuid                  | NO          |                          | PRIMARY KEY | FOREIGN KEY | email           | id
 person_to_email        | communication_type       | USER-DEFINED                | communication_type    | NO          |                          |             |             |                 |
 person_to_email        | is_primary_email_address | boolean                     | bool                  | NO          |                          |             |             |                 |
 person_to_email        | created_at               | timestamp without time zone | timestamp             | NO          |                          |             |             |                 |
 person_to_email        | updated_at               | timestamp without time zone | timestamp             | NO          |                          |             |             |                 |
 person                 | id                       | uuid                        | uuid                  | NO          |                          | PRIMARY KEY |             |                 |
 person                 | first_name               | character varying           | varchar               | YES         |                      512 |             |             |                 |</code></pre>
<p>There is one thing left. It would be nice, if you can see the enum values within the ERM. Let’s look, what we can do about it.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT e.enumlabel, t.typname FROM pg_type t \
&gt; JOIN pg_enum e ON t.oid = e.enumtypid \
&gt; JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace&quot;  | head
       enumlabel        |        typname
------------------------+-----------------------
 work                   | address_type
 invoice                | address_type
 delivery               | address_type
 private                | address_type
 organization           | communication_type
 private                | communication_type
 work                   | communication_type
 cellular_network       | communication_network</code></pre>
<p>This can be matched on the column <code>udt_name</code>.</p>
<p>Now we have our final SQL statement for now.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT c.table_name, 
&gt; c.column_name, 
&gt; c.data_type, 
&gt; c.udt_name,
&gt; (SELECT string_agg(e.enumlabel::TEXT, &#39;, &#39;)
&gt;         FROM pg_type t 
&gt;            JOIN pg_enum e on t.oid = e.enumtypid  
&gt;            JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE t.typname = c.udt_name) enum_values,
&gt; c.is_nullable, 
&gt; c.character_maximum_length,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;PRIMARY KEY&#39; LIMIT 1
&gt; ) primary_key,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) foreign_key,
&gt; (SELECT ccu.table_name FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         JOIN information_schema.constraint_column_usage ccu
&gt;                 ON tc.constraint_name = ccu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) reference_table,
&gt; (SELECT ccu.column_name FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         JOIN information_schema.constraint_column_usage ccu
&gt;                 ON tc.constraint_name = ccu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) reference_column
&gt; 
&gt; FROM information_schema.columns c 
&gt;         JOIN information_schema.tables t on c.table_name = t.table_name
&gt; WHERE c.table_schema = &#39;test&#39; AND t.table_type = &#39;BASE TABLE&#39;&quot; | head
       table_name       |       column_name        |          data_type          |       udt_name        |                                     enum_values                                     | is_nullable | character_maximum_length | primary_key | foreign_key | reference_table | reference_column 
------------------------+--------------------------+-----------------------------+-----------------------+-------------------------------------------------------------------------------------+-------------+--------------------------+-------------+-------------+-----------------+------------------
 person_to_email        | id_person                | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY | FOREIGN KEY | person          | id
 person_to_email        | id_email                 | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY | FOREIGN KEY | email           | id
 person_to_email        | communication_type       | USER-DEFINED                | communication_type    | work, private, organization                                                         | NO          |                          |             |             |                 | 
 person_to_email        | is_primary_email_address | boolean                     | bool                  |                                                                                     | NO          |                          |             |             |                 | 
 person_to_email        | created_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 | 
 person_to_email        | updated_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 | 
 person                 | id                       | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY |             |                 | 
 person                 | first_name               | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | </code></pre>
<p>The <code>string_agg</code> function is used to concentrate the enum values.</p>
<h1 id="a-look-ahead">a look ahead</h1>
<p>Before starting to work with the raw schema data, we take a look at our goal. We use graphviz for drawing the ERM. My goal is to get close to a ERM visualization.</p>
<pre><code>digraph {
    node [shape=Mrecord; fontname=&quot;Courier New&quot; style=&quot;filled, bold&quot; fillcolor=&quot;white&quot;, fontcolor=&quot;black&quot;];
    customer [shape=plaintext; label=&lt;
     &lt;TABLE BORDER=&quot;1&quot; CELLBORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;3&quot;&gt;
     &lt;TR&gt;
        &lt;TD COLSPAN=&quot;5&quot; BGCOLOR=&quot;black&quot;&gt;&lt;FONT color=&quot;white&quot;&gt;&lt;B&gt;customer&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD&gt;column&lt;/TD&gt;
        &lt;TD&gt;type&lt;/TD&gt;
        &lt;TD&gt;nullable&lt;/TD&gt;
        &lt;TD&gt;PK&lt;/TD&gt;
        &lt;TD&gt;FK&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f1&quot;&gt;id&lt;/TD&gt;
        &lt;TD&gt;uuid&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;PRIMARY KEY&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f2&quot;&gt;id_person&lt;/TD&gt;
        &lt;TD&gt;uuid&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;FOREIGN KEY&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f3&quot;&gt;customer_number&lt;/TD&gt;
        &lt;TD&gt;varchar&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f4&quot;&gt;json_view&lt;/TD&gt;
        &lt;TD&gt;jsonb&lt;/TD&gt;
        &lt;TD&gt;YES&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f5&quot;&gt;created_at&lt;/TD&gt;
        &lt;TD&gt;timestamp&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f6&quot;&gt;updated_at&lt;/TD&gt;
        &lt;TD&gt;timestamp&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;/TABLE&gt;&gt;]
}</code></pre>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="504pt" height="186pt"
 viewBox="0.00 0.00 504.00 186.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 182)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-182 500,-182 500,4 -4,4"/>
<!-- customer -->
<g id="node1" class="node">
<title>customer</title>
<polygon fill="#ffffff" stroke="transparent" stroke-width="2" points="496,-178 0,-178 0,0 496,0 496,-178"/>
<polygon fill="#000000" stroke="transparent" points="9,-152 9,-173 487,-173 487,-152 9,-152"/>
<text text-anchor="start" x="214.5" y="-159.8" font-family="Courier New" font-weight="bold" font-size="14.00" fill="#ffffff">customer</text>
<text text-anchor="start" x="49" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">column</text>
<text text-anchor="start" x="162.5" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">type</text>
<text text-anchor="start" x="223" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">nullable</text>
<text text-anchor="start" x="333" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">PK</text>
<text text-anchor="start" x="430" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">FK</text>
<text text-anchor="start" x="65.5" y="-116.8" font-family="Courier New" font-size="14.00" fill="#000000">id</text>
<text text-anchor="start" x="162.5" y="-116.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="248" y="-116.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="296" y="-116.8" font-family="Courier New" font-size="14.00" fill="#000000">PRIMARY KEY</text>
<text text-anchor="start" x="36.5" y="-95.8" font-family="Courier New" font-size="14.00" fill="#000000">id_person</text>
<text text-anchor="start" x="162.5" y="-95.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="248" y="-95.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="393" y="-95.8" font-family="Courier New" font-size="14.00" fill="#000000">FOREIGN KEY</text>
<text text-anchor="start" x="12" y="-74.8" font-family="Courier New" font-size="14.00" fill="#000000">customer_number</text>
<text text-anchor="start" x="150.5" y="-74.8" font-family="Courier New" font-size="14.00" fill="#000000">varchar</text>
<text text-anchor="start" x="248" y="-74.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="36.5" y="-53.8" font-family="Courier New" font-size="14.00" fill="#000000">json_view</text>
<text text-anchor="start" x="158.5" y="-53.8" font-family="Courier New" font-size="14.00" fill="#000000">jsonb</text>
<text text-anchor="start" x="244" y="-53.8" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="32.5" y="-32.8" font-family="Courier New" font-size="14.00" fill="#000000">created_at</text>
<text text-anchor="start" x="142" y="-32.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="248" y="-32.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="32.5" y="-11.8" font-family="Courier New" font-size="14.00" fill="#000000">updated_at</text>
<text text-anchor="start" x="142" y="-11.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="248" y="-11.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<polygon fill="none" stroke="#000000" points="8,-4 8,-174 488,-174 488,-4 8,-4"/>
</g>
</g>
</svg>
</div>
<p>The table column layout fits our needs for our relation. The <code>port</code> attribute is important for the edges.</p>
<p>If we have a <code>person</code> and a <code>customer</code>, adding</p>
<pre><code>customer -&gt; person;</code></pre>
<p>will create an edge for these relations.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="504pt" height="463pt"
 viewBox="0.00 0.00 504.00 463.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 459)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-459 500,-459 500,4 -4,4"/>
<!-- person -->
<g id="node1" class="node">
<title>person</title>
<polygon fill="#ffffff" stroke="transparent" stroke-width="2" points="438.5,-241 57.5,-241 57.5,0 438.5,0 438.5,-241"/>
<polygon fill="#000000" stroke="transparent" points="67,-214.5 67,-235.5 430,-235.5 430,-214.5 67,-214.5"/>
<text text-anchor="start" x="223.5" y="-222.3" font-family="Courier New" font-weight="bold" font-size="14.00" fill="#ffffff">person</text>
<text text-anchor="start" x="86.5" y="-200.3" font-family="Courier New" font-size="14.00" fill="#000000">column</text>
<text text-anchor="start" x="179.5" y="-200.3" font-family="Courier New" font-size="14.00" fill="#000000">type</text>
<text text-anchor="start" x="240" y="-200.3" font-family="Courier New" font-size="14.00" fill="#000000">nullable</text>
<text text-anchor="start" x="350" y="-200.3" font-family="Courier New" font-size="14.00" fill="#000000">PK</text>
<text text-anchor="start" x="410" y="-200.3" font-family="Courier New" font-size="14.00" fill="#000000">FK</text>
<text text-anchor="start" x="103" y="-179.3" font-family="Courier New" font-size="14.00" fill="#000000">id</text>
<text text-anchor="start" x="179.5" y="-179.3" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="265" y="-179.3" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="313" y="-179.3" font-family="Courier New" font-size="14.00" fill="#000000">PRIMARY KEY</text>
<text text-anchor="start" x="70" y="-158.3" font-family="Courier New" font-size="14.00" fill="#000000">first_name</text>
<text text-anchor="start" x="167.5" y="-158.3" font-family="Courier New" font-size="14.00" fill="#000000">varchar</text>
<text text-anchor="start" x="261" y="-158.3" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="74" y="-137.3" font-family="Courier New" font-size="14.00" fill="#000000">last_name</text>
<text text-anchor="start" x="167.5" y="-137.3" font-family="Courier New" font-size="14.00" fill="#000000">varchar</text>
<text text-anchor="start" x="261" y="-137.3" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="70" y="-116.3" font-family="Courier New" font-size="14.00" fill="#000000">birth_date</text>
<text text-anchor="start" x="179.5" y="-116.3" font-family="Courier New" font-size="14.00" fill="#000000">date</text>
<text text-anchor="start" x="261" y="-116.3" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="90.5" y="-95.3" font-family="Courier New" font-size="14.00" fill="#000000">notes</text>
<text text-anchor="start" x="167.5" y="-95.3" font-family="Courier New" font-size="14.00" fill="#000000">varchar</text>
<text text-anchor="start" x="261" y="-95.3" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="82.5" y="-74.3" font-family="Courier New" font-size="14.00" fill="#000000">website</text>
<text text-anchor="start" x="167.5" y="-74.3" font-family="Courier New" font-size="14.00" fill="#000000">varchar</text>
<text text-anchor="start" x="261" y="-74.3" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="74" y="-53.3" font-family="Courier New" font-size="14.00" fill="#000000">json_view</text>
<text text-anchor="start" x="175.5" y="-53.3" font-family="Courier New" font-size="14.00" fill="#000000">jsonb</text>
<text text-anchor="start" x="261" y="-53.3" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="70" y="-32.3" font-family="Courier New" font-size="14.00" fill="#000000">created_at</text>
<text text-anchor="start" x="159" y="-32.3" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="265" y="-32.3" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="70" y="-11.3" font-family="Courier New" font-size="14.00" fill="#000000">updated_at</text>
<text text-anchor="start" x="159" y="-11.3" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="265" y="-11.3" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<polygon fill="none" stroke="#000000" points="65.5,-4 65.5,-237 430.5,-237 430.5,-4 65.5,-4"/>
</g>
<!-- customer -->
<g id="node2" class="node">
<title>customer</title>
<polygon fill="#ffffff" stroke="transparent" stroke-width="2" points="496,-455 0,-455 0,-277 496,-277 496,-455"/>
<polygon fill="#000000" stroke="transparent" points="9,-429 9,-450 487,-450 487,-429 9,-429"/>
<text text-anchor="start" x="214.5" y="-436.8" font-family="Courier New" font-weight="bold" font-size="14.00" fill="#ffffff">customer</text>
<text text-anchor="start" x="49" y="-414.8" font-family="Courier New" font-size="14.00" fill="#000000">column</text>
<text text-anchor="start" x="162.5" y="-414.8" font-family="Courier New" font-size="14.00" fill="#000000">type</text>
<text text-anchor="start" x="223" y="-414.8" font-family="Courier New" font-size="14.00" fill="#000000">nullable</text>
<text text-anchor="start" x="333" y="-414.8" font-family="Courier New" font-size="14.00" fill="#000000">PK</text>
<text text-anchor="start" x="430" y="-414.8" font-family="Courier New" font-size="14.00" fill="#000000">FK</text>
<text text-anchor="start" x="65.5" y="-393.8" font-family="Courier New" font-size="14.00" fill="#000000">id</text>
<text text-anchor="start" x="162.5" y="-393.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="248" y="-393.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="296" y="-393.8" font-family="Courier New" font-size="14.00" fill="#000000">PRIMARY KEY</text>
<text text-anchor="start" x="36.5" y="-372.8" font-family="Courier New" font-size="14.00" fill="#000000">id_person</text>
<text text-anchor="start" x="162.5" y="-372.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="248" y="-372.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="393" y="-372.8" font-family="Courier New" font-size="14.00" fill="#000000">FOREIGN KEY</text>
<text text-anchor="start" x="12" y="-351.8" font-family="Courier New" font-size="14.00" fill="#000000">customer_number</text>
<text text-anchor="start" x="150.5" y="-351.8" font-family="Courier New" font-size="14.00" fill="#000000">varchar</text>
<text text-anchor="start" x="248" y="-351.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="36.5" y="-330.8" font-family="Courier New" font-size="14.00" fill="#000000">json_view</text>
<text text-anchor="start" x="158.5" y="-330.8" font-family="Courier New" font-size="14.00" fill="#000000">jsonb</text>
<text text-anchor="start" x="244" y="-330.8" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="32.5" y="-309.8" font-family="Courier New" font-size="14.00" fill="#000000">created_at</text>
<text text-anchor="start" x="142" y="-309.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="248" y="-309.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="32.5" y="-288.8" font-family="Courier New" font-size="14.00" fill="#000000">updated_at</text>
<text text-anchor="start" x="142" y="-288.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="248" y="-288.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<polygon fill="none" stroke="#000000" points="8,-281 8,-451 488,-451 488,-281 8,-281"/>
</g>
<!-- customer&#45;&gt;person -->
<g id="edge1" class="edge">
<title>customer&#45;&gt;person</title>
<path fill="none" stroke="#000000" d="M248,-276.6744C248,-268.3971 248,-259.9002 248,-251.3508"/>
<polygon fill="#000000" stroke="#000000" points="251.5001,-251.3002 248,-241.3003 244.5001,-251.3003 251.5001,-251.3002"/>
</g>
</g>
</svg>
</div>
<h1 id="preparations">preparations</h1>
<p>First we export the schema to a file (e.g. <code>schema.txt</code>). This file will be used for the awk processing.</p>
<p>The first two lines of the head</p>
<pre><code>$ head -n 5 schema.txt
       table_name       |       column_name        |          data_type          |       udt_name        |                                     enum_values                                     | is_nullable | character_maximum_length | primary_key | foreign_key | reference_table | reference_column 
------------------------+--------------------------+-----------------------------+-----------------------+-------------------------------------------------------------------------------------+-------------+--------------------------+-------------+-------------+-----------------+------------------
 person                 | id                       | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY |             |                 | 
 person                 | first_name               | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | 
 person                 | last_name                | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | </code></pre>
<p>must be removed. This can be done by</p>
<pre><code>$ head -n5 schema.txt | tail -n+3
 person                 | id                       | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY |             |                 | 
 person                 | first_name               | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | 
 person                 | last_name                | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | </code></pre>
<p>The last two lines (one blank line) of the tail</p>
<pre><code> article                | status                   | USER-DEFINED                | article_status        | active, inactive                                                                    | NO          |                          |             |             |                 |
 article                | created_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 |
 article                | updated_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 |
(109 Zeilen)
    </code></pre>
<p>can be removed with</p>
<pre><code>$ tail -n 5 schema.txt | head -n -2
 article                | status                   | USER-DEFINED                | article_status        | active, inactive                                                                    | NO          |                          |             |             |                 |
 article                | created_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 |
 article                | updated_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 |</code></pre>
<p>Now we have a record in every line.</p>
<h1 id="get-started-with-awk">get started with awk</h1>
<p>An awk program has the following structure.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="273pt" height="44pt"
 viewBox="0.00 0.00 273.00 44.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 40)">
<title>%3</title>
<polygon fill="#d3d3d3" stroke="transparent" points="-4,4 -4,-40 269,-40 269,4 -4,4"/>
<!-- begin -->
<g id="node1" class="node">
<title>begin</title>
<path fill="#ffffff" stroke="#ffffff" d="M44,-36C44,-36 12,-36 12,-36 6,-36 0,-30 0,-24 0,-24 0,-12 0,-12 0,-6 6,0 12,0 12,0 44,0 44,0 50,0 56,-6 56,-12 56,-12 56,-24 56,-24 56,-30 50,-36 44,-36"/>
<text text-anchor="middle" x="28" y="-14.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">BEGIN</text>
</g>
<!-- middle -->
<g id="node2" class="node">
<title>middle</title>
<path fill="#ffffff" stroke="#ffffff" d="M163,-36C163,-36 104,-36 104,-36 98,-36 92,-30 92,-24 92,-24 92,-12 92,-12 92,-6 98,0 104,0 104,0 163,0 163,0 169,0 175,-6 175,-12 175,-12 175,-24 175,-24 175,-30 169,-36 163,-36"/>
<text text-anchor="middle" x="133.5" y="-14.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">middle part</text>
</g>
<!-- begin&#45;&gt;middle -->
<g id="edge1" class="edge">
<title>begin&#45;&gt;middle</title>
<path fill="none" stroke="#000000" d="M56.2721,-18C64.0808,-18 72.8092,-18 81.5099,-18"/>
<polygon fill="#000000" stroke="#000000" points="81.6545,-21.5001 91.6544,-18 81.6544,-14.5001 81.6545,-21.5001"/>
</g>
<!-- end -->
<g id="node3" class="node">
<title>end</title>
<path fill="#ffffff" stroke="#ffffff" d="M253,-36C253,-36 223,-36 223,-36 217,-36 211,-30 211,-24 211,-24 211,-12 211,-12 211,-6 217,0 223,0 223,0 253,0 253,0 259,0 265,-6 265,-12 265,-12 265,-24 265,-24 265,-30 259,-36 253,-36"/>
<text text-anchor="middle" x="238" y="-14.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">END</text>
</g>
<!-- middle&#45;&gt;end -->
<g id="edge2" class="edge">
<title>middle&#45;&gt;end</title>
<path fill="none" stroke="#000000" d="M175.1014,-18C183.5857,-18 192.4611,-18 200.7808,-18"/>
<polygon fill="#000000" stroke="#000000" points="200.9507,-21.5001 210.9506,-18 200.9506,-14.5001 200.9507,-21.5001"/>
</g>
</g>
</svg>
</div>
<p>The BEGIN and the END part is executed once. The middle part is executed for every data record.</p>
<p>The BEGIN part introduces the graph.</p>
<pre><code>BEGIN {
    print(&quot;digraph {&quot;)
    print(&quot;graph [overlap=false;splines=true;regular=true];&quot;)
    print(&quot;node [shape=Mrecord; fontname=\&quot;Courier New\&quot; style=\&quot;filled, bold\&quot; fillcolor=\&quot;white\&quot;, fontcolor=\&quot;black\&quot;];&quot;)
}</code></pre>
<p>The middle part must print every graphviz table for every relation in the schema.</p>
<pre><code>{
   if (length(currentTableName) &gt; 0 &amp;&amp; $1 != currentTableName) {
       print(&quot;&lt;/TABLE&gt;&gt;]&quot;)
   }
 
   if ($1 != currentTableName) {
        print(&quot;&quot;)
        print(trim($1) &quot; [shape=plaintext; label=&lt;&quot;)
        print(&quot;&lt;TABLE BORDER=\&quot;1\&quot; CELLBORDER=\&quot;0\&quot; CELLSPACING=\&quot;0\&quot; CELLPADDING=\&quot;3\&quot;&gt;&quot;)
        print(&quot;&lt;TR&gt;&quot;)
        print(&quot;&lt;TD COLSPAN=\&quot;5\&quot; BGCOLOR=\&quot;black\&quot;&gt;&lt;FONT color=\&quot;white\&quot;&gt;&lt;B&gt;&quot; trim($1) &quot;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;&quot;)
        print(&quot;&lt;/TR&gt;&quot;)

        print(&quot;&lt;TR&gt;&quot;)
        print(&quot;&lt;TD&gt;column&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;type&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;nullable&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;PK&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;FK&lt;/TD&gt;&quot;)
        print(&quot;&lt;/TR&gt;&quot;)
        port = 0
    }

    print(&quot;&lt;TR&gt;&quot;)
    print(&quot;&lt;TD port=\&quot;f&quot; ++port &quot;\&quot;&gt;&quot;trim($2)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($4)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($6)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($8)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($9)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;/TR&gt;&quot;)

    currentTableName = $1
}</code></pre>
<p>The END part closes the last TABLE and closes the graph.</p>
<pre><code>END {
    print(&quot;&lt;/TABLE&gt;&gt;]&quot;)
    print(&quot;}&quot;)
}</code></pre>
<p>This script will generate graphviz tables for all relations in the database schema.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="1126pt" height="228pt"
 viewBox="0.00 0.00 1126.00 228.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 224)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-224 1122,-224 1122,4 -4,4"/>
<!-- purchase_order -->
<g id="node1" class="node">
<title>purchase_order</title>
<polygon fill="#ffffff" stroke="transparent" stroke-width="2" points="645,-220 0,-220 0,0 645,0 645,-220"/>
<polygon fill="#000000" stroke="transparent" points="9.5,-194 9.5,-215 636.5,-215 636.5,-194 9.5,-194"/>
<text text-anchor="start" x="265" y="-201.8" font-family="Courier New" font-weight="bold" font-size="14.00" fill="#ffffff">purchase_order</text>
<text text-anchor="start" x="74.5" y="-179.8" font-family="Courier New" font-size="14.00" fill="#000000">column</text>
<text text-anchor="start" x="262.5" y="-179.8" font-family="Courier New" font-size="14.00" fill="#000000">type</text>
<text text-anchor="start" x="372.5" y="-179.8" font-family="Courier New" font-size="14.00" fill="#000000">nullable</text>
<text text-anchor="start" x="482.5" y="-179.8" font-family="Courier New" font-size="14.00" fill="#000000">PK</text>
<text text-anchor="start" x="579.5" y="-179.8" font-family="Courier New" font-size="14.00" fill="#000000">FK</text>
<text text-anchor="start" x="91" y="-158.8" font-family="Courier New" font-size="14.00" fill="#000000">id</text>
<text text-anchor="start" x="262.5" y="-158.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="397.5" y="-158.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="445.5" y="-158.8" font-family="Courier New" font-size="14.00" fill="#000000">PRIMARY KEY</text>
<text text-anchor="start" x="54" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">id_customer</text>
<text text-anchor="start" x="262.5" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="397.5" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="542.5" y="-137.8" font-family="Courier New" font-size="14.00" fill="#000000">FOREIGN KEY</text>
<text text-anchor="start" x="12.5" y="-116.8" font-family="Courier New" font-size="14.00" fill="#000000">purchase_order_number</text>
<text text-anchor="start" x="250.5" y="-116.8" font-family="Courier New" font-size="14.00" fill="#000000">varchar</text>
<text text-anchor="start" x="397.5" y="-116.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="74.5" y="-95.8" font-family="Courier New" font-size="14.00" fill="#000000">status</text>
<text text-anchor="start" x="192.5" y="-95.8" font-family="Courier New" font-size="14.00" fill="#000000">purchase_order_status</text>
<text text-anchor="start" x="397.5" y="-95.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="12.5" y="-74.8" font-family="Courier New" font-size="14.00" fill="#000000">frozen_purchase_order</text>
<text text-anchor="start" x="258.5" y="-74.8" font-family="Courier New" font-size="14.00" fill="#000000">jsonb</text>
<text text-anchor="start" x="393.5" y="-74.8" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="70.5" y="-53.8" font-family="Courier New" font-size="14.00" fill="#000000">changes</text>
<text text-anchor="start" x="258.5" y="-53.8" font-family="Courier New" font-size="14.00" fill="#000000">jsonb</text>
<text text-anchor="start" x="393.5" y="-53.8" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="58" y="-32.8" font-family="Courier New" font-size="14.00" fill="#000000">created_at</text>
<text text-anchor="start" x="242" y="-32.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="397.5" y="-32.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="58" y="-11.8" font-family="Courier New" font-size="14.00" fill="#000000">updated_at</text>
<text text-anchor="start" x="242" y="-11.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="397.5" y="-11.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<polygon fill="none" stroke="#000000" points="8,-4 8,-216 637,-216 637,-4 8,-4"/>
</g>
<!-- purchase_order_item -->
<g id="node2" class="node">
<title>purchase_order_item</title>
<polygon fill="#ffffff" stroke="transparent" stroke-width="2" points="1118,-209.5 663,-209.5 663,-10.5 1118,-10.5 1118,-209.5"/>
<polygon fill="#000000" stroke="transparent" points="672.5,-183 672.5,-204 1109.5,-204 1109.5,-183 672.5,-183"/>
<text text-anchor="start" x="812.5" y="-190.8" font-family="Courier New" font-weight="bold" font-size="14.00" fill="#ffffff">purchase_order_item</text>
<text text-anchor="start" x="692" y="-168.8" font-family="Courier New" font-size="14.00" fill="#000000">column</text>
<text text-anchor="start" x="785" y="-168.8" font-family="Courier New" font-size="14.00" fill="#000000">type</text>
<text text-anchor="start" x="845.5" y="-168.8" font-family="Courier New" font-size="14.00" fill="#000000">nullable</text>
<text text-anchor="start" x="955.5" y="-168.8" font-family="Courier New" font-size="14.00" fill="#000000">PK</text>
<text text-anchor="start" x="1052.5" y="-168.8" font-family="Courier New" font-size="14.00" fill="#000000">FK</text>
<text text-anchor="start" x="708.5" y="-147.8" font-family="Courier New" font-size="14.00" fill="#000000">id</text>
<text text-anchor="start" x="785" y="-147.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="870.5" y="-147.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="918.5" y="-147.8" font-family="Courier New" font-size="14.00" fill="#000000">PRIMARY KEY</text>
<text text-anchor="start" x="675.5" y="-126.8" font-family="Courier New" font-size="14.00" fill="#000000">id_article</text>
<text text-anchor="start" x="785" y="-126.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="870.5" y="-126.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="1015.5" y="-126.8" font-family="Courier New" font-size="14.00" fill="#000000">FOREIGN KEY</text>
<text text-anchor="start" x="683.5" y="-105.8" font-family="Courier New" font-size="14.00" fill="#000000">id_price</text>
<text text-anchor="start" x="785" y="-105.8" font-family="Courier New" font-size="14.00" fill="#000000">uuid</text>
<text text-anchor="start" x="870.5" y="-105.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="1015.5" y="-105.8" font-family="Courier New" font-size="14.00" fill="#000000">FOREIGN KEY</text>
<text text-anchor="start" x="692" y="-84.8" font-family="Courier New" font-size="14.00" fill="#000000">amount</text>
<text text-anchor="start" x="785" y="-84.8" font-family="Courier New" font-size="14.00" fill="#000000">int4</text>
<text text-anchor="start" x="870.5" y="-84.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="688" y="-63.8" font-family="Courier New" font-size="14.00" fill="#000000">changes</text>
<text text-anchor="start" x="781" y="-63.8" font-family="Courier New" font-size="14.00" fill="#000000">jsonb</text>
<text text-anchor="start" x="866.5" y="-63.8" font-family="Courier New" font-size="14.00" fill="#000000">YES</text>
<text text-anchor="start" x="675.5" y="-42.8" font-family="Courier New" font-size="14.00" fill="#000000">created_at</text>
<text text-anchor="start" x="764.5" y="-42.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="870.5" y="-42.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<text text-anchor="start" x="675.5" y="-21.8" font-family="Courier New" font-size="14.00" fill="#000000">updated_at</text>
<text text-anchor="start" x="764.5" y="-21.8" font-family="Courier New" font-size="14.00" fill="#000000">timestamp</text>
<text text-anchor="start" x="870.5" y="-21.8" font-family="Courier New" font-size="14.00" fill="#000000">NO</text>
<polygon fill="none" stroke="#000000" points="671,-14.5 671,-205.5 1110,-205.5 1110,-14.5 671,-14.5"/>
</g>
</g>
</svg>
</div>
<p>For the edges, the middle part must be extended with</p>
<pre><code>if (trim($9) == &quot;FOREIGN KEY&quot;) {
    edges[++edgeCounter] = trim($1) &quot; -&gt; &quot; trim($10) &quot;;&quot;
}</code></pre>
<p>This takes the current table name and point it to the target relation.</p>
<p>Some relations use a enum as a datatype. It would be nice, if this could be visible in the ERM.</p>
<pre><code>if (length(trim($5)) &gt; 0) {
    nodes[++nodeCounter] = trim($4) &quot;[shape=\&quot;box\&quot;, style=\&quot;rounded\&quot;, label=&lt;&lt;B&gt;&quot; trim($4) &quot; (enum)&lt;/B&gt;&lt;BR/&gt;&quot; trim($5) &quot;&gt;];&quot;
    edges[++edgeCounter] = trim($1) &quot;:f&quot; port &quot; -&gt; &quot; trim($4) &quot;;&quot;
}</code></pre>
<p>This adds new enum nodes to the graph and points it directly to the column used by the enum.</p>
<p>In the END part, the new nodes and edges must be added.</p>
<pre><code>for (node in nodes) {
    print(nodes[++i])
}
i = 0
for (edge in edges){
    print(edges[++i])
}</code></pre>
<p>Currently the enum values are comma separated. For the graph drawing it is easier, to have short lines.</p>
<p>A <code>sed 's/, /&lt;BR\/&gt;/g'</code> before script start will replace the commas with <code>&lt;BR/&gt;</code>.</p>
<h1 id="final">final</h1>
<p>The complete script glued together</p>
<pre><code>#!/bin/bash

psql -U postgres -c &quot;

SELECT c.table_name, 
	c.column_name, 
	c.data_type, 
	c.udt_name,
	(SELECT string_agg(e.enumlabel::TEXT, &#39;, &#39;)
		FROM pg_type t 
		   JOIN pg_enum e on t.oid = e.enumtypid  
		   JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE t.typname = c.udt_name) enum_values,
	c.is_nullable, 
	c.character_maximum_length,
	(SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
		JOIN information_schema.table_constraints tc 
			ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
		WHERE c.column_name = kcu.column_name 
			AND c.table_name = kcu.table_name 
			AND tc.constraint_type = &#39;PRIMARY KEY&#39; LIMIT 1
	) primary_key,
	(SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
		JOIN information_schema.table_constraints tc 
			ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
		WHERE c.column_name = kcu.column_name 
			AND c.table_name = kcu.table_name 
			AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
	) foreign_key,
	(SELECT ccu.table_name FROM information_schema.key_column_usage kcu
		JOIN information_schema.table_constraints tc 
			ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
		JOIN information_schema.constraint_column_usage ccu
			ON tc.constraint_name = ccu.constraint_name
		WHERE c.column_name = kcu.column_name 
			AND c.table_name = kcu.table_name 
			AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
	) reference_table,
	(SELECT ccu.column_name FROM information_schema.key_column_usage kcu
		JOIN information_schema.table_constraints tc 
			ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
		JOIN information_schema.constraint_column_usage ccu
			ON tc.constraint_name = ccu.constraint_name
		WHERE c.column_name = kcu.column_name 
			AND c.table_name = kcu.table_name 
			AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
	) reference_column
	
FROM information_schema.columns c 
	JOIN information_schema.tables t on c.table_name = t.table_name
WHERE c.table_schema = &#39;test&#39; AND t.table_type = &#39;BASE TABLE&#39;&quot; | sed &#39;s/, /&lt;BR\/&gt;/g&#39; | head -n -2 | tail -n+3 | awk -F&quot;|&quot; &#39;
function ltrim(s) {
    sub(/^[ \t\r\n]+/, &quot;&quot;, s);
    return s
}

function rtrim(s) {
    sub(/[ \t\r\n]+$/, &quot;&quot;, s);
    return s
}

function trim(s) {
    return rtrim(ltrim(s));
}

BEGIN {
    print(&quot;digraph {&quot;)
    print(&quot;graph [overlap=false;splines=true;regular=true];&quot;)
    print(&quot;node [shape=Mrecord; fontname=\&quot;Courier New\&quot; style=\&quot;filled, bold\&quot; fillcolor=\&quot;white\&quot;, fontcolor=\&quot;black\&quot;];&quot;)
}

{
   if (length(currentTableName) &gt; 0 &amp;&amp; $1 != currentTableName) {
       print(&quot;&lt;/TABLE&gt;&gt;]&quot;)
   }
 
   if ($1 != currentTableName) {
        print(&quot;&quot;)
        print(trim($1) &quot; [shape=plaintext; label=&lt;&quot;)
        print(&quot;&lt;TABLE BORDER=\&quot;1\&quot; CELLBORDER=\&quot;0\&quot; CELLSPACING=\&quot;0\&quot; CELLPADDING=\&quot;3\&quot;&gt;&quot;)
        print(&quot;&lt;TR&gt;&quot;)
        print(&quot;&lt;TD COLSPAN=\&quot;5\&quot; BGCOLOR=\&quot;black\&quot;&gt;&lt;FONT color=\&quot;white\&quot;&gt;&lt;B&gt;&quot; trim($1) &quot;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;&quot;)
        print(&quot;&lt;/TR&gt;&quot;)

        print(&quot;&lt;TR&gt;&quot;)
        print(&quot;&lt;TD&gt;column&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;type&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;nullable&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;PK&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;FK&lt;/TD&gt;&quot;)
        print(&quot;&lt;/TR&gt;&quot;)
        port = 0
    }

    print(&quot;&lt;TR&gt;&quot;)
    print(&quot;&lt;TD port=\&quot;f&quot; ++port &quot;\&quot;&gt;&quot;trim($2)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($4)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($6)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($8)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($9)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;/TR&gt;&quot;)

    if (trim($9) == &quot;FOREIGN KEY&quot;) {
        edges[++edgeCounter] = trim($1) &quot; -&gt; &quot; trim($10) &quot;;&quot;
    }

    if (length(trim($5)) &gt; 0) {
        nodes[++nodeCounter] = trim($4) &quot;[shape=\&quot;box\&quot;, style=\&quot;rounded\&quot;, label=&lt;&lt;B&gt;&quot; trim($4) &quot; (enum)&lt;/B&gt;&lt;BR/&gt;&quot; trim($5) &quot;&gt;];&quot;
        edges[++edgeCounter] = trim($1) &quot;:f&quot; port &quot; -&gt; &quot; trim($4) &quot;;&quot;
    }
   
    currentTableName = $1
}

END {
    print(&quot;&lt;/TABLE&gt;&gt;]&quot;)

    for (node in nodes) {
        print(nodes[++i])
    }
    i = 0
    for (edge in edges){
        print(edges[++i])
    }
    print(&quot;}&quot;)
}&#39;</code></pre>
<p>I have put the result in a <a href="/images/schema.svg">external file</a> because the graph has become to big in size. Not so bad, I think.</p>
<p>Update 2017-10-12:</p>
<p>I added a <a href="https://github.com/enter-haken/scripts/blob/master/schema.sh">schema.sh</a> script to my <a href="https://github.com/enter-haken/scripts">script collection</a>.</p>]]></summary>
</entry>
<entry>
    <title>Working with immutable data in Postgres</title>
    <link href="https://enter-haken.github.io/posts/2017-07-15-database-architecture-part2.html" />
    <id>https://enter-haken.github.io/posts/2017-07-15-database-architecture-part2.html</id>
    <published>2017-07-15T00:00:00Z</published>
    <updated>2017-07-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>After taking a <a href="/posts/2017-07-06-database-architecture.html">first look</a> at the JSON columns, let’s look at a few possible applications. Imagine a simple shop system with articles, prices and purchase orders.</p>
<p>An article can be <code>active</code> or <code>inactive</code>.</p>
<pre><code>CREATE TYPE article_status AS ENUM (
    &#39;active&#39;,
    &#39;inactive&#39;
);</code></pre>
<p>Every article has an <code>article_number</code>.</p>
<pre><code>CREATE TABLE article (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    article_number VARCHAR(128) UNIQE NOT NULL DEFAULT &#39;&#39;,
    name VARCHAR(128),
    description VARCHAR(2048),
    status article_status NOT NULL DEFAULT &#39;active&#39;
);</code></pre>
<p>You can see that <code>id</code> and <code>article_number</code> are unique, so both could be used as a primary key. This is not normalized in a usual way.</p>
<p>There are a few points, why to stick to this solution.</p>
<!--more-->
<ul>
<li>A primary key should only be used to identify a record. Not more, not less.</li>
<li>There must be no reuse for a business case, like it would be for <code>article_number</code>. The <code>article_number</code> could not be changed so easily, after being promoted to a primary key.</li>
<li>A <code>article_number</code> identifies an article entity not a database record.</li>
</ul>
<h1 id="prices-with-history">prices with history</h1>
<p>Every <code>article</code> can have a price.</p>
<pre><code>CREATE TABLE price (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_article UUID NOT NULL REFERENCES article(id),
    price real NOT NULL DEFAULT 0.0,
    scale_lower_limit INT NOT NULL DEFAULT 1,
    scale_upper_limit INT NOT NULL DEFAULT 2147483647,
    valid_from DATE NOT NULL DEFAULT current_date,
    valid_to DATE NOT NULL DEFAULT current_date + interval &#39;1 year&#39;
);</code></pre>
<p>An <code>article</code> can have multiple prices over time. There can be multiple price scales. A <code>price</code> will be more likely changed than an <code>article</code>. Price changes may be interesting for reporting issues.</p>
<p>You can store these changes in a JSONB column.</p>
<pre><code>ALTER TABLE price ADD COLUMN history JSONB;</code></pre>
<p>Every time, a price record changes. these changes should be saved. These saved items should be immutable over time.</p>
<pre><code>CREATE FUNCTION history_trigger() RETURNS TRIGGER AS $$.

BEGIN
    IF NEW.history IS NULL THEN
        NEW.history := &#39;[]&#39;::JSONB;
    END IF;

    NEW.history := NEW.history::JSONB || (row_to_json(OLD)::JSONB - &#39;history&#39;);
    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER price_history_trigger BEFORE UPDATE ON price
    FOR EACH ROW EXECUTE PROCEDURE history_trigger();</code></pre>
<p>First of all, an <code>article</code> has to be created.</p>
<pre><code>$ psql -U postgres -c &quot;INSERT INTO test.article (article_number, name, description) \
&gt; VALUES (&#39;AB12345&#39;, &#39;Test article&#39;,&#39;Test desc&#39;)&quot;
INSERT 0 1</code></pre>
<p>For this newly inserted article</p>
<pre><code>$ psql -U postgres -c &quot;SELECT * from test.article&quot; | cat
                  id                  | article_number |     name     | description | status |         created_at         |         updated_at         
--------------------------------------+----------------+--------------+-------------+--------+----------------------------+----------------------------
 f12def37-3de6-4985-8912-054891631499 | AB12345        | Test article | Test desc   | active | 2017-07-15 19:17:14.727931 | 2017-07-15 19:17:14.727931
(1 row)</code></pre>
<p>you can add a <code>price</code>,</p>
<pre><code>$ psql -U postgres -c &quot;INSERT INTO test.price (id_article, price) \
&gt; VALUES (&#39;f12def37-3de6-4985-8912-054891631499&#39;,50.5)&quot;
INSERT 0 1

$ psql -U postgres -c &quot;SELECT * FROM test.price&quot; | cat
                  id                  |              id_article              | price | scale_lower_limit | scale_upper_limit | valid_from |  valid_to  | history |         created_at         |         updated_at         
--------------------------------------+--------------------------------------+-------+-------------------+-------------------+------------+------------+---------+----------------------------+----------------------------
 3a113796-05fd-4ff3-a33f-b08f92c01cd8 | f12def37-3de6-4985-8912-054891631499 |  50.5 |                 1 |        2147483647 | 2017-07-15 | 2018-07-15 |         | 2017-07-15 19:21:39.245331 | 2017-07-15 19:21:39.245331
(1 row)</code></pre>
<p>and raise the price value for the <code>price</code> record.</p>
<pre><code>$ psql -U postgres -c &quot;UPDATE test.price SET price = 70.2 WHERE id = &#39;3a113796-05fd-4ff3-a33f-b08f92c01cd8&#39;&quot;
UPDATE 1

$ psql -U postgres -c &quot;SELECT * FROM test.price&quot; | cat
                  id                  |              id_article              | price | scale_lower_limit | scale_upper_limit | valid_from |  valid_to  |                                                                                                                                                           history                                                                                                                                                            |         created_at         |         updated_at

 3a113796-05fd-4ff3-a33f-b08f92c01cd8 | f12def37-3de6-4985-8912-054891631499 |  70.2 |                 1 |        2147483647 | 2017-07-15 | 2018-07-15 | [{&quot;id&quot;: &quot;3a113796-05fd-4ff3-a33f-b08f92c01cd8&quot;, &quot;price&quot;: 50.5, &quot;valid_to&quot;: &quot;2018-07-15&quot;, &quot;created_at&quot;: &quot;2017-07-15T19:21:39.245331&quot;, &quot;id_article&quot;: &quot;f12def37-3de6-4985-8912-054891631499&quot;, &quot;updated_at&quot;: &quot;2017-07-15T19:21:39.245331&quot;, &quot;valid_from&quot;: &quot;2017-07-15&quot;, &quot;scale_lower_limit&quot;: 1, &quot;scale_upper_limit&quot;: 2147483647}] | 2017-07-15 19:21:39.245331 | 2017-07-15 19:25:04.672829
(1 row)</code></pre>
<p>The <code>history</code> is updated every time, a <code>price</code> record is updated.</p>
<h1 id="customer">customer</h1>
<p>A <code>customer</code> is a kind of <code>person</code> which has a <code>customer_number</code></p>
<pre><code>CREATE TABLE customer (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_person UUID NOT NULL REFERENCES person(id),
    customer_number VARCHAR(128) NOT NULL DEFAULT &#39;&#39;,
    json_view JSONB
);</code></pre>
<p>As you can see, a <code>json_view</code> column is added to the <code>customer</code>. The only difference between a <code>person</code> and a customer is the <code>customer_number</code>.</p>
<p>Analog to the <code>persons</code> <a href="/posts/2017-07-06-database-architecture.html#json-column">update function</a> we can write an update function for a <code>customer</code></p>
<pre><code>CREATE FUNCTION update_json_view_customer(id_customer UUID) RETURNS VOID AS $$
DECLARE
    customer_raw JSONB;
    person_id UUID;
BEGIN

    IF NOT EXISTS (SELECT 1 FROM person p 
        JOIN customer c on p.id = c.id_person 
        WHERE p.json_view IS NOT NULL AND c.id = id_customer) THEN

        SELECT id_person FROM customer WHERE id = id_customer INTO person_id;

        RAISE NOTICE &#39;update json_view for person %&#39;, person_id;

        perform update_json_view_person(person_id);
    END IF;

    SELECT row_to_json(c) FROM 
        (SELECT c.id, customer_number, p.json_view AS person_json_view FROM customer c
            JOIN person p on c.id_person = p.id
            WHERE c.id = id_customer LIMIT 1) c INTO customer_raw;

    customer_raw := customer_raw || jsonb_build_object(&#39;person&#39;, customer_raw-&gt;&#39;person_json_view&#39;);
    customer_raw := customer_raw - &#39;person_json_view&#39;;

    UPDATE customer SET json_view = customer_raw WHERE id = id_customer;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>The <code>json_view</code> of the <code>person</code> is reused.</p>
<p>Let’s take a inserted person.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT id FROM test.person&quot;
                  id
--------------------------------------
 da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2
(1 row)</code></pre>
<p>and insert a new <code>customer</code> for this <code>person</code>.</p>
<pre><code>$ psql -U postgres -c &quot;INSERT INTO test.customer (customer_number, id_person) \
VALUES (&#39;AB12345&#39;, &#39;da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2&#39;);&quot;
INSERT 0 1</code></pre>
<p>The newly inserted <code>customer</code> looks like</p>
<pre><code>$ psql -U postgres -c &quot;SELECT * FROM test.customer&quot; | cat
                  id                  |              id_person               | customer_number | json_view |         created_at         |         updated_at         
--------------------------------------+--------------------------------------+-----------------+-----------+----------------------------+----------------------------
 88a99ea7-4281-496b-9c95-3625101177ca | da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2 | AB12345         |           | 2017-07-15 18:41:27.811324 | 2017-07-15 18:41:27.811324
(1 row)</code></pre>
<p>Now the <code>customer</code>’s <code>json_view</code> must be filled.</p>
<pre><code>$ psql -U postgres -c &quot;SET search_path TO test,public; \
&gt;  SELECT test.update_json_view_customer(&#39;88a99ea7-4281-496b-9c95-3625101177ca&#39;);&quot;
 update_json_view_customer 
---------------------------
  
(1 row)

$ psql -U postgres -c &quot;SELECT * FROM test.customer&quot; | cat
                  id                  |              id_person               | customer_number |json_view|         created_at         |         updated_at         
--------------------------------------+--------------------------------------+-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------+----------------------------
 88a99ea7-4281-496b-9c95-3625101177ca | da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2 | AB12345         | {&quot;id&quot;: &quot;88a99ea7-4281-496b-9c95-3625101177ca&quot;, &quot;person&quot;: {&quot;id&quot;: &quot;da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;addresses&quot;: [{&quot;id&quot;: &quot;9a78ceb0-5169-4bca-bbf5-aac54fcaa95a&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44339&quot;, &quot;address_type&quot;: &quot;private&quot;, &quot;house_number&quot;: &quot;123&quot;}, {&quot;id&quot;: &quot;c69ec275-0a05-42ce-80ea-1ea1b5bcbd78&quot;, &quot;city&quot;: &quot;Bochum&quot;, &quot;street&quot;: &quot;Fakeroad&quot;, &quot;postal_code&quot;: &quot;44866&quot;, &quot;address_type&quot;: &quot;work&quot;, &quot;house_number&quot;: &quot;321&quot;}], &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;, &quot;phone_numbers&quot;: [{&quot;id&quot;: &quot;0df74379-6512-4f54-a1a7-fee1c1605342&quot;, &quot;phone_number&quot;: &quot;+49231123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;landline&quot;, &quot;is_primary_phone_number&quot;: true}, {&quot;id&quot;: &quot;a9d36784-7af3-47e8-b357-2f03500f7d66&quot;, &quot;phone_number&quot;: &quot;+49151123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;cellular_network&quot;, &quot;is_primary_phone_number&quot;: false}], &quot;email_addresses&quot;: [{&quot;id&quot;: &quot;ff2fee9e-490f-49b2-8e0e-69d5bddd2ca0&quot;, &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;is_primary_email_address&quot;: false}]}, &quot;customer_number&quot;: &quot;AB12345&quot;} | 2017-07-15 18:41:27.811324 | 2017-07-15 18:50:47.591534
(1 row)</code></pre>
<p>a little bit more beautifull</p>
<pre><code>{
    &quot;id&quot;: &quot;88a99ea7-4281-496b-9c95-3625101177ca&quot;,
    &quot;person&quot;: {
        &quot;id&quot;: &quot;da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2&quot;,
        &quot;notes&quot;: null,
        &quot;website&quot;: null,
        &quot;addresses&quot;: [{
            &quot;id&quot;: &quot;9a78ceb0-5169-4bca-bbf5-aac54fcaa95a&quot;,
            &quot;city&quot;: &quot;Dortmund&quot;,
            &quot;street&quot;: &quot;Fakestreet&quot;,
            &quot;postal_code&quot;: &quot;44339&quot;,
            &quot;address_type&quot;: &quot;private&quot;,
            &quot;house_number&quot;: &quot;123&quot;
        }, {
            &quot;id&quot;: &quot;c69ec275-0a05-42ce-80ea-1ea1b5bcbd78&quot;,
            &quot;city&quot;: &quot;Bochum&quot;,
            &quot;street&quot;: &quot;Fakeroad&quot;,
            &quot;postal_code&quot;: &quot;44866&quot;,
            &quot;address_type&quot;: &quot;work&quot;,
            &quot;house_number&quot;: &quot;321&quot;
        }],
        &quot;last_name&quot;: &quot;Hake&quot;,
        &quot;birth_date&quot;: null,
        &quot;first_name&quot;: &quot;Jan Frederik&quot;,
        &quot;phone_numbers&quot;: [{
            &quot;id&quot;: &quot;0df74379-6512-4f54-a1a7-fee1c1605342&quot;,
            &quot;phone_number&quot;: &quot;+49231123456789&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;communication_network&quot;: &quot;landline&quot;,
            &quot;is_primary_phone_number&quot;: true
        }, {
            &quot;id&quot;: &quot;a9d36784-7af3-47e8-b357-2f03500f7d66&quot;,
            &quot;phone_number&quot;: &quot;+49151123456789&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;communication_network&quot;: &quot;cellular_network&quot;,
            &quot;is_primary_phone_number&quot;: false
        }],
        &quot;email_addresses&quot;: [{
            &quot;id&quot;: &quot;ff2fee9e-490f-49b2-8e0e-69d5bddd2ca0&quot;,
            &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;is_primary_email_address&quot;: false
        }]
    },
    &quot;customer_number&quot;: &quot;AB12345&quot;
}</code></pre>
<h1 id="a-purchase-process">a purchase process</h1>
<p>Now we have a <code>customer</code> and <code>articles</code> with <code>prices</code>. The next step is to buy something. But first we take a look at a common workflow, when you buy something in a shop.</p>
<div class="overflow"><?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="1015pt" height="233pt"
 viewBox="0.00 0.00 1015.05 233.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 229)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-229 1011.0475,-229 1011.0475,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="108.0475,-8 108.0475,-217 373.0475,-217 373.0475,-8 108.0475,-8"/>
<text text-anchor="middle" x="240.5475" y="-201.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">mutable</text>
<text text-anchor="middle" x="240.5475" y="-186.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">data</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="#d3d3d3" stroke="#d3d3d3" points="445.0475,-89 445.0475,-181 941.0475,-181 941.0475,-89 445.0475,-89"/>
<text text-anchor="middle" x="693.0475" y="-165.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">immutable</text>
<text text-anchor="middle" x="693.0475" y="-150.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">data</text>
</g>
<!-- po -->
<g id="node1" class="node">
<title>po</title>
<path fill="#ffffff" stroke="#ffffff" d="M172.0475,-130C172.0475,-130 128.0475,-130 128.0475,-130 122.0475,-130 116.0475,-124 116.0475,-118 116.0475,-118 116.0475,-104 116.0475,-104 116.0475,-98 122.0475,-92 128.0475,-92 128.0475,-92 172.0475,-92 172.0475,-92 178.0475,-92 184.0475,-98 184.0475,-104 184.0475,-104 184.0475,-118 184.0475,-118 184.0475,-124 178.0475,-130 172.0475,-130"/>
<text text-anchor="middle" x="150.0475" y="-114.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">purchase</text>
<text text-anchor="middle" x="150.0475" y="-99.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">order</text>
</g>
<!-- rts -->
<g id="node2" class="node">
<title>rts</title>
<path fill="#ffffff" stroke="#ffffff" d="M353.0475,-171C353.0475,-171 313.0475,-171 313.0475,-171 307.0475,-171 301.0475,-165 301.0475,-159 301.0475,-159 301.0475,-145 301.0475,-145 301.0475,-139 307.0475,-133 313.0475,-133 313.0475,-133 353.0475,-133 353.0475,-133 359.0475,-133 365.0475,-139 365.0475,-145 365.0475,-145 365.0475,-159 365.0475,-159 365.0475,-165 359.0475,-171 353.0475,-171"/>
<text text-anchor="middle" x="333.0475" y="-155.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">ready to</text>
<text text-anchor="middle" x="333.0475" y="-140.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">send</text>
</g>
<!-- po&#45;&gt;rts -->
<g id="edge1" class="edge">
<title>po&#45;&gt;rts</title>
<path fill="none" stroke="#000000" d="M184.2456,-125.2332C195.7702,-129.5675 208.8132,-133.979 221.0475,-137 243.7986,-142.6178 269.7033,-146.2589 290.8651,-148.5448"/>
<polygon fill="#000000" stroke="#000000" points="290.5347,-152.0291 300.8379,-149.5608 291.2442,-145.0652 290.5347,-152.0291"/>
</g>
<!-- item -->
<g id="node3" class="node">
<title>item</title>
<path fill="#ffffff" stroke="#ffffff" d="M348.0475,-99C348.0475,-99 318.0475,-99 318.0475,-99 312.0475,-99 306.0475,-93 306.0475,-87 306.0475,-87 306.0475,-75 306.0475,-75 306.0475,-69 312.0475,-63 318.0475,-63 318.0475,-63 348.0475,-63 348.0475,-63 354.0475,-63 360.0475,-69 360.0475,-75 360.0475,-75 360.0475,-87 360.0475,-87 360.0475,-93 354.0475,-99 348.0475,-99"/>
<text text-anchor="middle" x="333.0475" y="-77.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">items</text>
</g>
<!-- po&#45;&gt;item -->
<g id="edge2" class="edge">
<title>po&#45;&gt;item</title>
<path fill="none" stroke="#000000" d="M164.8589,-91.7504C177.8064,-76.628 198.0923,-56.7161 221.0475,-48 245.9205,-38.5558 274.7288,-47.4698 296.8993,-58.4002"/>
<polygon fill="#000000" stroke="#000000" points="295.483,-61.6097 305.9637,-63.1605 298.7376,-55.4123 295.483,-61.6097"/>
<text text-anchor="middle" x="242.5475" y="-51.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">add</text>
</g>
<!-- po&#45;&gt;item -->
<g id="edge3" class="edge">
<title>po&#45;&gt;item</title>
<path fill="none" stroke="#000000" d="M184.3455,-105.1457C195.9917,-103.1731 209.0829,-100.9725 221.0475,-99 245.9292,-94.898 273.9406,-90.3962 295.7258,-86.9208"/>
<polygon fill="#000000" stroke="#000000" points="296.5544,-90.333 305.8793,-85.3034 295.4532,-83.4202 296.5544,-90.333"/>
<text text-anchor="middle" x="242.5475" y="-102.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">modify</text>
</g>
<!-- po&#45;&gt;item -->
<g id="edge4" class="edge">
<title>po&#45;&gt;item</title>
<path fill="none" stroke="#000000" d="M184.1496,-116.2587C207.0314,-118.7282 237.692,-119.9781 264.0475,-114 275.1519,-111.4812 286.559,-106.9473 296.82,-102.0307"/>
<polygon fill="#000000" stroke="#000000" points="298.5316,-105.0874 305.8797,-97.4549 295.3756,-98.8392 298.5316,-105.0874"/>
<text text-anchor="middle" x="242.5475" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">remove</text>
</g>
<!-- snd -->
<g id="node4" class="node">
<title>snd</title>
<path fill="#ffffff" stroke="#ffffff" d="M495.0475,-134C495.0475,-134 465.0475,-134 465.0475,-134 459.0475,-134 453.0475,-128 453.0475,-122 453.0475,-122 453.0475,-110 453.0475,-110 453.0475,-104 459.0475,-98 465.0475,-98 465.0475,-98 495.0475,-98 495.0475,-98 501.0475,-98 507.0475,-104 507.0475,-110 507.0475,-110 507.0475,-122 507.0475,-122 507.0475,-128 501.0475,-134 495.0475,-134"/>
<text text-anchor="middle" x="480.0475" y="-112.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">send</text>
</g>
<!-- rts&#45;&gt;snd -->
<g id="edge5" class="edge">
<title>rts&#45;&gt;snd</title>
<path fill="none" stroke="#000000" d="M365.388,-151.2603C385.77,-150.0502 412.4171,-147.0881 435.0475,-140 437.82,-139.1316 440.621,-138.0916 443.3978,-136.9381"/>
<polygon fill="#000000" stroke="#000000" points="445.0521,-140.0296 452.668,-132.6642 442.1213,-133.6726 445.0521,-140.0296"/>
</g>
<!-- item&#45;&gt;snd -->
<g id="edge9" class="edge">
<title>item&#45;&gt;snd</title>
<path fill="none" stroke="#000000" d="M360.2807,-75.8051C381.3117,-72.95 410.8167,-71.5003 435.0475,-80 442.1872,-82.5045 449.0356,-86.6709 455.1418,-91.2987"/>
<polygon fill="#000000" stroke="#000000" points="453.033,-94.0968 462.9661,-97.7827 457.4996,-88.707 453.033,-94.0968"/>
<text text-anchor="middle" x="409.0475" y="-128.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">frozen</text>
<text text-anchor="middle" x="409.0475" y="-113.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">purchase</text>
<text text-anchor="middle" x="409.0475" y="-98.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">order</text>
<text text-anchor="middle" x="409.0475" y="-83.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">items</text>
</g>
<!-- delivered -->
<g id="node5" class="node">
<title>delivered</title>
<path fill="#ffffff" stroke="#ffffff" d="M638.0475,-134C638.0475,-134 594.0475,-134 594.0475,-134 588.0475,-134 582.0475,-128 582.0475,-122 582.0475,-122 582.0475,-110 582.0475,-110 582.0475,-104 588.0475,-98 594.0475,-98 594.0475,-98 638.0475,-98 638.0475,-98 644.0475,-98 650.0475,-104 650.0475,-110 650.0475,-110 650.0475,-122 650.0475,-122 650.0475,-128 644.0475,-134 638.0475,-134"/>
<text text-anchor="middle" x="616.0475" y="-112.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">delivered</text>
</g>
<!-- snd&#45;&gt;delivered -->
<g id="edge6" class="edge">
<title>snd&#45;&gt;delivered</title>
<path fill="none" stroke="#000000" d="M507.2423,-116C525.6948,-116 550.5087,-116 571.78,-116"/>
<polygon fill="#000000" stroke="#000000" points="571.8943,-119.5001 581.8942,-116 571.8942,-112.5001 571.8943,-119.5001"/>
</g>
<!-- rfi -->
<g id="node6" class="node">
<title>rfi</title>
<path fill="#ffffff" stroke="#ffffff" d="M782.0475,-135C782.0475,-135 737.0475,-135 737.0475,-135 731.0475,-135 725.0475,-129 725.0475,-123 725.0475,-123 725.0475,-109 725.0475,-109 725.0475,-103 731.0475,-97 737.0475,-97 737.0475,-97 782.0475,-97 782.0475,-97 788.0475,-97 794.0475,-103 794.0475,-109 794.0475,-109 794.0475,-123 794.0475,-123 794.0475,-129 788.0475,-135 782.0475,-135"/>
<text text-anchor="middle" x="759.5475" y="-119.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">ready for</text>
<text text-anchor="middle" x="759.5475" y="-104.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">invoice</text>
</g>
<!-- delivered&#45;&gt;rfi -->
<g id="edge7" class="edge">
<title>delivered&#45;&gt;rfi</title>
<path fill="none" stroke="#000000" d="M650.055,-116C669.3403,-116 693.7112,-116 714.562,-116"/>
<polygon fill="#000000" stroke="#000000" points="714.7873,-119.5001 724.7873,-116 714.7873,-112.5001 714.7873,-119.5001"/>
</g>
<!-- inv -->
<g id="node7" class="node">
<title>inv</title>
<path fill="#ffffff" stroke="#ffffff" d="M921.0475,-134C921.0475,-134 881.0475,-134 881.0475,-134 875.0475,-134 869.0475,-128 869.0475,-122 869.0475,-122 869.0475,-110 869.0475,-110 869.0475,-104 875.0475,-98 881.0475,-98 881.0475,-98 921.0475,-98 921.0475,-98 927.0475,-98 933.0475,-104 933.0475,-110 933.0475,-110 933.0475,-122 933.0475,-122 933.0475,-128 927.0475,-134 921.0475,-134"/>
<text text-anchor="middle" x="901.0475" y="-112.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">invoiced</text>
</g>
<!-- rfi&#45;&gt;inv -->
<g id="edge8" class="edge">
<title>rfi&#45;&gt;inv</title>
<path fill="none" stroke="#000000" d="M794.1623,-116C813.6203,-116 838.063,-116 858.6615,-116"/>
<polygon fill="#000000" stroke="#000000" points="858.7301,-119.5001 868.7301,-116 858.73,-112.5001 858.7301,-119.5001"/>
</g>
<!-- end -->
<g id="node9" class="node">
<title>end</title>
<polygon fill="none" stroke="#000000" points="1007.0475,-134.5 970.0475,-134.5 970.0475,-97.5 1007.0475,-97.5 1007.0475,-134.5"/>
<polyline fill="none" stroke="#000000" points="982.0475,-134.5 970.0475,-122.5 "/>
<polyline fill="none" stroke="#000000" points="970.0475,-109.5 982.0475,-97.5 "/>
<polyline fill="none" stroke="#000000" points="995.0475,-97.5 1007.0475,-109.5 "/>
<polyline fill="none" stroke="#000000" points="1007.0475,-122.5 995.0475,-134.5 "/>
<text text-anchor="middle" x="988.5475" y="-112.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">end</text>
</g>
<!-- inv&#45;&gt;end -->
<g id="edge11" class="edge">
<title>inv&#45;&gt;end</title>
<path fill="none" stroke="#000000" d="M933.1324,-116C941.8432,-116 951.2196,-116 959.7373,-116"/>
<polygon fill="#000000" stroke="#000000" points="959.9526,-119.5001 969.9526,-116 959.9525,-112.5001 959.9526,-119.5001"/>
</g>
<!-- start -->
<g id="node8" class="node">
<title>start</title>
<polygon fill="none" stroke="#000000" points="39.5238,-129 -.0238,-111 39.5238,-93 79.0713,-111 39.5238,-129"/>
<polyline fill="none" stroke="#000000" points="10.8981,-115.9711 10.8981,-106.0289 "/>
<polyline fill="none" stroke="#000000" points="28.6018,-97.9711 50.4457,-97.9711 "/>
<polyline fill="none" stroke="#000000" points="68.1494,-106.0289 68.1494,-115.9711 "/>
<polyline fill="none" stroke="#000000" points="50.4457,-124.0289 28.6018,-124.0289 "/>
<text text-anchor="middle" x="39.5238" y="-107.3" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">start</text>
</g>
<!-- start&#45;&gt;po -->
<g id="edge10" class="edge">
<title>start&#45;&gt;po</title>
<path fill="none" stroke="#000000" d="M79.1132,-111C87.75,-111 96.9437,-111 105.7503,-111"/>
<polygon fill="#000000" stroke="#000000" points="105.8541,-114.5001 115.8541,-111 105.854,-107.5001 105.8541,-114.5001"/>
</g>
</g>
</svg>
</div>
<p>When you enter a web shop, you can search for articles, and put them into a shopping cart. While you are creating your cart, you can change the amount of an article, or delete previously added ones. When you are satisfied with your selection, you finalize your requisition. After finalization, parts of your cart like the items can not be changed any more.</p>
<p>Article descriptions or names can be changed over time. Prices may vary.</p>
<h2 id="a-purchase-order">a purchase order</h2>
<p>A purchase order can have one of the following states</p>
<pre><code>CREATE TYPE purchase_order_status AS ENUM (
    &#39;requisition&#39;, 
    &#39;ready_to_send&#39;, 
    &#39;send&#39;, 
    &#39;delivered&#39;,
    &#39;ready_for_invoice&#39;,
    &#39;invoiced&#39;,
    &#39;finalized&#39;);</code></pre>
<p>It is assumed, that every purchase order has a relation to a <code>customer</code>. For this example this is enough.</p>
<pre><code>CREATE TABLE purchase_order (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_customer UUID NOT NULL REFERENCES customer(id),
    purchase_order_number VARCHAR(128) NOT NULL UNIQUE DEFAULT &#39;&#39;,
    status purchase_order_status NOT NULL DEFAULT &#39;requisition&#39;
);</code></pre>
<p>Every purchase order has a unique <code>purchase_order_number</code>.</p>
<pre><code>CREATE TABLE purchase_order_item (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_purchase_order UUID NOT NULL REFERENCES purchase_order(id),
    id_article UUID NOT NULL REFERENCES article(id),
    id_price UUID NOT NULL REFERENCES price(id),
    amount int NOT NULL DEFAULT 1
);</code></pre>
<p>A <code>purchase_order_item</code> has a reference to a <code>purchase_order</code>.</p>
<p>Unless we are in a mutable state, There is no need for storing extra data. This changes, when the <code>purchase_order_status</code> changes to <code>send</code>. The <code>purchase_order_items</code> can’t be changed any more. The purchased items are on their way to the <code>customer</code>. The only thing, which can change is the <code>purchase_order_status</code>, but only forward in the chain.</p>
<p>This is the point, where the items should be saved in a immutable way. There are no immutable types in Postgres, but it can be made hard for a process to change such data columns, which should not be updated.</p>
<p>For our example, we must store the article, with it’s price at the time of purchase. We also need the <code>customer</code>, who must have some kind of address, to send the delivery to.</p>
<pre><code>ALTER TABLE purchase_order ADD COLUMN frozen_purchase_order JSONB;</code></pre>
<p>This column should be updated, when the <code>purchase_order_status</code> is set to <code>send</code>. So, we need a trigger function which listens on state changes. The scaffold looks like</p>
<pre><code>CREATE FUNCTION freeze_purchase_order() RETURNS TRIGGER AS $$
BEGIN
    return NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER freeze_purchase_order_trigger BEFORE UPDATE ON purchase_order
    FOR EACH ROW EXECUTE PROCEDURE freeze_purchase_order();</code></pre>
<p>Now we listen to the <code>send</code> state. At this point, the purchase order some data have to be frozen. Everything below this state can be ignored.</p>
<pre><code>IF NEW.status = ANY(&#39;{requisition,ready_to_send}&#39;::purchase_order_status[]) THEN
    RAISE NOTICE &#39;nothing to do&#39;;
    RETURN NEW;
END IF;</code></pre>
<p>To store some JSON objects we define some variables</p>
<pre><code>DECLARE
    frozen_purchase_order JSONB;
    customer JSONB;
    purchase_order_items JSONB;
    rawItem RECORD;</code></pre>
<p>The <code>frozen_purchase_order</code> will be the result JSON. First we get the current <code>customer</code></p>
<pre><code>SELECT json_view FROM customer WHERE id = NEW.id_customer INTO customer;</code></pre>
<p>A purchase order item contains an article and a price. The function to get a json representation for a item can look like</p>
<pre><code>CREATE FUNCTION get_json_from_item(item_id UUID) RETURNS JSONB AS $$
DECLARE
    result JSONB;
    article JSONB;
    price JSONB;
BEGIN
    SELECT row_to_json(item) FROM (SELECT id_article, id_price, amount FROM purchase_order_item WHERE id = item_id) item INTO result; 
    SELECT row_to_json(rawArticle) FROM (SELECT id, article_number, name, description FROM article WHERE id = (result-&gt;&gt;&#39;id_article&#39;)::UUID) rawArticle INTO article;
    SELECT row_to_json(rawPrice) FROM (SELECT id, p.price, scale_lower_limit, scale_upper_limit, valid_from, valid_to FROM price p WHERE id = (result-&gt;&gt;&#39;id_price&#39;)::UUID) rawPrice INTO price;

    result := result 
     || jsonb_build_object(&#39;article&#39;, article)
     || jsonb_build_object(&#39;price&#39;, price);

    result := result - &#39;id_article&#39;;
    result := result - &#39;id_price&#39;;

    RETURN result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>The purchase order trigger function can consume this function as following</p>
<pre><code>purchase_order_items := &#39;[]&#39;::JSONB;

FOR rawItem IN (SELECT get_json_from_item(id)::JSONB AS get_json FROM purchase_order_item WHERE id_purchase_order = NEW.id) 
LOOP
    purchase_order_items := purchase_order_items || rawItem.get_json;    
END LOOP;</code></pre>
<p>The current NEW record must be set as root for our result JSON.</p>
<pre><code>SELECT row_to_json(NEW.*) INTO frozen_purchase_order;</code></pre>
<p>Then the <code>customer</code> and the <code>items</code> have to be merged into the result.</p>
<pre><code>frozen_purchase_order := frozen_purchase_order 
    || jsonb_build_object(&#39;items&#39;, purchase_order_items)
    || jsonb_build_object(&#39;customer&#39;, customer);</code></pre>
<p>At last, some unnecessary fields must be deleted from our frozen purchase order.</p>
<pre><code>frozen_purchase_order := frozen_purchase_order - &#39;frozen_purchase_order&#39;;
frozen_purchase_order := frozen_purchase_order - &#39;id_customer&#39;;</code></pre>
<p>Then we have our result.</p>
<pre><code>NEW.frozen_purchase_order := frozen_purchase_order;</code></pre>
<p>The complete function looks like</p>
<pre><code>CREATE FUNCTION freeze_purchase_order() RETURNS TRIGGER AS $$
DECLARE
    frozen_purchase_order JSONB;
    customer JSONB;
    purchase_order_items JSONB;
    rawItem RECORD;
BEGIN
    IF NEW.status = ANY(&#39;{requisition,ready_to_send}&#39;::purchase_order_status[]) THEN
        RAISE NOTICE &#39;nothing to do&#39;;
        RETURN NEW;
    END IF;
    RAISE NOTICE &#39;freeze&#39;;

    SELECT json_view FROM customer WHERE id = NEW.id_customer INTO customer;

    purchase_order_items := &#39;[]&#39;::JSONB;

    FOR rawItem IN (SELECT get_json_from_item(id)::JSONB AS get_json FROM purchase_order_item WHERE id_purchase_order = NEW.id) 
    LOOP
        purchase_order_items := purchase_order_items || rawItem.get_json;    
    END LOOP;

    SELECT row_to_json(NEW.*) INTO frozen_purchase_order;

    frozen_purchase_order := frozen_purchase_order 
        || jsonb_build_object(&#39;items&#39;, purchase_order_items)
        || jsonb_build_object(&#39;customer&#39;, customer);

    frozen_purchase_order := frozen_purchase_order - &#39;frozen_purchase_order&#39;;
    frozen_purchase_order := frozen_purchase_order - &#39;id_customer&#39;;

    NEW.frozen_purchase_order := frozen_purchase_order;
    
    RETURN NEW;
END
$$ LANGUAGE plpgsql;</code></pre>
<h2 id="add-some-data">add some data</h2>
<pre><code>$ psql -U postgres -c &quot;SELECT id FROM test.customer&quot;
                  id
--------------------------------------
 7a24ed2c-c873-4fdf-91cf-3574410acc49
(1 row)

$ psql -U postgres -c &quot;INSERT INTO test.purchase_order (id_customer, purchase_order_number) \
&gt; VALUES (&#39;7a24ed2c-c873-4fdf-91cf-3574410acc49&#39;, &#39;PO12345&#39;);&quot;
INSERT 0 1

$ psql -U postgres -c &quot;SELECT * FROM test.purchase_order;&quot;
                  id                  |             id_customer              | purchase_order_number |   status    | frozen_purchase_order |        created_at         |        updated_at         
--------------------------------------+--------------------------------------+-----------------------+-------------+-----------------------+---------------------------+---------------------------
 29e2fa06-edfc-49ed-878b-49e8ded9bb89 | 7a24ed2c-c873-4fdf-91cf-3574410acc49 | PO12345               | requisition |                       | 2017-07-16 21:15:41.81893 | 2017-07-16 21:15:41.81893
(1 row)</code></pre>
<p>Now we add our <code>article</code> with our <code>price</code>.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT * FROM test.article&quot;
                  id                  | article_number |     name     | description | status |         created_at         |         updated_at         
--------------------------------------+----------------+--------------+-------------+--------+----------------------------+----------------------------
 0b177d42-368a-4cfa-bf8d-e863f4e8a1bd | AB12345        | Test article | Test desc   | active | 2017-07-16 21:06:03.668307 | 2017-07-16 21:06:03.668307
(1 row)

$ psql -U postgres -c &quot;SELECT * FROM test.price;&quot;
                  id                  |              id_article              | price | scale_lower_limit | scale_upper_limit | valid_from |  valid_to  | history |         created_at         |         updated_at         
--------------------------------------+--------------------------------------+-------+-------------------+-------------------+------------+------------+---------+----------------------------+----------------------------
 ac73b43d-e5ef-46dd-81e9-94291aa669c7 | 0b177d42-368a-4cfa-bf8d-e863f4e8a1bd |  50.5 |                 1 |        2147483647 | 2017-07-16 | 2018-07-16 |         | 2017-07-16 21:06:03.668307 | 2017-07-16 21:06:03.668307
(1 row)

$ psql -U postgres -c &quot;INSERT INTO test.purchase_order_item (id_purchase_order, id_article, id_price) \
&gt; VALUES (&#39;29e2fa06-edfc-49ed-878b-49e8ded9bb89&#39;, &#39;0b177d42-368a-4cfa-bf8d-e863f4e8a1bd&#39;, &#39;ac73b43d-e5ef-46dd-81e9-94291aa669c7&#39;)&quot;
INSERT 0 1</code></pre>
<p>Changing the state to <code>ready_to_send</code> will result</p>
<pre><code>$ psql -U postgres -c &quot;SET search_path TO test,public; UPDATE purchase_order SET status = &#39;ready_to_send&#39; \ 
&gt; WHERE id = &#39;29e2fa06-edfc-49ed-878b-49e8ded9bb89&#39;&quot;
NOTICE:  nothing to do
UPDATE 1</code></pre>
<p>Now we set the state to ‘send’</p>
<pre><code>$ psql -U postgres -c &quot;SET search_path TO test,public; UPDATE purchase_order SET status = &#39;send&#39; \
&gt; WHERE id = &#39;29e2fa06-edfc-49ed-878b-49e8ded9bb89&#39;&quot;
NOTICE:  freeze
UPDATE 1

$ psql -U postgres -c &quot;SELECT * from test.purchase_order&quot; | cat
                  id                  |             id_customer              | purchase_order_number | status |frozen_purchase_order|        created_at         |        updated_at         

 29e2fa06-edfc-49ed-878b-49e8ded9bb89 | 7a24ed2c-c873-4fdf-91cf-3574410acc49 | PO12345               | send   | {&quot;id&quot;: &quot;29e2fa06-edfc-49ed-878b-49e8ded9bb89&quot;, &quot;items&quot;: [{&quot;price&quot;: {&quot;id&quot;: &quot;ac73b43d-e5ef-46dd-81e9-94291aa669c7&quot;, &quot;price&quot;: 50.5, &quot;valid_to&quot;: &quot;2018-07-16&quot;, &quot;valid_from&quot;: &quot;2017-07-16&quot;, &quot;scale_lower_limit&quot;: 1, &quot;scale_upper_limit&quot;: 2147483647}, &quot;amount&quot;: 1, &quot;article&quot;: {&quot;id&quot;: &quot;0b177d42-368a-4cfa-bf8d-e863f4e8a1bd&quot;, &quot;name&quot;: &quot;Test article&quot;, &quot;description&quot;: &quot;Test desc&quot;, &quot;article_number&quot;: &quot;AB12345&quot;}}], &quot;status&quot;: &quot;send&quot;, &quot;changes&quot;: null, &quot;customer&quot;: {&quot;id&quot;: &quot;7a24ed2c-c873-4fdf-91cf-3574410acc49&quot;, &quot;person&quot;: {&quot;id&quot;: &quot;35b40b2f-bf40-4f71-8319-f7757de3e1f4&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;addresses&quot;: [{&quot;id&quot;: &quot;7a7f1e44-f6a6-495e-893b-e5806289ea81&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44339&quot;, &quot;address_type&quot;: &quot;private&quot;, &quot;house_number&quot;: &quot;123&quot;}, {&quot;id&quot;: &quot;1d8c41e5-bcd6-4842-864d-62c4da2fc506&quot;, &quot;city&quot;: &quot;Bochum&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44866&quot;, &quot;address_type&quot;: &quot;work&quot;, &quot;house_number&quot;: &quot;321&quot;}], &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;, &quot;phone_numbers&quot;: [{&quot;id&quot;: &quot;618d19d6-3daf-4029-8d0f-1535272ec212&quot;, &quot;phone_number&quot;: &quot;+49123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;landline&quot;, &quot;is_primary_phone_number&quot;: true}, {&quot;id&quot;: &quot;81403e1d-1055-4953-8b1a-fcca9d034b1b&quot;, &quot;phone_number&quot;: &quot;+49151123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;cellular_network&quot;, &quot;is_primary_phone_number&quot;: false}], &quot;email_addresses&quot;: [{&quot;id&quot;: &quot;a2f79f62-a497-4bdb-8f1b-03d6b7aacb30&quot;, &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;is_primary_email_address&quot;: false}]}, &quot;customer_number&quot;: &quot;AB123456&quot;}, &quot;created_at&quot;: &quot;2017-07-16T21:15:41.81893&quot;, &quot;updated_at&quot;: &quot;2017-07-16T21:25:03.02978&quot;, &quot;purchase_order_number&quot;: &quot;PO12345&quot;} | 2017-07-16 21:15:41.81893 | 2017-07-16 21:26:44.87835
(1 row)</code></pre>
<p>The frozen purchase order looks like</p>
<pre><code>{
    &quot;id&quot;: &quot;29e2fa06-edfc-49ed-878b-49e8ded9bb89&quot;,
    &quot;items&quot;: [{
        &quot;price&quot;: {
            &quot;id&quot;: &quot;ac73b43d-e5ef-46dd-81e9-94291aa669c7&quot;,
            &quot;price&quot;: 50.5,
            &quot;valid_to&quot;: &quot;2018-07-16&quot;,
            &quot;valid_from&quot;: &quot;2017-07-16&quot;,
            &quot;scale_lower_limit&quot;: 1,
            &quot;scale_upper_limit&quot;: 2147483647
        },
        &quot;amount&quot;: 1,
        &quot;article&quot;: {
            &quot;id&quot;: &quot;0b177d42-368a-4cfa-bf8d-e863f4e8a1bd&quot;,
            &quot;name&quot;: &quot;Test article&quot;,
            &quot;description&quot;: &quot;Test desc&quot;,
            &quot;article_number&quot;: &quot;AB12345&quot;
        }
    }],
    &quot;status&quot;: &quot;send&quot;,
    &quot;changes&quot;: null,
    &quot;customer&quot;: {
        &quot;id&quot;: &quot;7a24ed2c-c873-4fdf-91cf-3574410acc49&quot;,
        &quot;person&quot;: {
            &quot;id&quot;: &quot;35b40b2f-bf40-4f71-8319-f7757de3e1f4&quot;,
            &quot;notes&quot;: null,
            &quot;website&quot;: null,
            &quot;addresses&quot;: [{
                &quot;id&quot;: &quot;7a7f1e44-f6a6-495e-893b-e5806289ea81&quot;,
                &quot;city&quot;: &quot;Dortmund&quot;,
                &quot;street&quot;: &quot;Fakestreet&quot;,
                &quot;postal_code&quot;: &quot;44339&quot;,
                &quot;address_type&quot;: &quot;private&quot;,
                &quot;house_number&quot;: &quot;123&quot;
            }, {
                &quot;id&quot;: &quot;1d8c41e5-bcd6-4842-864d-62c4da2fc506&quot;,
                &quot;city&quot;: &quot;Bochum&quot;,
                &quot;street&quot;: &quot;Fakestreet&quot;,
                &quot;postal_code&quot;: &quot;44866&quot;,
                &quot;address_type&quot;: &quot;work&quot;,
                &quot;house_number&quot;: &quot;321&quot;
            }],
            &quot;last_name&quot;: &quot;Hake&quot;,
            &quot;birth_date&quot;: null,
            &quot;first_name&quot;: &quot;Jan Frederik&quot;,
            &quot;phone_numbers&quot;: [{
                &quot;id&quot;: &quot;618d19d6-3daf-4029-8d0f-1535272ec212&quot;,
                &quot;phone_number&quot;: &quot;+49123456789&quot;,
                &quot;communication_type&quot;: &quot;private&quot;,
                &quot;communication_network&quot;: &quot;landline&quot;,
                &quot;is_primary_phone_number&quot;: true
            }, {
                &quot;id&quot;: &quot;81403e1d-1055-4953-8b1a-fcca9d034b1b&quot;,
                &quot;phone_number&quot;: &quot;+49151123456789&quot;,
                &quot;communication_type&quot;: &quot;private&quot;,
                &quot;communication_network&quot;: &quot;cellular_network&quot;,
                &quot;is_primary_phone_number&quot;: false
            }],
            &quot;email_addresses&quot;: [{
                &quot;id&quot;: &quot;a2f79f62-a497-4bdb-8f1b-03d6b7aacb30&quot;,
                &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;,
                &quot;communication_type&quot;: &quot;private&quot;,
                &quot;is_primary_email_address&quot;: false
            }]
        },
        &quot;customer_number&quot;: &quot;AB123456&quot;
    },
    &quot;created_at&quot;: &quot;2017-07-16T21:15:41.81893&quot;,
    &quot;updated_at&quot;: &quot;2017-07-16T21:25:03.02978&quot;,
    &quot;purchase_order_number&quot;: &quot;PO12345&quot;
}</code></pre>
<p>This approach looks promising. In the <a href="2017-08-07-database-architecture-part3.html">next part</a>, we look into updating those structures.</p>]]></summary>
</entry>
<entry>
    <title>Automatically update MIT licenses</title>
    <link href="https://enter-haken.github.io/posts/2017-07-07-update-mit-license.html" />
    <id>https://enter-haken.github.io/posts/2017-07-07-update-mit-license.html</id>
    <published>2017-07-07T00:00:00Z</published>
    <updated>2017-07-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>When you are using the MIT license for your own project, you can add copyright notices to the license. The license starts with</p>
<pre><code>The MIT License (MIT)
Copyright (c) 2016 Jan Frederik Hake

Permission is hereby granted, free of charge, ...</code></pre>
<p>For every year, you make changes to the source, you have to add the year to the copyright notice. Especially for projects, which are rarely updated, the license is often forgotten.</p>
<p>With some git and awk magic, this task can be automated. <!--more--></p>
<h1 id="git-log">git log</h1>
<p>I take my blog sources as an example. The source for my changes is my git log.</p>
<p>If I like to see only the commit date and the name of the committer you can start with</p>
<pre><code>$ git log --pretty=format:&quot;%ad|%an&quot; | head -n5
Wed Jun 28 19:00:52 2017 +0200|Jan Frederik Hake
Sat May 6 10:38:58 2017 +0200|Jan Frederik Hake
Sat May 6 10:29:15 2017 +0200|Jan Frederik Hake
Sat May 6 07:53:10 2017 +0200|Jan Frederik Hake
Thu May 4 11:57:25 2017 +0200|Jan Frederik Hake</code></pre>
<p>I choose the pipe character as a separator for further processing. The date can be formatted with the <code>--date</code> parameter.</p>
<pre><code>$ git log --pretty=format:&quot;%ad|%an&quot; --date=format:%Y | head -n 5
2017|Jan Frederik Hake
2017|Jan Frederik Hake
2017|Jan Frederik Hake
2017|Jan Frederik Hake
2017|Jan Frederik Hake</code></pre>
<p>In the next step I do some <code>uniq</code> and <code>sort</code> on the result. For the next process step, I switch the year and the name.</p>
<pre><code>$ git log --pretty=format:&quot;%an|%ad&quot;                  \
&gt;            --date=format:%Y | sort | uniq |        \
&gt;    awk &#39;BEGIN {FS=&quot;|&quot;}                             \
&gt;    {                                               \
&gt;      if ($1==currentName) {                        \
&gt;              year=year &quot;,&quot; $2;                     \
&gt;      }                                             \
&gt;      else {                                        \
&gt;          if (currentName) {                        \
&gt;              print &quot;(c) &quot; year &quot; &quot; currentName;    \
&gt;          };                                        \
&gt;          currentName=$1;                           \
&gt;          year=$2;                                  \
&gt;      }                                             \
&gt;    }                                               \
&gt;    END {                                           \
&gt;        if (currentName) {                          \
&gt;            print &quot;(c) &quot; year &quot; &quot; currentName;      \
&gt;        }                                           \
&gt;    }&#39; 
(c) 2016,2017 Jan Frederik Hake </code></pre>
<p>With a simple bash script you can update your LICENSE file of your project, if needed.</p>
<pre><code>#!/bin/sh
if [ ! -f LICENSE ]; then
    break; 
fi

copyright=$(git log --pretty=format:&quot;%an|%ad&quot;       \
            --date=format:%Y | sort | uniq |        \
    awk &#39;BEGIN {FS=&quot;|&quot;}                             \
    {                                               \
      if ($1==currentName) {                        \
              year=year &quot;,&quot; $2;                     \
      }                                             \
      else {                                        \
          if (currentName) {                        \
              print &quot;(c) &quot; year &quot; &quot; currentName;    \
          };                                        \
          currentName=$1;                           \
          year=$2;                                  \
      }                                             \
    }                                               \
    END {                                           \
        if (currentName) {                          \
            print &quot;(c) &quot; year &quot; &quot; currentName;      \
        }                                           \
    }&#39;)

license=$(cat LICENSE | sed -e &quot;s/(c).*$/$copyright/g&quot;)
echo &quot;$license&quot; &gt; LICENSE</code></pre>
<p>If you add the script to the project Makefile, there is no need for manually updating the LICENSE file any more.</p>]]></summary>
</entry>
<entry>
    <title>Moving ORM Mapping towards the database</title>
    <link href="https://enter-haken.github.io/posts/2017-07-06-database-architecture.html" />
    <id>https://enter-haken.github.io/posts/2017-07-06-database-architecture.html</id>
    <published>2017-07-06T00:00:00Z</published>
    <updated>2017-07-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Storing data in a <a href="https://en.wikipedia.org/wiki/Relational_database">relational database</a> has it’s roots in the late sixties of the past century. The core idea has survived the last decades. About 2009 the term <a href="https://en.wikipedia.org/wiki/NoSQL">NoSQL</a> appeared.</p>
<p>As for now <a href="https://www.postgresql.org/">PostgreSQL</a> is the most advanced relational database in the world. With version 9 you can store non atomic data in a JSON column. Document based NoSQL databases like <a href="https://www.mongodb.com/">MongoDb</a> are storing there data in so called <a href="https://docs.mongodb.com/v3.2/core/databases-and-collections/">collections</a>. These collections are similar to <a href="https://www.postgresql.org/docs/9.6/static/datatype-json.html">PostgreSQL JSON columns</a>.</p>
<p>With PostgreSQL you are able to use the best of both worlds.</p>
<!--more-->
<h1 id="some-tables">Some tables</h1>
<p>Before entering the JSON world, let’s look at a simple example. I use the <a href="https://www.postgresql.org/docs/current/static/pgcrypto.html">pgcrypto extension</a> for generating id columns for the tables.</p>
<pre><code>CREATE EXTENSION IF NOT EXISTS pgcrypto;</code></pre>
<p>For fast prototyping, you can use an own schema for the example.</p>
<pre><code>DROP SCHEMA IF EXISTS test CASCADE;
CREATE SCHEMA test;

SET search_path TO test,public;</code></pre>
<p>If you like to store personal data you start with a <code>person</code></p>
<pre><code>CREATE TABLE person (
    id BUD NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    first_name VARCHAR(512),
    last_name VARCHAR(512),
    birth_date DATE,
    notes VARCHAR(4096),
    website VARCHAR(256)
);</code></pre>
<p>With an <code>address</code> table,</p>
<pre><code>CREATE TABLE address (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    street VARCHAR(512), 
    house_number VARCHAR(128),
    postal_code VARCHAR(10),
    city VARCHAR(512)
);</code></pre>
<p>you can store several addresses for a person.</p>
<pre><code>CREATE TYPE address_type AS ENUM (
    &#39;private&#39;,
    &#39;delivery&#39;,
    &#39;invoice&#39;,
    &#39;work&#39;
);

CREATE TABLE person_to_address(
    id_person UUID NOT NULL REFERENCES person (id),
    id_address UUID NOT NULL REFERENCES address(id),
    is_primary_address boolean NOT NULL DEFAULT false,
    address_type address_type NOT NULL DEFAULT &#39;private&#39;,
    PRIMARY KEY (id_person, id_address)
);</code></pre>
<p>A simple table for storing emails can look like</p>
<pre><code>CREATE TABLE email (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    eMail_address VARCHAR(256)
);

CREATE TYPE communication_type AS ENUM (
    &#39;work&#39;,
    &#39;private&#39;,
    &#39;organization&#39;
);

CREATE TABLE person_to_email (
    id_person UUID NOT NULL REFERENCES person (id),
    id_email UUID NOT NULL REFERENCES email (id),
    communication_type communication_type NOT NULL DEFAULT &#39;private&#39;,
    is_primary_email_address BOOLEAN NOT NULL DEFAULT false,
    PRIMARY KEY (id_person, id_email)
);</code></pre>
<p>Similar to an email you can store <code>phone data</code> like</p>
<pre><code>CREATE TYPE communication_network AS ENUM (
    &#39;landline&#39;,
    &#39;cellular_network&#39;
);

CREATE TABLE phone (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    phone_number VARCHAR(128) NOT NULL,
    communication_network communication_network NOT NULL DEFAULT &#39;landline&#39;
);

CREATE TABLE person_to_phone (
    id_person UUID NOT NULL REFERENCES person (id),
    id_phone UUID NOT NULL REFERENCES phone (id),
    communication_type communication_type NOT NULL DEFAULT &#39;private&#39;,
    is_primary_phone_number BOOLEAN NOT NULL DEFAULT false,
    PRIMARY KEY (id_person, id_phone)
);</code></pre>
<p>If you like to need meta data for every table, like <code>last update date</code> or <code>create date</code>, you can do this with a simple trigger function.</p>
<pre><code>CREATE FUNCTION metadata_trigger() RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at := now();
    RETURN NEW;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>In the next step, you add to every table a <code>created_at</code> and a <code>updated_at</code> column. After this the <code>metadata_trigger</code> trigger function has to be added.</p>
<pre><code>CREATE FUNCTION add_metadata_to_every_table() RETURNS VOID AS $$
DECLARE 
    row record;
BEGIN
    FOR row IN SELECT tablename FROM pg_tables WHERE schemaname = &#39;test&#39; LOOP
        EXECUTE &#39;ALTER TABLE &#39; || row.tablename || 
            &#39; ADD COLUMN created_at timestamp NOT NULL DEFAULT NOW();&#39;;

        EXECUTE &#39;ALTER TABLE &#39; || row.tablename || 
            &#39; ADD COLUMN updated_at timestamp NOT NULL DEFAULT NOW();&#39;;

        EXECUTE &#39;CREATE TRIGGER &#39; || row.tablename || &#39;_trigger BEFORE UPDATE ON &#39; || row.tablename || 
            &#39; FOR EACH ROW EXECUTE PROCEDURE metadata_trigger();&#39;;
    END LOOP;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>No stunts so far.</p>
<p>Prior to the NoSQL movement, you would probably create a view for a <code>person</code>.</p>
<pre><code>CREATE VIEW person_view AS
    SELECT first_name, 
            last_name, 
            street, 
            house_number, 
            postal_code,
            city,
            email_address,
            phone_number
        FROM PERSON p
        JOIN person_to_address p2a ON p.id = p2a.id_person
        JOIN address a on p2a.id_address = a.id
        JOIN person_to_email p2e on p2e.id_person = p.id
        JOIN email e on e.id = p2e.id_email 
        JOIN person_to_phone p2p on p2p.id_person = p.id
        JOIN phone ph on ph.id = p2p.id_phone;</code></pre>
<p>You get a tabular result with many redundant data here. The next layer will take this raw data and transform it into objects.</p>
<pre><code>$ psql -U postgres -c &quot;select * from test.person_view&quot;
  first_name  | last_name |   street   | house_number | postal_code |   city   | address_type |  email_address   |  phone_number  
--------------+-----------+------------+---------------+-------------+----------+--------------+------------------+----------------
 Jan Frederik | Hake      | No Street  | 3-4           | 54321       | Dortmund | work         | jan_hake@fake.de | +4923111223344
 Jan Frederik | Hake      | Fakestreet | 123           | 12345       | Dortmund | private      | jan_hake@fake.de | +4923111223344
 Jan Frederik | Hake      | No Street  | 3-4           | 54321       | Dortmund | work         | jan_hake@fake.de | +4915199887766
 Jan Frederik | Hake      | Fakestreet | 123           | 12345       | Dortmund | private      | jan_hake@fake.de | +4915199887766
(4 rows)</code></pre>
<p>It would be nice, if the database it self could provide these objects. At this point, the JSON columns come into the game.</p>
<h1 id="json-column">JSON column</h1>
<p>In this example the <code>person</code> table is our root relation. We add the json column in this table.</p>
<pre><code>ALTER TABLE person ADD COLUMN json_view JSONB;</code></pre>
<p>In the first step we create a function, that fills this column.</p>
<pre><code>CREATE FUNCTION update_json_view_person(person_id UUID) RETURNS VOID AS $$
DECLARE
    person_raw JSONB;
BEGIN
    SELECT row_to_json(p) FROM 
        (SELECT id, first_name, last_name, 
         birth_date, notes, website FROM person 
            WHERE id = person_id) p INTO person_raw;
    
UPDATE person SET json_view = person_raw WHERE id = person_id;    
END
$$ LANGUAGE plpgsql;</code></pre>
<p>A sample output for <code>json_view</code> can look like</p>
<pre><code>$ psql -U postgres -c &quot;select json_view from test.person&quot;
                                                                       json_view                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 {&quot;id&quot;: &quot;e881de40-596d-47f1-801c-77bf32829bfa&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;}
(1 row)</code></pre>
<p>There are many <a href="https://www.postgresql.org/docs/9.3/static/functions-json.html">json functions</a> available for Postgres. The <code>row_to_json</code> function will create a json object for every result row. In this case it is just one row.</p>
<p>When you want to add the address data you can use the <code>array_agg</code> <a href="https://www.postgresql.org/docs/current/static/functions-aggregate.html">aggregate function</a> to create an array from a result,</p>
<pre><code>SELECT array_to_json(array_agg(addresses)) FROM 
    (SELECT a.id, street, house_number, postal_code, city, p2a.address_type FROM address a
    JOIN person_to_address p2a ON a.id = p2a.id_address WHERE p2a.id_person = person_id) addresses 
    INTO person_addresses;</code></pre>
<p>where <code>person_to_addresses</code> is a local <code>JSONB</code> variable. The <code>array_to_json</code> function creates a json array, which can be added to the <code>person_raw</code> with <code>json_build_object</code>.</p>
<pre><code>person_raw := person_raw 
    || jsonb_build_object(&#39;addresses&#39;, person_addresses); </code></pre>
<p>You can do this similar for <code>email</code> and <code>phone</code>.</p>
<p>The complete function looks like</p>
<pre><code>CREATE FUNCTION update_json_view_person(person_id UUID) RETURNS VOID AS $$
DECLARE
    person_raw JSONB;
    person_addresses JSONB;
    person_email_addresses JSONB;
    person_phone_numbers JSONB;
BEGIN
    SELECT row_to_json(p) FROM 
        (SELECT id, first_name, last_name, birth_date, notes, website FROM person 
            WHERE id = person_id LIMIT 1) p INTO person_raw;
    
    SELECT array_to_json(array_agg(addresses)) FROM 
        (SELECT a.id, street, house_number, postal_code, city, p2a.address_type FROM address a
        JOIN person_to_address p2a ON a.id = p2a.id_address WHERE p2a.id_person = person_id) addresses 
        INTO person_addresses;
    
    SELECT array_to_json(array_agg(email_addresses)) FROM
        (SELECT e.id, email_address, is_primary_email_address, communication_type FROM email e
            JOIN person_to_email p2e on e.id = p2e.id_email
            WHERE p2e.id_person = person_id) email_addresses INTO person_email_addresses;
 
    SELECT array_to_json(array_agg(phone_numbers)) FROM
        (SELECT p.id, phone_number, communication_type, communication_network, is_primary_phone_number FROM phone p 
            JOIN person_to_phone p2p on p.id = p2p.id_phone
            WHERE p2p.id_person = person_id) phone_numbers INTO person_phone_numbers;
    
    person_raw := person_raw 
        || jsonb_build_object(&#39;addresses&#39;, person_addresses) 
        || jsonb_build_object(&#39;email_addresses&#39;, person_email_addresses)
        || jsonb_build_object(&#39;phone_numbers&#39;, person_phone_numbers);

    UPDATE person SET json_view = person_raw WHERE id = person_id;    
END
$$ LANGUAGE plpgsql;</code></pre>
<p>Now the person looks more or less complete</p>
<pre><code>$ psql -U postgres -c &quot;select json_view from test.person&quot; | cat
json_view

 {&quot;id&quot;: &quot;5824be75-b444-4ac7-8d59-0763e6a6a9b3&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;addresses&quot;: [{&quot;id&quot;: &quot;41a93a1b-fd31-4f05-8a63-8921a926223c&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;12345&quot;, &quot;address_type&quot;: &quot;private&quot;, &quot;house_number&quot;: &quot;123&quot;}, {&quot;id&quot;: &quot;4a2558c9-13b5-49a8-89b8-52022575040b&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;No Street&quot;, &quot;postal_code&quot;: &quot;54321&quot;, &quot;address_type&quot;: &quot;work&quot;, &quot;house_number&quot;: &quot;3-4&quot;}], &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;, &quot;phone_numbers&quot;: [{&quot;id&quot;: &quot;86941ea5-fe53-4251-bdfc-abafca40b4ab&quot;, &quot;phone_number&quot;: &quot;+4923111223344&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;landline&quot;, &quot;is_primary_phone_number&quot;: true}, {&quot;id&quot;: &quot;96b8ebd3-f514-4fd7-997c-136e4a6eb270&quot;, &quot;phone_number&quot;: &quot;+4915199887766&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;cellular_network&quot;, &quot;is_primary_phone_number&quot;: false}], &quot;email_addresses&quot;: [{&quot;id&quot;: &quot;9fc2ea91-cf68-4624-a903-381d765be25c&quot;, &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;is_primary_email_address&quot;: false}]}
(1 row)</code></pre>
<p>With a little bit formatting you get.</p>
<pre><code>{
    &quot;id&quot;: &quot;5824be75-b444-4ac7-8d59-0763e6a6a9b3&quot;,
    &quot;notes&quot;: null,
    &quot;website&quot;: null,
    &quot;addresses&quot;: [{
        &quot;id&quot;: &quot;41a93a1b-fd31-4f05-8a63-8921a926223c&quot;,
        &quot;city&quot;: &quot;Dortmund&quot;,
        &quot;street&quot;: &quot;Fakestreet&quot;,
        &quot;postal_code&quot;: &quot;12345&quot;,
        &quot;address_type&quot;: &quot;private&quot;,
        &quot;house_number&quot;: &quot;123&quot;
    }, {
        &quot;id&quot;: &quot;4a2558c9-13b5-49a8-89b8-52022575040b&quot;,
        &quot;city&quot;: &quot;Dortmund&quot;,
        &quot;street&quot;: &quot;No Street&quot;,
        &quot;postal_code&quot;: &quot;54321&quot;,
        &quot;address_type&quot;: &quot;work&quot;,
        &quot;house_number&quot;: &quot;3-4&quot;
    }],
    &quot;last_name&quot;: &quot;Hake&quot;,
    &quot;birth_date&quot;: null,
    &quot;first_name&quot;: &quot;Jan Frederik&quot;,
    &quot;phone_numbers&quot;: [{
        &quot;id&quot;: &quot;86941ea5-fe53-4251-bdfc-abafca40b4ab&quot;,
        &quot;phone_number&quot;: &quot;+4923111223344&quot;,
        &quot;communication_type&quot;: &quot;private&quot;,
        &quot;communication_network&quot;: &quot;landline&quot;,
        &quot;is_primary_phone_number&quot;: true
    }, {
        &quot;id&quot;: &quot;96b8ebd3-f514-4fd7-997c-136e4a6eb270&quot;,
        &quot;phone_number&quot;: &quot;+4915199887766&quot;,
        &quot;communication_type&quot;: &quot;private&quot;,
        &quot;communication_network&quot;: &quot;cellular_network&quot;,
        &quot;is_primary_phone_number&quot;: false
    }],
    &quot;email_addresses&quot;: [{
        &quot;id&quot;: &quot;9fc2ea91-cf68-4624-a903-381d765be25c&quot;,
        &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;,
        &quot;communication_type&quot;: &quot;private&quot;,
        &quot;is_primary_email_address&quot;: false
    }]
}</code></pre>
<p>Every time the <code>update_json_view_person</code> function is called, the <code>json_view</code> column is updated with the current relational data.</p>
<p>In the <a href="2017-07-15-database-architecture-part2.html">next part</a>, I take a look at some other use cases.</p>]]></summary>
</entry>

</feed>
