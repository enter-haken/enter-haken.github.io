<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>about code</title>
    <link href="https://enter-haken.github.io/atom.xml" rel="self" />
    <link href="https://enter-haken.github.io" />
    <id>https://enter-haken.github.io/atom.xml</id>
    <author>
        <name>Jan Frederik Hake</name>
        <email>jan_hake@gmx.de</email>
    </author>
    <updated>2016-05-11T00:00:00Z</updated>
    <entry>
    <title>days left</title>
    <link href="https://enter-haken.github.io/posts/2016-05-11-daysLeft.html" />
    <id>https://enter-haken.github.io/posts/2016-05-11-daysLeft.html</id>
    <published>2016-05-11T00:00:00Z</published>
    <updated>2016-05-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>days left</h1>

<div class="info">
    
    Posted on May 11, 2016
    
        
</div>

<p>After almost four years, I am moving on towards a new job. Removing the german holydays, weekends and vacations, there are only 23 working days left.</p>
<p>This is not very much time, considering the work, which have to be completed before I leave. So I decided to build something simple to direct my attention to the last days.</p>
<p>I currently running a <a href="https://gentoo.org">Gentoo</a> system with <a href="http://dwm.suckless.org">dwm</a> as a window manager. My <em>.xinitrc</em> looks like this:</p>
<pre><code>xscreensaver &amp;
(conky | while read LINE; do xsetroot -name &quot;$LINE&quot;; done) &amp;
exec dwm</code></pre>
<p><a href="https://github.com/brndnmtthws/conky">conky</a> is one way to update the root window in a specific intervall. Now I need a little programm, that returns my last working days. After a little <a href="https://github.com/enter-haken/daysleft">python magic</a> my <em>.conkyrc</em> looks like this:</p>
<pre><code>update_interval 60.0

TEXT
${exec daysLeft -d 2016-06-17 -w -e 2016-05-18 2016-05-27 2016-05-16 2016-05-26 } working days left | ${exec oneLineStatus} | ${exec date &quot;+%d.%m.%Y %R&quot;}</code></pre>
<p>I think, the <a href="https://twitter.com/enter_haken/status/730390519705128962">first version</a> is all I need, to keep fokus on the last days of my current job.</p>
]]></summary>
</entry>
<entry>
    <title>minimum viable product</title>
    <link href="https://enter-haken.github.io/posts/2016-03-25-mvp.html" />
    <id>https://enter-haken.github.io/posts/2016-03-25-mvp.html</id>
    <published>2016-03-25T00:00:00Z</published>
    <updated>2016-03-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>minimum viable product</h1>

<div class="info">
    
    Posted on March 25, 2016
    
        
</div>

<p>According to <a href="http://www.amazon.com/User-Story-Mapping-Discover-Product/dp/1491904909">User Story Mapping, 44ff</a> there are several ways to grow a product. You can take the requirements as given and build, product peace by peace and finally deliver it all, or try to build working products with each iteration.</p>
<p>Henrik Kniberg revisit this topic in a resent <a href="http://blog.crisp.se/2016/01/25/henrikkniberg/making-sense-of-mvp">blog post</a> in a more detailed way.</p>
<p>When you are developing a new product, what is your skateboard? If you develop a todo application for example, maybe a simple textbox with a resulting textfield may be your skateboard.</p>
<div class="figure">
<img src="/images/skateboard.png" alt="" />

</div>
<p>You are able to insert todo items and revisit them later. On the next iteration you may delete items.</p>
<div class="figure">
<img src="/images/mvp.png" alt="" />

</div>
<p>This could be your mvp. You have a product, some early adopters can work with.</p>
<p>Depending on the market other features may become relevant.</p>
<ul>
<li>user management / logon / oauth …</li>
<li>grouping items</li>
<li>managing user groups</li>
</ul>
<p>When you try to keep these iterations as small as possible, with every iteration a user can help workout a better solution. The possibility to work against the customer is minimized dramatically.</p>
<p>If you create a product by your own, you can either choose to build a product until you have your 100%, or grow your application step by step, and integrate others into your ideas.</p>
<p>If you are working on a project, the customer must play along. There are contracts to fulfill and often there are several parties in the game.</p>
<p>When you decide for a mvp approach for a non trivial application, you have to decide how to iterate throw the production cycle. Among other things <a href="/posts/2016-02-27-getting-better.html#take-care-of-your-data">you have to care for your data</a> over all iterations, what becomes more complicated on a multilayered application.</p>
]]></summary>
</entry>
<entry>
    <title>Repository ownership</title>
    <link href="https://enter-haken.github.io/posts/2016-03-20-repository-distribution.html" />
    <id>https://enter-haken.github.io/posts/2016-03-20-repository-distribution.html</id>
    <published>2016-03-20T00:00:00Z</published>
    <updated>2016-03-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Repository ownership</h1>

<div class="info">
    
    Posted on March 20, 2016
    
        
</div>

<p>Weeks ago we had a discussion about code ownership. Over years ownership may skip over to other developers e.g. due to job change. For a approximation you can start with the files, checked in to repository. I will use the <a href="https://github.com/angular/angular.git">Angular.js</a> repository for demonstrations.</p>
<p>First make a local clone.</p>
<pre><code>$ git clone https://github.com/angular/angular.git</code></pre>
<p>A list of files can be obtained by</p>
<pre><code>git ls-tree --full-tree -r HEAD</code></pre>
<p>The first 10 entries look like</p>
<pre><code>100644 blob 9b2abeb660ab6c38a2378afd3a2f31bbca10cac3    .bowerrc
100644 blob 8d1c3c310286f5569e9ae2d99a5b50320a177e36    .clang-format
100644 blob f1cc3ad329c5d5be1f19d75f27352ea695de0afc    .editorconfig
100644 blob b7ca95b5b77a91a2e1b6eaf80c2a4a52a99ec378    .gitattributes
100644 blob 5f639fc3384e36b91c6efd28cf60e168680ce9f7    .github/ISSUE_TEMPLATE.md
100644 blob 8d93de2e45f1e6bf146cefd8b18526b2d99aaa82    .github/PULL_REQUEST_TEMPLATE.md
100644 blob 8060eef4d4c04f1f7f1aa6a48e9aaf7dc5e12584    .gitignore
100644 blob ade65226e0aa7e8abed00fc326362982f792b262    .nvmrc
100644 blob f31ef0d7d6996c8e202380b7a6bdfcb3ed757267    .travis.yml
100644 blob 0eefaa57ce1dfc216428f5664b632ec324cf918e    CHANGELOG.md</code></pre>
<p>This command will give you all the files in the repository. (sub repositories are not considered at this point).</p>
<p>If you want to see, what is happening in a specific file the <code>git log</code> command is your friend. Let’s look at an example.</p>
<pre><code>$ git log --since=&quot;4 weeks ago&quot; CHANGELOG.md</code></pre>
<p>will give you an overview over the last four weeks for a specific file.</p>
<pre><code>commit c194f6695d3a00330ddfbefdc3ba393b0dce0dab
Author: Jeremy Elbourn &lt;jelbourn@google.com&gt;
Date:   Fri Mar 18 14:35:40 2016 -0700

chore: bump version to beta.11 w/ changelog

commit ea11b3f1f87afbf27d7cd9de87384d4963cd1965
Author: Evan Martin &lt;martine@danga.com&gt;
Date:   Thu Mar 17 15:01:44 2016 -0700

docs(changelog): update change log to beta.10
                         
commit aa43d2f87b9411eee9801d5d45f789f8c4161aa2
Author: Vikram Subramanian &lt;viks@google.com&gt;
Date:   Wed Mar 9 14:56:08 2016 -0800

docs(changelog): update change log to beta 9

commit 2830df4190e98d05bad396993776d31ba6efa6e2
Author: vsavkin &lt;avix1000@gmail.com&gt;
Date:   Wed Mar 2 11:32:38 2016 -0800</code></pre>
<p>we will only need the committer names.</p>
<pre><code>$ git log --format=&quot;%an&quot;  --since=&quot;4 weeks ago&quot; CHANGELOG.md
Jeremy Elbourn
Evan Martin
Vikram Subramanian
vsavkin</code></pre>
<p>Now we take all committers, count their names and take the first in list.</p>
<pre><code>$ git log --format=&quot;%an&quot; CHANGELOG.md | sort | uniq -c | sort -rn | head -n 1
     10 Igor Minar</code></pre>
<p>This statement is very simple. “Igor Minar made the most commits on the file CHANGELOG.md”. There are several ways to get the name after the count. Here is one.</p>
<pre><code>$ echo &quot;     10 Igor Minar&quot; | xargs -e | cut -d &quot; &quot; -f2-
Igor Minar</code></pre>
<p>The <code>xargs -e</code> command eliminates the leading white spaces. Splitting after the first whitespace gets the name.</p>
<p>Now we are almost ready. Putting all the peaces together will lead us to.</p>
<pre><code>#!/bin/bash
for file in ` git ls-tree --full-tree -r HEAD | awk &#39;{ print $4}&#39;`;
do
    git log --format=&quot;%an&quot; $file | sort | uniq -c | sort -rn | head -n 1 | xargs -e | cut -d &quot; &quot; -f2-
done</code></pre>
<p>This script prints for each file the name of the committer with the most commits. When you pipe the output of this script into <code>committers.log</code> you can get the “main committers” for the whole repository.</p>
<pre><code>$ cat committers.log | sort | uniq -c | sort -rn | awk &#39;$1 &gt; 10 { print }&#39;
    381 vsavkin
    194 Tim Blasi
    147 Tobias Bosch
    128 Jeff Cross
    93 kutyel
    82 Brian Ford
    59 Jason Teplitz
    49 Yegor Jbanov
    45 Misko Hevery
    42 Julie Ralph
    40 Igor Minar
    32 Victor Berchet
    29 Matias Niemelä
    24 Alex Eagle
    16 Pawel Kozlowski
    16 Alex Rickabaugh
    15 Peter Bacon Darwin
    15 Ian Riley
    11 yjbanov
    11 Marc Laval</code></pre>
<p>The output gives you a hint, what is currently happening in the repository. It says nothing about the quality of the work of the committer. <a href="https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History">Rewriting commits</a> is often use to have a slim commit history. Others leave the commits as they are. For an older repository it may be more interesting, what has happened e.g. in the last two years. With a few adjustments this can be achieved. See <a href="https://git-scm.com/docs/git-log">git log –since</a> for more information.</p>
]]></summary>
</entry>
<entry>
    <title>getting better</title>
    <link href="https://enter-haken.github.io/posts/2016-02-27-getting-better.html" />
    <id>https://enter-haken.github.io/posts/2016-02-27-getting-better.html</id>
    <published>2016-02-27T00:00:00Z</published>
    <updated>2016-02-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>getting better</h1>

<div class="info">
    
    Posted on February 27, 2016
    
        
</div>

<p>When you think about programming, you will have writing code in mind. Although pressing you ideas into executable code is one of the finest discipline for a software engineer, but it doesn’t tell the whole story.</p>
<p>There are some techniques and abilities, a good software developer should have from my point of view.</p>
<h1 id="brain-debug">brain debug</h1>
<p>A college of mine called it “brain debug”. An ability to debug code without running it. From my perspective a good thing. This shows, that you know what you are doing. You have an idea, how your code behaves, before you execute it for the first time. Often good programmers write a brunch of code, before they compile it.</p>
<h1 id="write-code-for-humans">write code for humans</h1>
<p>A lot of people can write code, that simply compile. Good programmers write code a human can understand. Imagine you have to fix a bug in a part of an application you have written half a year or so. Would it be nice you can dive into your own code as quick as possible? Imagine how nice it would be, when the person who have to dive isn’t you, has the same chance?</p>
<h1 id="break-it-down">break it down</h1>
<p>Having a big rock, put it into smaller peaces you can lift and turn round, is another ability a good programmer should have. When you get specifications for a program to build, with hundreds of pages of requirements, you should be able to break it down into parts, a human can understand.</p>
<h1 id="take-care-of-your-data">take care of your data</h1>
<p>The next part may defer from type to type. After rock bricking, many good programmers like to start with the <a href="http://programmers.stackexchange.com/questions/102041/why-are-data-structures-so-important-in-interviews">data structure</a> first. Others like to sketch the UI interfaces first. A short <a href="http://lwn.net/Articles/193245/">cite</a> for this came from Linus Torvalds (2006)</p>
<blockquote>
<p>I will, in fact, claim that the difference between a bad programmers and a good one is whether he considers his code or his data structures more important. Bad programmers worry about the code. Good programmers worry about data structures and their relationships.</p>
</blockquote>
<h1 id="read">read</h1>
<p>When you are working with together with other developers, software is getting big very quickly. You probably have to work with an existing repository. Therefore reading code is an important ability. New code had to fit in the existing architecture. Writing self-documenting code is a good thing for reducing code size. This leads often more and shorter Functions. This increases the reuse of existing code.</p>
<h1 id="finally">finally …</h1>
<p>There is no short cut. Programming needs time. The right questions will come, while programming. Talk to colleagues about your work or even better (read) code together.</p>
<h1 id="further-reading">further reading</h1>
<ul>
<li><a href="http://henrikwarne.com/2015/04/16/lessons-learned-in-software-development/">lessons learned in sofware development</a></li>
<li><a href="http://henrikwarne.com/2014/06/30/what-makes-a-good-programmer/">what makes a good programmer</a></li>
<li><a href="https://en.wikipedia.org/wiki/No_Silver_Bullet">there is no silver bullet</a></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Git Cleanup</title>
    <link href="https://enter-haken.github.io/posts/2016-02-27-cleanup-git.html" />
    <id>https://enter-haken.github.io/posts/2016-02-27-cleanup-git.html</id>
    <published>2016-02-27T00:00:00Z</published>
    <updated>2016-02-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1>Git Cleanup</h1>

<div class="info">
    
    Posted on February 27, 2016
    
        
</div>

<p>After working over months with several developers on one repository, a little bit “tree care” is necessary. Usually old merged branches are deleted on server, when they are not needed any more.</p>
<pre><code>for branch in `git branch -r --merged master`;
do
    comitter=`git show --format=&quot;%an&quot; $branch | head -n 1;`
    if [ &quot;$comitter&quot; = &quot;$1&quot; ]; then
        echo -e &quot;$branch&quot;
    fi
done</code></pre>
<p>Feature branches can be found like:</p>
<pre><code>./myBranches.sh &quot;Jan Frederik Hake&quot; | grep feature</code></pre>
<p>If you cut of the remote prefix a call to</p>
<pre><code>./myBranches.sh &quot;Jan Frederik Hake&quot; | grep feature | cut -d &#39;/&#39; -f 2,3 | xargs git push origin --delete</code></pre>
<p>deletes the merged branches from a remote repository.</p>
]]></summary>
</entry>

</feed>
