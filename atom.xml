<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>about code</title>
    <link href="https://enter-haken.github.io/atom.xml" rel="self" />
    <link href="https://enter-haken.github.io" />
    <id>https://enter-haken.github.io/atom.xml</id>
    <author>
        <name>Jan Frederik Hake</name>
        <email>jan_hake@gmx.de</email>
    </author>
    <updated>2017-05-27T00:00:00Z</updated>
    <entry>
    <title>querying public transport data</title>
    <link href="https://enter-haken.github.io/posts/2017-05-27-vrr.html" />
    <id>https://enter-haken.github.io/posts/2017-05-27-vrr.html</id>
    <published>2017-05-27T00:00:00Z</published>
    <updated>2017-05-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Last month a ICE derailed before entering the Dortmund main station. This got my timetable mixed up. Trains did not drive towards Dortmund from the west for weeks. The timetable got kind of useless for a while.</p>
<p>In the morning, I could ride from Dortmund to Wattenscheid, in the evening I had to ride via Gelsenkirchen to Dortmund. Some trains could pass Dortmund coming from Gelsenkirchen, others didn’t. Every day, I checked my train on a <a href="http://abfahrtsmonitor.vrr.de">electronic departure monitor</a>. It showed, which train, including the delay passes a certain train station. For me it was enough information, because I does not have to change trains on my way to work.</p>
<p>The site was ok, but I needed something more convenient. Something I could call from command line, so I take a further look.</p>
<!--more-->
<h1 id="finding-a-station">finding a station</h1>
<div class="figure">
<img src="/images/vrrStationQuery.png" />

</div>
<p>If you are looking for Dortmund main station, the Site sends a get request to</p>
<pre><code>http://abfahrtsmonitor.vrr.de/backend/app.php/api/stations/search?query=Dortmund</code></pre>
<p>A list of possible stations with a kind of id is returned.</p>
<pre><code>{
    &quot;suggestions&quot;: [{
        &quot;data&quot;: &quot;20000605&quot;,
        &quot;value&quot;: &quot;Dortmund Zoo&quot;
    }, {
        &quot;data&quot;: &quot;20000131&quot;,
        &quot;value&quot;: &quot;Dortmund Hbf&quot;
    }, {
        &quot;data&quot;: &quot;20000363&quot;,
        &quot;value&quot;: &quot;Dortmund Wilo&quot;
    }, {
        &quot;data&quot;: &quot;20000385&quot;,
        &quot;value&quot;: &quot;Dortmund Poth&quot;
    }, {
        &quot;data&quot;: &quot;20001193&quot;,
        &quot;value&quot;: &quot;Dortmund IKEA&quot;
    },
    ...
    ]
}</code></pre>
<p>This id is needed to make the actual time table request.</p>
<h1 id="a-request-for-a-time-table">a request for a time table</h1>
<p>The site sends a form post to <code>http://abfahrtsmonitor.vrr.de/backend/app.php/api/stations/table</code>. When you look at the Station Dortmund you have form data like</p>
<pre><code>table[departure][stationId]:20000131
table[departure][stationName]:Dortmund, Hbf
table[departure][platformVisibility]:1
table[departure][transport]:0,1,2,3,4,5
table[departure][useAllLines]:1
table[departure][linesFilter]:
table[departure][rowCount]:6
table[departure][distance]:0
table[departure][marquee]:0
table[sortBy]:0</code></pre>
<p>It looks like, that the previous id is the stationId.</p>
<p>If you are a commuter, you don’t care for intercity trains.</p>
<div class="figure">
<img src="/images/vrrLines.png" />

</div>
<p>The <code>transport</code> numbers are in the same sequence as it appears in the form. For me, all I need is <code>Zug</code> and <code>S-Bahn</code> (these are the train types a commuter uses regularly.)</p>
<h1 id="some-coding">some coding</h1>
<p>If you want to make a form post without a form, you can use a <a href="https://msdn.microsoft.com/en-us/library/system.net.http.httpclient(v=vs.118).aspx">HTTPClient</a>.</p>
<p>You can use something like</p>
<pre><code>var client = new HttpClient();

var departure = new Dictionary&lt;string,string&gt;
{
    { &quot;table[departure][stationId]&quot; , &quot;20000131&quot; },    
    ...
};

var content = new FormUrlEncodedContent(departure);
var response = await client.PostAsync(&quot;http://abfahrtsmonitor.vrr.de/backend/app.php/api/stations/table&quot;, content);
var responseString = await response.Content.ReadAsStringAsync();</code></pre>
<p>This will work as expected. The <code>responseString</code> will contain the requested data as a json response.</p>
<pre><code>{
    &quot;departureData&quot;: [{
        &quot;name&quot;: &quot;RE6&quot;,
        &quot;lineNumber&quot;: &quot;RE6&quot;,
        &quot;lineCode&quot;: &quot;90E06&quot;,
        &quot;subname&quot;: &quot;R-Bahn&quot;,
        &quot;direction&quot;: &quot;K\u00f6ln\/Bonn Flughafen Bf,K\u00f6ln&quot;,
        &quot;directionCode&quot;: &quot;R&quot;,
        &quot;route&quot;: &quot;Bochum Hbf - Bochum Wattenscheid - Essen Hauptbahnhof - M\u00fclheim Hauptbahnhof - Duisburg Hbf - D\u00fcsseldorf Flughafen Bahnhof - D\u00fcsseldorf Hbf - Neuss Hauptbahnhof - Dormagen Bf - Dom \/ Hbf,K\u00f6ln - K\u00f6ln\/Bonn Flughafen Bf,K\u00f6ln&quot;,
        &quot;type&quot;: 1,
        &quot;day&quot;: &quot;27&quot;,
        &quot;month&quot;: &quot;5&quot;,
        &quot;year&quot;: &quot;2017&quot;,
        &quot;hour&quot;: &quot;13&quot;,
        &quot;minute&quot;: &quot;06&quot;,
        &quot;orgDay&quot;: &quot;27&quot;,
        &quot;orgHour&quot;: &quot;13&quot;,
        &quot;orgMinute&quot;: &quot;06&quot;,
        &quot;countdown&quot;: 1,
        &quot;platform&quot;: &quot;18&quot;,
        &quot;delay&quot;: &quot;0&quot;,
        &quot;isRealTime&quot;: true,
        &quot;isDateOverflow&quot;: false,
        &quot;lineInfo&quot;: {
            &quot;lineInfo&quot;: {
                &quot;text&quot;: &quot;&quot;,
                &quot;priority&quot;: 0
            },
            &quot;lineBlocking&quot;: {
                &quot;text&quot;: &quot;&quot;,
                &quot;priority&quot;: 0
            }
        },
        &quot;fullTime&quot;: 1495883160,
        &quot;orgFullTime&quot;: 1495883160,
        &quot;supplement&quot;: &quot;&quot;,
        &quot;key&quot;: &quot;10618&quot;
    },
    ...
    ],
    &quot;departureInfo&quot;: {
        &quot;stopInfo&quot;: {
            &quot;text&quot;: &quot;&quot;
        },
        &quot;stopBlocking&quot;: {
            &quot;text&quot;: &quot;&quot;
        }
    },
    &quot;globalInfo&quot;: &quot;&quot;,
    &quot;stationName&quot;: &quot;Dortmund, Hbf&quot;,
    &quot;marquee&quot;: 0,
    &quot;stationInfo&quot;: {
        &quot;aufzug&quot;: &quot;Aufzug&quot;,
        &quot;info&quot;: &quot;dyn. Fahrgastinformation&quot;,
        &quot;automat&quot;: &quot;Fahrscheinautomat&quot;,
        &quot;treppe&quot;: &quot;Fahrtreppe&quot;,
        &quot;sitzen&quot;: &quot;Sitzgelegenheiten&quot;,
        &quot;wc&quot;: &quot;WC&quot;
    },
    &quot;currentTime&quot;: 1495883148,
    &quot;currentTimeReal&quot;: 1495883148
}</code></pre>
<p>Now I make something more readable out of the json response. With <a href="http://www.newtonsoft.com/json">JSON.net</a> you can deserialize a json string to a .net class. It will try to deserialize as much as possible.</p>
<p>For my little console program, I only need the <code>stationName</code> from the root object. The line items for the trains contains the <code>departureData</code> array.</p>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace VRRMonitor
{
    public class DepartureResponse
    {
        public List&lt;DepartureItem&gt; DepartureData { get; set; }

        public string StationName { get; set; }
    }
}</code></pre>
<p>For the <code>DepartureItem</code>, I take the following fields.</p>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace VRRMonitor
{
    public class DepartureItem
    {
        public string Name { get; set; }
        public string LineNumber { get; set; }
        public string SubName { get; set; }
        public string Direction { get; set; }

        public string Route { get; set; }
        public MeansOfTransport Type { get; set; } 
        public int Day { get; set; }
        public int Month { get; set; }
        public int Year { get; set; }
        public int Hour { get; set; }
        public int Minute { get; set; }
        public int OrgDay { get; set; }
        public int OrgMonth { get; set; }
        public int OrgYear { get; set; }
        public int OrgHour { get; set; }
        public int OrgMinute { get; set; }
        public string Platform { get; set; }

        public int? Delay { get; set; }

  }
}</code></pre>
<p>The dates are all send via splitted properties. I put them together within one field.</p>
<pre><code>public DateTime CurrentDeparture 
{
    get
    {
        return new DateTime(Year, Month, Day, Hour, Minute, 0);
    }
}

public DateTime OriginalDeparture
{
    get
    {
        return new DateTime(OrgYear, OrgMonth, OrgDay, OrgHour, OrgMinute, 0);
    }
}</code></pre>
<p>The train kind can be casted into an enum. JSON.NET does the the work for you.</p>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace VRRMonitor
{
    public enum MeansOfTransport
    {
        ICE = 0,
        Zug = 1,
        SBahn = 2,
        UBahn = 3,
        StrassenBahn = 4,
        Bus = 5
    }
}</code></pre>
<p>The numbers are not mandatory, but it helps, if you are debugging calls with raw data.</p>
<p>For a console output, I have to override the <code>ToString()</code> methods of the classes which are used for deserialization. A <code>DepartureItem</code> can be displayed as</p>
<pre><code>public override string ToString()
{
    return $&quot;Aktuell {Hour.ToString(&quot;D2&quot;)}:{Minute.ToString(&quot;D2&quot;)} - Verspätung {Delay ?? 0} - {Name} - Richtung {Direction}&quot;;
}</code></pre>
<p>The <code>DepartureResponse</code> has the <code>StationName</code> and additionally the <code>DepartureData</code> items.</p>
<pre><code>public override string ToString()
{
    if (DepartureData == null)
        return string.Empty;

    var sb = new StringBuilder();
    sb.AppendLine($&quot;Station name: {StationName}&quot;);

    foreach (var result in DepartureData.Select(x =&gt; x.ToString()))
        sb.AppendLine(result);

    return sb.ToString();
}</code></pre>
<p>A sample output can look like</p>
<pre><code>$ mono VRRMonitor.exe Wattenscheid
Station name: Bochum, Wattenscheid Bf
Aktuell 14:05 - Verspätung 7 - RE1 - Richtung Hamm (Westf)
Aktuell 14:20 - Verspätung 0 - RE11 - Richtung Paderborn Hbf.
Aktuell 14:35 - Verspätung 0 - RE6 - Richtung Minden (Westf)
Aktuell 14:58 - Verspätung 0 - RE1 - Richtung Hamm (Westf)
Aktuell 15:20 - Verspätung 0 - RE11 - Richtung Hamm (Westf)
Aktuell 15:35 - Verspätung 0 - RE6 - Richtung Minden (Westf)
Aktuell 15:58 - Verspätung 0 - RE1 - Richtung Hamm (Westf)
Aktuell 16:20 - Verspätung 0 - RE11 - Richtung Hamm (Westf)
Aktuell 16:35 - Verspätung 0 - RE6 - Richtung Minden (Westf)
Aktuell 16:58 - Verspätung 0 - RE1 - Richtung Hamm (Westf)
Aktuell 17:20 - Verspätung 0 - RE11 - Richtung Paderborn Hbf.
Aktuell 17:35 - Verspätung 0 - RE6 - Richtung Minden (Westf)</code></pre>
<p>If you like the complete working example you can take a look at the <a href="https://github.com/enter-haken/VRRMonitor">code</a>.</p>]]></summary>
</entry>
<entry>
    <title>using pandoc filters to create graphs with hakyll</title>
    <link href="https://enter-haken.github.io/posts/2017-02-20-pandoc-filter.html" />
    <id>https://enter-haken.github.io/posts/2017-02-20-pandoc-filter.html</id>
    <published>2017-02-20T00:00:00Z</published>
    <updated>2017-02-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>When you want to convert one document format into an other, <a href="https://jaspervdj.be/hakyll/">Pandoc</a> is your friend. <a href="http://pandoc.org/">Hakyll</a> is using it for converting Markdown into HTML. Once installed (eg. via cabal / stack) you can call pandoc from command line.</p>
<pre><code>$ echo &quot;# test&quot; | pandoc -t native
[Header 1 (&quot;test&quot;,[],[]) [Str &quot;test&quot;]]</code></pre>
<p>This simple example shows the native format. A list of definitions can be found at <a href="http://hackage.haskell.org/package/pandoc-types-1.17.0.5/docs/Text-Pandoc-Definition.html">Hackage</a>. Every document format read is converted into this native format. It is the pandoc internal representation of the document.</p>
<pre><code>$ echo &quot;# test&quot; | pandoc -w html
&lt;h1 id=&quot;test&quot;&gt;test&lt;/h1&gt;</code></pre>
<p>You can get a html output as well. A <a href="http://pandoc.org/scripting.html">pandoc filter</a> can be used to inject a custom behavior between reading and writing a document. This feature is needed to write filters to work with Hakyll</p>
<!--more-->
<p>At first I have to look, how to get a graph, more precisely the graph visualization into the Haskell world. Due to my input comes from a markdown document, it will be plain text. The simple approach is to call the external <code>dot</code> process with this <code>String</code> and read the result. If a library is needed for further implementation this part can be switched out.</p>
<pre><code>import System.Process

graph = &quot;digraph { a -&gt; b; b -&gt; c; a -&gt; c; }&quot;

main :: IO()
main = do
    svg &lt;- readProcess &quot;dot&quot; [&quot;-Tsvg&quot;] graph
    putStr svg </code></pre>
<p>In this example you can pipe a <code>String</code> to an external process and get a result as a <code>String IO</code>.</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot;
 &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt;
&lt;!-- Generated by graphviz version 2.38.0 (20140413.2041)
 --&gt;
&lt;!-- Title: %3 Pages: 1 --&gt;
&lt;svg width=&quot;89pt&quot; height=&quot;188pt&quot;
 viewBox=&quot;0.00 0.00 89.00 188.00&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;
&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 184)&quot;&gt;
&lt;title&gt;%3&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;none&quot; points=&quot;-4,4 -4,-184 85,-184 85,4 -4,4&quot;/&gt;

...

&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;&lt;title&gt;b&amp;#45;&amp;gt;c&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M33.3986,-72.411C36.5136,-64.3352 40.3337,-54.4312 43.8346,-45.3547&quot;/&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;47.1265,-46.5458 47.4597,-35.9562 40.5955,-44.0267 47.1265,-46.5458&quot;/&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;</code></pre>
<p>This looks promising. I choose <code>svg</code>, because it can be easily integrated into a html document.</p>
<p>At first a create a simple environment for testing. I use a <code>index.html</code> as a simple template,</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;
        &lt;title&gt;hakyll test&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
       &lt;div id=&quot;content&quot;&gt;
            $body$
        &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>and a <code>index.markdown</code> with some test data.</p>
<pre><code># hallo

Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam

```
codeblock
```

Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam

```{lang=&quot;dot&quot;}
digraph graphName { a -&gt; b; b -&gt; c; a -&gt; c; }
```</code></pre>
<p>A hakyll main function can look as following.</p>
<pre><code>{-# LANGUAGE OverloadedStrings #-}
import Hakyll

main :: IO ()
main = hakyll $ do
    match &quot;index.markdown&quot; $ do
        route $ setExtension &quot;html&quot;
        compile $ pandocCompiler 
            &gt;&gt;= loadAndApplyTemplate &quot;template.html&quot; defaultContext

    match &quot;template.html&quot; $ compile templateCompiler</code></pre>
<p>This function will create a single <code>index.html</code> in the output folder. The interesting part here is the <code>pandocCompiler</code>. There is a <a href="https://hackage.haskell.org/package/hakyll-4.9.5.1/docs/Hakyll-Web-Pandoc.html#g:2">derived compiler</a> <code>pandocCompilerWithTransform</code> which allows you to specify a transformation for the given content. Given the type signature <code>pandocCompilerWithTransform :: ReaderOptions -&gt; WriterOptions -&gt; (Pandoc -&gt; Pandoc) -&gt; Compiler (Item String)</code>, I have an entry point for the filter. I need something that takes a <code>Pandoc</code> and returns a <code>Pandoc</code>.</p>
<pre><code>graphViz :: Pandoc -&gt; Pandoc
graphViz = walk codeBlock

codeBlock :: Block -&gt; Block
codeBlock (CodeBlock _ contents) = Para [Str contents]
codeBlock x = x</code></pre>
<p>The <a href="https://hackage.haskell.org/package/pandoc-types-1.19/docs/Text-Pandoc-Walk.html">walk function</a> is used to do something with a specified Pandoc structure. For the filter it is a <code>CodeBlock</code> to look for. This example converts all <code>CodeBlock</code>s into paragraphs.</p>
<p>At this point I need the <code>String</code> representation of the dot lang graph.</p>
<pre><code>svg :: String -&gt; String
svg contents = unsafePerformIO $ readProcess &quot;dot&quot; [&quot;-Tsvg&quot;] contents</code></pre>
<p><a href="http://hackage.haskell.org/package/base-4.9.1.0/docs/System-IO-Unsafe.html#v:unsafePerformIO">unsafePerformIO</a> is a kind of ‘backdoor’. It should be used only with care.</p>
<p>With the new walker,</p>
<pre><code>codeBlock :: Block -&gt; Block
codeBlock cb@(CodeBlock (id, classes, namevals) contents) = 
    case lookup &quot;lang&quot; namevals of
        Just f -&gt; RawBlock (Format &quot;html&quot;) $ svg contents
        nothing -&gt; cb
codeBlock x = x</code></pre>
<p>I can call the custom compiler with the <code>graphViz</code> function.</p>
<pre><code>pandocPostCompiler :: Compiler (Item String)
pandocPostCompiler = pandocCompilerWithTransform
    defaultHakyllReaderOptions
    defaultHakyllWriterOptions
    graphViz</code></pre>
<p>Putting it all together</p>
<pre><code>{-# LANGUAGE OverloadedStrings #-}
import Hakyll
import Text.Pandoc
import Text.Pandoc.Walk ( walk )

import System.Process ( readProcess )
import System.IO.Unsafe ( unsafePerformIO )

main :: IO ()
main = hakyll $ do
    match &quot;index.markdown&quot; $ do
        route $ setExtension &quot;html&quot;
        compile $ pandocPostCompiler 
            &gt;&gt;= loadAndApplyTemplate &quot;template.html&quot; defaultContext

    match &quot;template.html&quot; $ compile templateCompiler

pandocPostCompiler :: Compiler (Item String)
pandocPostCompiler = pandocCompilerWithTransform
    defaultHakyllReaderOptions
    defaultHakyllWriterOptions
    graphViz

graphViz :: Pandoc -&gt; Pandoc
graphViz = walk codeBlock

codeBlock :: Block -&gt; Block
codeBlock cb@(CodeBlock (id, classes, namevals) contents) = 
    case lookup &quot;lang&quot; namevals of
        Just f -&gt; RawBlock (Format &quot;html&quot;) $ svg contents
        nothing -&gt; cb
codeBlock x = x

svg :: String -&gt; String
svg contents = unsafePerformIO $ readProcess &quot;dot&quot; [&quot;-Tsvg&quot;] contents</code></pre>
<p>This code transforms a markdown document into html and converts all codeblocks with a <code>lang</code> tag into a svg version of the given graph. At this point, I don’t use the value of <code>lang</code>. It is possible to implement a different behaviour for other tags or different values.</p>
<p>See the <a href="/example/pandoc/dotlang/index.html">result</a> or check out the <a href="https://github.com/enter-haken/hakyll-dot-demo">code</a>, if you like it.</p>]]></summary>
</entry>
<entry>
    <title>get in touch with react</title>
    <link href="https://enter-haken.github.io/posts/2017-01-02-fist-steps-with-react.html" />
    <id>https://enter-haken.github.io/posts/2017-01-02-fist-steps-with-react.html</id>
    <published>2017-01-02T00:00:00Z</published>
    <updated>2017-01-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Last year I started a little web project for work. After probing some frameworks, I started with <a href="https://facebook.github.io/react/">react</a>. I must say, the tooling around the framework is quite sophisticated.</p>
<p>First of all, <a href="https://www.npmjs.com/">npm</a> is needed for the build tool chain. Via <code>npm install create-react-app -g</code> you’ve got a good point to start. It installs the <a href="https://github.com/facebookincubator/create-react-app">tool chain</a>, needed for creating a development environment.</p>
<!--more-->
<p>Let us take a simple Blog engine as an example. You can setup a new react project with <code>create-react-app Blog</code>. This command creates a new folder named <code>Blog</code> and installs a bunch of tools in the project directory.</p>
<p>With <code>npm start</code> you can take a first look of the generated result. It should look like</p>
<div class="figure">
<img src="/images/react-scaffolded-app.png" />

</div>
<pre><code>Compiled successfully!

The app is running at:

  http://localhost:3000/

Note that the development build is not optimized.
To create a production build, use npm run build.</code></pre>
<p>The development server is up and running. At every time you can make a production build with <code>npm run build</code>. The first build size is with 152kb rather small.</p>
<p>After deleting some unused files you have left an <code>index.html</code> as a starting point for our application.</p>
<pre><code>&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
    &lt;link rel=&quot;shortcut icon&quot; href=&quot;%PUBLIC_URL%/favicon.ico&quot;&gt;
    &lt;title&gt;React App&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>The corresponding <code>index.js</code> looks like</p>
<pre><code>import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import App from &#39;./App&#39;;

ReactDOM.render(
  &lt;App /&gt;,
  document.getElementById(&#39;root&#39;)
);</code></pre>
<p>and the <code>App.js</code> like</p>
<pre><code>import React, { Component } from &#39;react&#39;;

class App extends Component {
  render() {
    return (
      &lt;div className=&quot;App&quot;&gt;
        Test
      &lt;/div&gt;
    );
  }
}

export default App;</code></pre>
<p>The existence of <code>index.html</code> and <code>index.js</code> is mandatory for the build process. Everything else can be changed.</p>
<p>If you are wondering about the weird syntax in the render methods, let me assure you, everything is all right. This is called <a href="https://facebook.github.io/react/docs/introducing-jsx.html">JSX</a> and it is a JavaScript syntax extension. If you like to see, what is JSX in depth, there are some good <a href="https://facebook.github.io/react/docs/jsx-in-depth.html">examples</a> as part of the documentation.</p>
<p>If you are new to ECMAScript &gt;6, look at the <a href="http://es6-features.org/">new features</a>. React uses a lot of them, especially classes, expression bodies and block scoped variables.</p>
<p>We don’t want to code our own CSS framework for our blog engine. There are several possibilities available on the market. Google’s <a href="https://material.io/guidelines/">material design</a> is available for a while. It exists a project, which combines react components with the material design. It is called <a href="http://www.material-ui.com/">material ui</a>.</p>
<p>We are going to use a few components for our blog application. For a working app, material ui requires a theme. Therefore the <code>index.js</code> must be <a href="http://www.material-ui.com/#/get-started/usage">adjusted</a>.</p>
<pre><code>import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import MuiThemeProvider from &#39;material-ui/styles/MuiThemeProvider&#39;;

import App from &#39;./App&#39;;

ReactDOM.render(
  &lt;MuiThemeProvider&gt;
    &lt;App /&gt;
  &lt;/MuiThemeProvider&gt;,
  document.getElementById(&#39;root&#39;)
);</code></pre>
<p>Now we can use the material ui components.</p>
<p>But first, we need some data. For scaffolding, we can use simple json files. Later on, they can be replaced by an api.</p>
<pre><code>{
    &quot;data&quot;: [{
        &quot;Id&quot;: 1,
        &quot;Title&quot;: &quot;Test 1 MainTitle&quot;,
        &quot;SubTitle&quot;: &quot;Test 1 Subtitle&quot;,
        &quot;Text&quot;: &quot;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.&quot;
    },{
        &quot;Id&quot;: 2,
        &quot;Title&quot;: &quot;Test 2 MainTitle&quot;,
        &quot;SubTitle&quot;: &quot;Test 2 Subtitle&quot;,
        &quot;Text&quot;: &quot;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.&quot;
    },{
        &quot;Id&quot;: 3,
        &quot;Title&quot;: &quot;Test 3 MainTitle&quot;,
        &quot;SubTitle&quot;: &quot;Test 3 Subtitle&quot;,
        &quot;Text&quot;: &quot;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.&quot;
    },{
        &quot;Id&quot;: 4,
        &quot;Title&quot;: &quot;Test 4 MainTitle&quot;,
        &quot;SubTitle&quot;: &quot;Test 4 Subtitle&quot;,
        &quot;Text&quot;: &quot;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.&quot;
    }]
}</code></pre>
<p>A blog entry can be viewed with a <a href="http://www.material-ui.com/#/components/card">card</a>.</p>
<p>Every component is either statefull or pure. A statefull component can change after render. A pure component depends only on it’s properties. These properties are filled on creation, so pure components are kind of immutable.</p>
<p>As you design your application you must decide which component should hold the state. For this example I made a pure component <code>BlogPost</code></p>
<pre><code>import React, {
    Component
} from &#39;react&#39;;

import {
    Card,
    CardHeader,
    CardText
} from &#39;material-ui/Card&#39;;

class BlogPost extends Component {
    render() {
      return &lt;Card expanded={true} style={{ marginBottom : &#39;10px&#39; }}&gt;
                &lt;CardHeader
                    title={this.props.title}
                    subtitle={this.props.subTitle}
                /&gt;
                &lt;CardText&gt;
                    {this.props.text} 
                &lt;/CardText&gt;
              &lt;/Card&gt;
    }
}

export default BlogPost;</code></pre>
<p>This component will only render property data.</p>
<pre><code>&lt;BlogPost title=&quot;test&quot; subTitle=&quot;test sub&quot; text=&quot;lorem ipsum&quot; /&gt;</code></pre>
<p>will be rendered to</p>
<div class="figure">
<img src="/images/card-blog-test.png" />

</div>
<p>How do we get our json blog data into our application. For our small example, we extend our <code>App.js</code> to a statefull component. The data will be loaded after application start.</p>
<p>A good place for this is the <a href="https://facebook.github.io/react/docs/react-component.html#componentdidmount">componentDidMount</a> function. Changes on state will cause a rerender of the affected dom elements. We will override this method with.</p>
<pre><code>componentDidMount(){
  fetch(&#39;./blogPosts.json&#39;)
    .then((response) =&gt; {
      return response.json();
    })
    .then((response) =&gt; {
      this.setState({ blogPosts : response.data});
    })
}</code></pre>
<p>After the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">fetch</a> the state will have an array <code>state.blogPosts</code>, which contains all the blog data. For the first posts, this solution will be good enough, but this part is a good candidate for later refactor.</p>
<p>To ensure the <code>state.blogPosts</code> Array exists, it should be initialized in the constructor.</p>
<pre><code>constructor(props){
  super(props);
  this.state = {
      blogPosts : []
  };
}</code></pre>
<p>To render the json data, we must rewrite the <code>render</code> method of our <code>App.js</code> to use the state data.</p>
<pre><code>render() {
  const posts = this.state.blogPosts.map((post) =&gt; {
      return &lt;BlogPost 
          key={post.Id} 
          title={post.Title} 
          subTitle={post.SubTitle} 
          text={post.Text} /&gt;
  });

  return &lt;div className=&quot;App&quot;&gt;
            { posts }
         &lt;/div&gt;
}</code></pre>
<p>The <code>state.blogPosts</code> must be mapped to react components. Due to the JSX extensions, the <code>BlogPost</code> Component can be returned by a simple function. The key property is necessary for react, to identify the dom element, to be rendered on change.</p>
<p>After fetching the data the <code>App.js</code> will look like</p>
<div class="figure">
<img src="/images/card-blog-example.png" />

</div>
<p>Our <a href="/example/react/blog/v1/index.html">v1</a> can display blog data coming from a server (json file). For a <a href="/posts/2016-03-25-mvp.html">skateboard</a> this is ok for now. You can review the source on <a href="https://github.com/enter-haken/reactBlogExample">Github</a></p>]]></summary>
</entry>
<entry>
    <title>six months in new job</title>
    <link href="https://enter-haken.github.io/posts/2016-12-27-new-job.html" />
    <id>https://enter-haken.github.io/posts/2016-12-27-new-job.html</id>
    <published>2016-12-27T00:00:00Z</published>
    <updated>2016-12-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This year is almost done. I got a new place for work and found a new old friend the <a href="https://www.bahn.de">Deutsche Bahn</a>. My way to work consist now of cycling and going by train.</p>
<!--more-->
<blockquote class="twitter-tweet" data-lang="de">
<p lang="en" dir="ltr">
<a href="https://twitter.com/hashtag/Autumn?src=hash">#Autumn</a> arrived <a href="https://twitter.com/hashtag/canyonbikes?src=hash">#canyonbikes</a> <a href="https://t.co/AJqizUfHgj">pic.twitter.com/AJqizUfHgj</a>
</p>
— Jan Frederik Hake (<span class="citation">@enter_haken</span>) <a href="https://twitter.com/enter_haken/status/790937282794647553">25. Oktober 2016</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>I’ve kept the ten kilometers cycling, but instead of urban canyons, I’ve got more nature.</p>
<blockquote class="twitter-tweet" data-lang="de">
<p lang="en" dir="ltr">
<a href="https://twitter.com/hashtag/Dortmund?src=hash">#Dortmund</a> before sunset <a href="https://t.co/WM7tfIdw75">pic.twitter.com/WM7tfIdw75</a>
</p>
— Jan Frederik Hake (<span class="citation">@enter_haken</span>) <a href="https://twitter.com/enter_haken/status/783731969117028354">5. Oktober 2016</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>It is ok for now. If you remove the December (German Christmas market time), I have approximately one our for one direction.</p>
<p>From a professional point of view it has become more quiet. I am currently working on a mature dot net stack. My work is planed and reviewed by several instances. I am in a controlled environment and there are less surprises.</p>
<p>At this time, this is exactly what I need, but how looks the next step like?</p>
<p>My batteries are full again, and I’ve got more effective time for my own. My work life has become more predictable and stable. Time to build something cool ;)</p>]]></summary>
</entry>
<entry>
    <title>days left</title>
    <link href="https://enter-haken.github.io/posts/2016-05-11-daysLeft.html" />
    <id>https://enter-haken.github.io/posts/2016-05-11-daysLeft.html</id>
    <published>2016-05-11T00:00:00Z</published>
    <updated>2016-05-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>After almost four years, I am moving on towards a new job. Removing the german holydays, weekends and vacations, there are only 23 working days left.</p>
<p>This is not very much time, considering the work, which have to be completed before I leave. So I decided to build something simple to direct my attention to the last days.</p>
<!--more-->
<p>I currently running a <a href="https://gentoo.org">Gentoo</a> system with <a href="http://dwm.suckless.org">dwm</a> as a window manager. My <em>.xinitrc</em> looks like this:</p>
<pre><code>xscreensaver &amp;
(conky | while read LINE; do xsetroot -name &quot;$LINE&quot;; done) &amp;
exec dwm</code></pre>
<p><a href="https://github.com/brndnmtthws/conky">conky</a> is one way to update the root window in a specific intervall. Now I need a little programm, that returns my last working days. After a little <a href="https://github.com/enter-haken/daysleft">python magic</a> my <em>.conkyrc</em> looks like this:</p>
<pre><code>update_interval 60.0

TEXT
${exec daysLeft -d 2016-06-17 -w -e 2016-05-18 2016-05-27 2016-05-16 2016-05-26 } working days left | ${exec oneLineStatus} | ${exec date &quot;+%d.%m.%Y %R&quot;}</code></pre>
<p>I think, the <a href="https://twitter.com/enter_haken/status/730390519705128962">first version</a> is all I need, to keep fokus on the last days of my current job.</p>
<blockquote class="twitter-tweet" data-lang="de">
<p lang="en" dir="ltr">
the days are counted… <a href="https://t.co/QYpCi9HG7B">pic.twitter.com/QYpCi9HG7B</a>
</p>
— Jan Frederik Hake (<span class="citation">@enter_haken</span>) <a href="https://twitter.com/enter_haken/status/730390519705128962">11. Mai 2016</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></summary>
</entry>
<entry>
    <title>minimum viable product</title>
    <link href="https://enter-haken.github.io/posts/2016-03-25-mvp.html" />
    <id>https://enter-haken.github.io/posts/2016-03-25-mvp.html</id>
    <published>2016-03-25T00:00:00Z</published>
    <updated>2016-03-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>According to <a href="http://www.amazon.com/User-Story-Mapping-Discover-Product/dp/1491904909">User Story Mapping, 44ff</a> there are several ways to grow a product. You can take the requirements as given and build a product peace by peace. Finally you deliver it all, or try to build working products with each iteration.</p>
<!--more-->
<p>Henrik Kniberg revisit this topic in a resent <a href="http://blog.crisp.se/2016/01/25/henrikkniberg/making-sense-of-mvp">blog post</a> in a more detailed way.</p>
<p>When you are developing a new product, what is your skateboard? If you develop a todo application for example, maybe a simple textbox with a resulting textfield may be your skateboard.</p>
<div class="figure">
<img src="/images/skateboard.png" />

</div>
<p>You are able to insert todo items and revisit them later. On the next iteration you may delete items.</p>
<div class="figure">
<img src="/images/mvp.png" />

</div>
<p>This could be your mvp. You have a product, some early adopters can work with.</p>
<p>Depending on the market other features may become relevant.</p>
<ul>
<li>user management / logon / oauth …</li>
<li>grouping items</li>
<li>managing user groups</li>
</ul>
<p>When you try to keep these iterations as small as possible, with every iteration a user can help workout a better solution. The possibility to work against the customer is minimized dramatically.</p>
<p>If you create a product by your own, you can either choose to build a product until you have your 100%, or grow your application step by step, and integrate others into your ideas.</p>
<p>If you are working on a project, the customer must play along. There are contracts to fulfill and often there are several parties in the game.</p>
<p>When you decide for a mvp approach for a non trivial application, you have to decide how to iterate throw the production cycle. Among other things <a href="/posts/2016-02-27-getting-better.html#take-care-of-your-data">you have to care for your data</a> over all iterations, what becomes more complicated on a multilayered application.</p>]]></summary>
</entry>
<entry>
    <title>Repository ownership</title>
    <link href="https://enter-haken.github.io/posts/2016-03-20-repository-distribution.html" />
    <id>https://enter-haken.github.io/posts/2016-03-20-repository-distribution.html</id>
    <published>2016-03-20T00:00:00Z</published>
    <updated>2016-03-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Weeks ago my colleagues and I had a discussion about code ownership. Over years ownership may skip over to other developers e.g. due to job change. For a approximation you can start with the files, checked in to repository. I will use the <a href="https://github.com/angular/angular.git">Angular.js</a> repository for demonstrations.</p>
<!--more-->
<p>First make a local clone.</p>
<pre><code>$ git clone https://github.com/angular/angular.git</code></pre>
<p>A list of files can be obtained by</p>
<pre><code>git ls-tree --full-tree -r HEAD</code></pre>
<p>The first 10 entries look like</p>
<pre><code>100644 blob 9b2abeb660ab6c38a2378afd3a2f31bbca10cac3    .bowerrc
100644 blob 8d1c3c310286f5569e9ae2d99a5b50320a177e36    .clang-format
100644 blob f1cc3ad329c5d5be1f19d75f27352ea695de0afc    .editorconfig
100644 blob b7ca95b5b77a91a2e1b6eaf80c2a4a52a99ec378    .gitattributes
100644 blob 5f639fc3384e36b91c6efd28cf60e168680ce9f7    .github/ISSUE_TEMPLATE.md
100644 blob 8d93de2e45f1e6bf146cefd8b18526b2d99aaa82    .github/PULL_REQUEST_TEMPLATE.md
100644 blob 8060eef4d4c04f1f7f1aa6a48e9aaf7dc5e12584    .gitignore
100644 blob ade65226e0aa7e8abed00fc326362982f792b262    .nvmrc
100644 blob f31ef0d7d6996c8e202380b7a6bdfcb3ed757267    .travis.yml
100644 blob 0eefaa57ce1dfc216428f5664b632ec324cf918e    CHANGELOG.md</code></pre>
<p>This command will give you all the files in the repository. (sub repositories are not considered at this point).</p>
<p>If you want to see, what is happening in a specific file the <code>git log</code> command is your friend. Let’s look at an example.</p>
<pre><code>$ git log --since=&quot;4 weeks ago&quot; CHANGELOG.md</code></pre>
<p>will give you an overview over the last four weeks for a specific file.</p>
<pre><code>commit c194f6695d3a00330ddfbefdc3ba393b0dce0dab
Author: Jeremy Elbourn &lt;jelbourn@google.com&gt;
Date:   Fri Mar 18 14:35:40 2016 -0700

chore: bump version to beta.11 w/ changelog

commit ea11b3f1f87afbf27d7cd9de87384d4963cd1965
Author: Evan Martin &lt;martine@danga.com&gt;
Date:   Thu Mar 17 15:01:44 2016 -0700

docs(changelog): update change log to beta.10
                         
commit aa43d2f87b9411eee9801d5d45f789f8c4161aa2
Author: Vikram Subramanian &lt;viks@google.com&gt;
Date:   Wed Mar 9 14:56:08 2016 -0800

docs(changelog): update change log to beta 9

commit 2830df4190e98d05bad396993776d31ba6efa6e2
Author: vsavkin &lt;avix1000@gmail.com&gt;
Date:   Wed Mar 2 11:32:38 2016 -0800</code></pre>
<p>we will only need the committer names.</p>
<pre><code>$ git log --format=&quot;%an&quot;  --since=&quot;4 weeks ago&quot; CHANGELOG.md
Jeremy Elbourn
Evan Martin
Vikram Subramanian
vsavkin</code></pre>
<p>Now we take all committers, count their names and take the first in list.</p>
<pre><code>$ git log --format=&quot;%an&quot; CHANGELOG.md | sort | uniq -c | sort -rn | head -n 1
     10 Igor Minar</code></pre>
<p>This statement is very simple. “Igor Minar made the most commits on the file CHANGELOG.md”. There are several ways to get the name after the count. Here is one.</p>
<pre><code>$ echo &quot;     10 Igor Minar&quot; | xargs -e | cut -d &quot; &quot; -f2-
Igor Minar</code></pre>
<p>The <code>xargs -e</code> command eliminates the leading white spaces. Splitting after the first whitespace gets the name.</p>
<p>Now we are almost ready. Putting all the peaces together will lead us to.</p>
<pre><code>#!/bin/bash
for file in ` git ls-tree --full-tree -r HEAD | awk &#39;{ print $4}&#39;`;
do
    git log --format=&quot;%an&quot; $file | sort | uniq -c | sort -rn | head -n 1 | xargs -e | cut -d &quot; &quot; -f2-
done</code></pre>
<p>This script prints for each file the name of the committer with the most commits. When you pipe the output of this script into <code>committers.log</code> you can get the “main committers” for the whole repository.</p>
<pre><code>$ cat committers.log | sort | uniq -c | sort -rn | awk &#39;$1 &gt; 10 { print }&#39;
    381 vsavkin
    194 Tim Blasi
    147 Tobias Bosch
    128 Jeff Cross
    93 kutyel
    82 Brian Ford
    59 Jason Teplitz
    49 Yegor Jbanov
    45 Misko Hevery
    42 Julie Ralph
    40 Igor Minar
    32 Victor Berchet
    29 Matias Niemelä
    24 Alex Eagle
    16 Pawel Kozlowski
    16 Alex Rickabaugh
    15 Peter Bacon Darwin
    15 Ian Riley
    11 yjbanov
    11 Marc Laval</code></pre>
<p>The output gives you a hint, what is currently happening in the repository. It says nothing about the quality of the work of the committer. <a href="https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History">Rewriting commits</a> is often use to have a slim commit history. Others leave the commits as they are. For an older repository it may be more interesting, what has happened e.g. in the last two years. With a few adjustments this can be achieved. See <a href="https://git-scm.com/docs/git-log">git log –since</a> for more information.</p>]]></summary>
</entry>
<entry>
    <title>getting better</title>
    <link href="https://enter-haken.github.io/posts/2016-02-27-getting-better.html" />
    <id>https://enter-haken.github.io/posts/2016-02-27-getting-better.html</id>
    <published>2016-02-27T00:00:00Z</published>
    <updated>2016-02-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>When you think about programming, you will have writing code in mind. Although pressing you ideas into executable code is one of the finest discipline for a software engineer, but it doesn’t tell the whole story.</p>
<p>There are some techniques and abilities, a good software developer should have from my point of view.</p>
<!--more-->
<h1 id="brain-debug">brain debug</h1>
<p>A college of mine called it “brain debug”. An ability to debug code without running it. From my perspective a good thing. This shows, that you know what you are doing. You have an idea, how your code behaves, before you execute it for the first time. Often good programmers write a brunch of code, before they compile it.</p>
<h1 id="write-code-for-humans">write code for humans</h1>
<p>A lot of people can write code, that simply compile. Good programmers write code a human can understand. Imagine you have to fix a bug in a part of an application you have written half a year or so. Would it be nice you can dive into your own code as quick as possible? Imagine how nice it would be, when the person who have to dive isn’t you, has the same chance?</p>
<h1 id="break-it-down">break it down</h1>
<p>Having a big rock, put it into smaller peaces you can lift and turn round, is another ability a good programmer should have. When you get specifications for a program to build, with hundreds of pages of requirements, you should be able to break it down into parts, a human can understand.</p>
<h1 id="take-care-of-your-data">take care of your data</h1>
<p>The next part may defer from type to type. After rock bricking, many good programmers like to start with the <a href="http://programmers.stackexchange.com/questions/102041/why-are-data-structures-so-important-in-interviews">data structure</a> first. Others like to sketch the UI interfaces first. A short <a href="http://lwn.net/Articles/193245/">cite</a> for this came from Linus Torvalds (2006)</p>
<blockquote>
<p>I will, in fact, claim that the difference between a bad programmers and a good one is whether he considers his code or his data structures more important. Bad programmers worry about the code. Good programmers worry about data structures and their relationships.</p>
</blockquote>
<h1 id="read">read</h1>
<p>When you are working with together with other developers, software is getting big very quickly. You probably have to work with an existing repository. Therefore reading code is an important ability. New code had to fit in the existing architecture. Writing self-documenting code is a good thing for reducing code size. This leads often more and shorter Functions. This increases the reuse of existing code.</p>
<h1 id="finally">finally …</h1>
<p>There is no short cut. Programming needs time. The right questions will come, while programming. Talk to colleagues about your work or even better (read) code together.</p>
<h1 id="further-reading">further reading</h1>
<ul>
<li><a href="http://henrikwarne.com/2015/04/16/lessons-learned-in-software-development/">lessons learned in sofware development</a></li>
<li><a href="http://henrikwarne.com/2014/06/30/what-makes-a-good-programmer/">what makes a good programmer</a></li>
<li><a href="https://en.wikipedia.org/wiki/No_Silver_Bullet">there is no silver bullet</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Git Cleanup</title>
    <link href="https://enter-haken.github.io/posts/2016-02-27-cleanup-git.html" />
    <id>https://enter-haken.github.io/posts/2016-02-27-cleanup-git.html</id>
    <published>2016-02-27T00:00:00Z</published>
    <updated>2016-02-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>After working over months with several developers on one repository, a little bit “tree care” is necessary. Usually old merged branches are deleted on server, when they are not needed any more.</p>
<!--more-->
<pre><code>for branch in `git branch -r --merged master`;
do
    comitter=`git show --format=&quot;%an&quot; $branch | head -n 1;`
    if [ &quot;$comitter&quot; = &quot;$1&quot; ]; then
        echo -e &quot;$branch&quot;
    fi
done</code></pre>
<p>Feature branches can be found like:</p>
<pre><code>./myBranches.sh &quot;Jan Frederik Hake&quot; | grep feature</code></pre>
<p>If you cut of the remote prefix a call to</p>
<pre><code>./myBranches.sh &quot;Jan Frederik Hake&quot; | grep feature | cut -d &#39;/&#39; -f 2,3 | xargs git push origin --delete</code></pre>
<p>deletes the merged branches from a remote repository.</p>]]></summary>
</entry>

</feed>
