<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>about code</title>
    <link href="https://enter-haken.github.io/atom.xml" rel="self" />
    <link href="https://enter-haken.github.io" />
    <id>https://enter-haken.github.io/atom.xml</id>
    <author>
        <name>Jan Frederik Hake</name>
        <email>jan_hake@gmx.de</email>
    </author>
    <updated>2017-08-07T00:00:00Z</updated>
    <entry>
    <title>A database gate keeper</title>
    <link href="https://enter-haken.github.io/posts/2017-08-07-database-architecture-part3.html" />
    <id>https://enter-haken.github.io/posts/2017-08-07-database-architecture-part3.html</id>
    <published>2017-08-07T00:00:00Z</published>
    <updated>2017-08-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>After <a href="/posts/2017-07-15-database-architecture-part2.html">working with some entities</a> it comes the question, how to get the data inside and outside the database. There is no need, that other parts of an application need to now, how the data is organized in relations. One possible way of hiding the inner database structure is to create a kind of transfer table.</p>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.38.0 (20140413.2041)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="694pt" height="242pt"
 viewBox="0.00 0.00 694.00 242.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 238)">
<title>%3</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-238 690,-238 690,4 -4,4"/>
<g id="clust1" class="cluster"><title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" points="0,-59 0,-136 167,-136 167,-59 0,-59"/>
<text text-anchor="middle" x="83.5" y="-120.8" font-family="Helvetica,sans-Serif" font-size="14.00">some kind of middleware</text>
</g>
<g id="clust2" class="cluster"><title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" points="187,-8 187,-226 678,-226 678,-8 187,-8"/>
<text text-anchor="middle" x="432.5" y="-210.8" font-family="Helvetica,sans-Serif" font-size="14.00">PostgreSQL</text>
</g>
<g id="clust3" class="cluster"><title>cluster_2</title>
<polygon fill="white" stroke="white" points="285,-16 285,-195 670,-195 670,-16 285,-16"/>
<text text-anchor="middle" x="477.5" y="-179.8" font-family="Helvetica,sans-Serif" font-size="14.00">relational</text>
<text text-anchor="middle" x="477.5" y="-164.8" font-family="Helvetica,sans-Serif" font-size="14.00">data</text>
</g>
<!-- mwnode -->
<g id="node1" class="node"><title>mwnode</title>
<path fill="white" stroke="white" d="M114,-105C114,-105 52,-105 52,-105 46,-105 40,-99 40,-93 40,-93 40,-79 40,-79 40,-73 46,-67 52,-67 52,-67 114,-67 114,-67 120,-67 126,-73 126,-79 126,-79 126,-93 126,-93 126,-99 120,-105 114,-105"/>
<text text-anchor="middle" x="83" y="-89.8" font-family="Helvetica,sans-Serif" font-size="14.00">middleware</text>
<text text-anchor="middle" x="83" y="-74.8" font-family="Helvetica,sans-Serif" font-size="14.00">node</text>
</g>
<!-- transfer -->
<g id="node8" class="node"><title>transfer</title>
<path fill="white" stroke="white" d="M245,-105C245,-105 207,-105 207,-105 201,-105 195,-99 195,-93 195,-93 195,-79 195,-79 195,-73 201,-67 207,-67 207,-67 245,-67 245,-67 251,-67 257,-73 257,-79 257,-79 257,-93 257,-93 257,-99 251,-105 245,-105"/>
<text text-anchor="middle" x="226" y="-89.8" font-family="Helvetica,sans-Serif" font-size="14.00">transfer</text>
<text text-anchor="middle" x="226" y="-74.8" font-family="Helvetica,sans-Serif" font-size="14.00">table</text>
</g>
<!-- mwnode&#45;&gt;transfer -->
<g id="edge6" class="edge"><title>mwnode&#45;&gt;transfer</title>
<path fill="none" stroke="black" d="M126.305,-86C144.835,-86 166.477,-86 184.765,-86"/>
<polygon fill="black" stroke="black" points="184.817,-89.5001 194.817,-86 184.817,-82.5001 184.817,-89.5001"/>
</g>
<!-- customer -->
<g id="node2" class="node"><title>customer</title>
<path fill="lightgrey" stroke="lightgrey" d="M354,-104C354,-104 305,-104 305,-104 299,-104 293,-98 293,-92 293,-92 293,-80 293,-80 293,-74 299,-68 305,-68 305,-68 354,-68 354,-68 360,-68 366,-74 366,-80 366,-80 366,-92 366,-92 366,-98 360,-104 354,-104"/>
<text text-anchor="middle" x="329.5" y="-82.3" font-family="Helvetica,sans-Serif" font-size="14.00">customer</text>
</g>
<!-- person -->
<g id="node3" class="node"><title>person</title>
<path fill="lightgrey" stroke="lightgrey" d="M448,-104C448,-104 414,-104 414,-104 408,-104 402,-98 402,-92 402,-92 402,-80 402,-80 402,-74 408,-68 414,-68 414,-68 448,-68 448,-68 454,-68 460,-74 460,-80 460,-80 460,-92 460,-92 460,-98 454,-104 448,-104"/>
<text text-anchor="middle" x="431" y="-82.3" font-family="Helvetica,sans-Serif" font-size="14.00">person</text>
</g>
<!-- customer&#45;&gt;person -->
<g id="edge1" class="edge"><title>customer&#45;&gt;person</title>
<path fill="none" stroke="black" d="M366.141,-86C374.374,-86 383.17,-86 391.519,-86"/>
<polygon fill="black" stroke="black" points="391.779,-89.5001 401.779,-86 391.779,-82.5001 391.779,-89.5001"/>
</g>
<!-- p2p -->
<g id="node4" class="node"><title>p2p</title>
<path fill="lightgrey" stroke="lightgrey" d="M545.5,-77.5C545.5,-77.5 511.5,-77.5 511.5,-77.5 505.5,-77.5 499.5,-71.5 499.5,-65.5 499.5,-65.5 499.5,-36.5 499.5,-36.5 499.5,-30.5 505.5,-24.5 511.5,-24.5 511.5,-24.5 545.5,-24.5 545.5,-24.5 551.5,-24.5 557.5,-30.5 557.5,-36.5 557.5,-36.5 557.5,-65.5 557.5,-65.5 557.5,-71.5 551.5,-77.5 545.5,-77.5"/>
<text text-anchor="middle" x="528.5" y="-62.3" font-family="Helvetica,sans-Serif" font-size="14.00">person</text>
<text text-anchor="middle" x="528.5" y="-47.3" font-family="Helvetica,sans-Serif" font-size="14.00">to</text>
<text text-anchor="middle" x="528.5" y="-32.3" font-family="Helvetica,sans-Serif" font-size="14.00">phone</text>
</g>
<!-- person&#45;&gt;p2p -->
<g id="edge2" class="edge"><title>person&#45;&gt;p2p</title>
<path fill="none" stroke="black" d="M460.137,-75.6881C469.38,-72.3005 479.81,-68.478 489.653,-64.8706"/>
<polygon fill="black" stroke="black" points="491.05,-68.0865 499.234,-61.3591 488.641,-61.514 491.05,-68.0865"/>
</g>
<!-- p2a -->
<g id="node6" class="node"><title>p2a</title>
<path fill="lightgrey" stroke="lightgrey" d="M549,-148.5C549,-148.5 508,-148.5 508,-148.5 502,-148.5 496,-142.5 496,-136.5 496,-136.5 496,-107.5 496,-107.5 496,-101.5 502,-95.5 508,-95.5 508,-95.5 549,-95.5 549,-95.5 555,-95.5 561,-101.5 561,-107.5 561,-107.5 561,-136.5 561,-136.5 561,-142.5 555,-148.5 549,-148.5"/>
<text text-anchor="middle" x="528.5" y="-133.3" font-family="Helvetica,sans-Serif" font-size="14.00">person</text>
<text text-anchor="middle" x="528.5" y="-118.3" font-family="Helvetica,sans-Serif" font-size="14.00">to</text>
<text text-anchor="middle" x="528.5" y="-103.3" font-family="Helvetica,sans-Serif" font-size="14.00">address</text>
</g>
<!-- person&#45;&gt;p2a -->
<g id="edge4" class="edge"><title>person&#45;&gt;p2a</title>
<path fill="none" stroke="black" d="M460.137,-96.6065C468.379,-99.7137 477.566,-103.177 486.438,-106.521"/>
<polygon fill="black" stroke="black" points="485.29,-109.829 495.882,-110.081 487.76,-103.279 485.29,-109.829"/>
</g>
<!-- phone -->
<g id="node5" class="node"><title>phone</title>
<path fill="lightgrey" stroke="lightgrey" d="M644.5,-69C644.5,-69 614.5,-69 614.5,-69 608.5,-69 602.5,-63 602.5,-57 602.5,-57 602.5,-45 602.5,-45 602.5,-39 608.5,-33 614.5,-33 614.5,-33 644.5,-33 644.5,-33 650.5,-33 656.5,-39 656.5,-45 656.5,-45 656.5,-57 656.5,-57 656.5,-63 650.5,-69 644.5,-69"/>
<text text-anchor="middle" x="629.5" y="-47.3" font-family="Helvetica,sans-Serif" font-size="14.00">phone</text>
</g>
<!-- p2p&#45;&gt;phone -->
<g id="edge3" class="edge"><title>p2p&#45;&gt;phone</title>
<path fill="none" stroke="black" d="M557.605,-51C568.371,-51 580.81,-51 592.234,-51"/>
<polygon fill="black" stroke="black" points="592.364,-54.5001 602.363,-51 592.363,-47.5001 592.364,-54.5001"/>
</g>
<!-- address -->
<g id="node7" class="node"><title>address</title>
<path fill="lightgrey" stroke="lightgrey" d="M650,-140C650,-140 609,-140 609,-140 603,-140 597,-134 597,-128 597,-128 597,-116 597,-116 597,-110 603,-104 609,-104 609,-104 650,-104 650,-104 656,-104 662,-110 662,-116 662,-116 662,-128 662,-128 662,-134 656,-140 650,-140"/>
<text text-anchor="middle" x="629.5" y="-118.3" font-family="Helvetica,sans-Serif" font-size="14.00">address</text>
</g>
<!-- p2a&#45;&gt;address -->
<g id="edge5" class="edge"><title>p2a&#45;&gt;address</title>
<path fill="none" stroke="black" d="M561.096,-122C569.223,-122 578.094,-122 586.652,-122"/>
<polygon fill="black" stroke="black" points="586.864,-125.5 596.864,-122 586.864,-118.5 586.864,-125.5"/>
</g>
<!-- transfer&#45;&gt;customer -->
<g id="edge7" class="edge"><title>transfer&#45;&gt;customer</title>
<path fill="none" stroke="black" d="M257.179,-86C265.243,-86 274.141,-86 282.838,-86"/>
<polygon fill="black" stroke="black" points="282.893,-89.5001 292.893,-86 282.893,-82.5001 282.893,-89.5001"/>
</g>
</g>
</svg>

<p>This table is a kind of a gate keeper. Only this table should be used to communicate with he outside world. Maybe this sounds a little bit weird for a moment, but let me show you my idea.</p>
<!--more-->
<p>First we have to know, which entities can be used by the middleware.</p>
<pre><code>CREATE TYPE entity AS ENUM (
    &#39;employee&#39;,
    &#39;customer&#39;,
    &#39;purchase_order&#39;,
    &#39;article&#39;,
    &#39;price&#39;
);</code></pre>
<p>These are <a href="/posts/2017-07-15-database-architecture-part2.html">previously</a> used examples.</p>
<pre><code>CREATE TYPE transfer_status AS ENUM (
    &#39;pending&#39;,
    &#39;processing&#39;,
    &#39;succeeded&#39;,
    &#39;succeeded_with_warning&#39;,
    &#39;error&#39;
);</code></pre>
<p>The requested process can have a state.</p>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.38.0 (20140413.2041)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="341pt" height="225pt"
 viewBox="0.00 0.00 341.00 225.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 221)">
<title>%3</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-221 337,-221 337,4 -4,4"/>
<g id="clust1" class="cluster"><title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" points="8,-62 8,-137 89,-137 89,-62 8,-62"/>
<text text-anchor="middle" x="48.5" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">request</text>
</g>
<g id="clust2" class="cluster"><title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" points="109,-62 109,-167 207,-167 207,-62 109,-62"/>
<text text-anchor="middle" x="158" y="-151.8" font-family="Helvetica,sans-Serif" font-size="14.00">server</text>
<text text-anchor="middle" x="158" y="-136.8" font-family="Helvetica,sans-Serif" font-size="14.00">internal</text>
<text text-anchor="middle" x="158" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">processing</text>
</g>
<g id="clust3" class="cluster"><title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" points="227,-8 227,-209 325,-209 325,-8 227,-8"/>
<text text-anchor="middle" x="276" y="-193.8" font-family="Helvetica,sans-Serif" font-size="14.00">result</text>
</g>
<!-- pending -->
<g id="node1" class="node"><title>pending</title>
<path fill="white" stroke="white" d="M69,-106C69,-106 28,-106 28,-106 22,-106 16,-100 16,-94 16,-94 16,-82 16,-82 16,-76 22,-70 28,-70 28,-70 69,-70 69,-70 75,-70 81,-76 81,-82 81,-82 81,-94 81,-94 81,-100 75,-106 69,-106"/>
<text text-anchor="middle" x="48.5" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">pending</text>
</g>
<!-- processing -->
<g id="node2" class="node"><title>processing</title>
<path fill="white" stroke="white" d="M187,-106C187,-106 129,-106 129,-106 123,-106 117,-100 117,-94 117,-94 117,-82 117,-82 117,-76 123,-70 129,-70 129,-70 187,-70 187,-70 193,-70 199,-76 199,-82 199,-82 199,-94 199,-94 199,-100 193,-106 187,-106"/>
<text text-anchor="middle" x="158" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">processing</text>
</g>
<!-- pending&#45;&gt;processing -->
<g id="edge1" class="edge"><title>pending&#45;&gt;processing</title>
<path fill="none" stroke="black" d="M81.1721,-88C89.1847,-88 97.9896,-88 106.675,-88"/>
<polygon fill="black" stroke="black" points="106.761,-91.5001 116.761,-88 106.761,-84.5001 106.761,-91.5001"/>
</g>
<!-- succeeded_with_warning -->
<g id="node3" class="node"><title>succeeded_with_warning</title>
<path fill="white" stroke="white" d="M301,-177.5C301,-177.5 251,-177.5 251,-177.5 245,-177.5 239,-171.5 239,-165.5 239,-165.5 239,-136.5 239,-136.5 239,-130.5 245,-124.5 251,-124.5 251,-124.5 301,-124.5 301,-124.5 307,-124.5 313,-130.5 313,-136.5 313,-136.5 313,-165.5 313,-165.5 313,-171.5 307,-177.5 301,-177.5"/>
<text text-anchor="middle" x="276" y="-162.3" font-family="Helvetica,sans-Serif" font-size="14.00">succeded</text>
<text text-anchor="middle" x="276" y="-147.3" font-family="Helvetica,sans-Serif" font-size="14.00">with</text>
<text text-anchor="middle" x="276" y="-132.3" font-family="Helvetica,sans-Serif" font-size="14.00">warning</text>
</g>
<!-- processing&#45;&gt;succeeded_with_warning -->
<g id="edge2" class="edge"><title>processing&#45;&gt;succeeded_with_warning</title>
<path fill="none" stroke="black" d="M192.241,-106.053C203.985,-112.432 217.397,-119.716 229.955,-126.536"/>
<polygon fill="black" stroke="black" points="228.454,-129.703 238.912,-131.4 231.794,-123.552 228.454,-129.703"/>
</g>
<!-- succeeded -->
<g id="node4" class="node"><title>succeeded</title>
<path fill="white" stroke="white" d="M305,-106C305,-106 247,-106 247,-106 241,-106 235,-100 235,-94 235,-94 235,-82 235,-82 235,-76 241,-70 247,-70 247,-70 305,-70 305,-70 311,-70 317,-76 317,-82 317,-82 317,-94 317,-94 317,-100 311,-106 305,-106"/>
<text text-anchor="middle" x="276" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">succeeded</text>
</g>
<!-- processing&#45;&gt;succeeded -->
<g id="edge3" class="edge"><title>processing&#45;&gt;succeeded</title>
<path fill="none" stroke="black" d="M199.246,-88C207.433,-88 216.144,-88 224.632,-88"/>
<polygon fill="black" stroke="black" points="224.826,-91.5001 234.826,-88 224.825,-84.5001 224.826,-91.5001"/>
</g>
<!-- error -->
<g id="node5" class="node"><title>error</title>
<path fill="white" stroke="white" d="M291,-52C291,-52 261,-52 261,-52 255,-52 249,-46 249,-40 249,-40 249,-28 249,-28 249,-22 255,-16 261,-16 261,-16 291,-16 291,-16 297,-16 303,-22 303,-28 303,-28 303,-40 303,-40 303,-46 297,-52 291,-52"/>
<text text-anchor="middle" x="276" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">error</text>
</g>
<!-- processing&#45;&gt;error -->
<g id="edge4" class="edge"><title>processing&#45;&gt;error</title>
<path fill="none" stroke="black" d="M197.949,-69.8686C211.402,-63.6061 226.393,-56.6275 239.55,-50.5026"/>
<polygon fill="black" stroke="black" points="241.17,-53.6094 248.758,-46.216 238.215,-47.2633 241.17,-53.6094"/>
</g>
</g>
</svg>

<p>For the start, the transfer table has some kind of <code>request</code> and some kind of <code>response</code>.</p>
<pre><code>CREATE TABLE transfer (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    status transfer_status NOT NULL DEFAULT &#39;pending&#39;,
    request JSONB NOT NULL,
    result JSONB
);</code></pre>
<p>A simple insert like</p>
<pre><code>INSERT INTO transfer (request) 
    VALUES (&#39;{&quot;some_data&quot; : &quot;values&quot;}&#39;::JSONB);</code></pre>
<p>should be enough, to communicate with the database.</p>
<p>Now it is time to fill this <code>request</code> object with life. First we define some keys, which are mandatory for every request.</p>
<ul>
<li>The <code>entity</code> key defines the entity known to the database. (e.g. <code>customer</code> or <code>purchase_order</code>)</li>
<li>The <code>payload</code> is the actual data</li>
<li>The <code>action</code> key tells the database, what to do with the <code>payload</code>. Valid actions for now are <code>select</code>, <code>upsert</code> and <code>delete</code></li>
</ul>
<p>The trigger function is the entry point for every data access.</p>
<pre><code>CREATE FUNCTION transfer_trigger_function() RETURNS TRIGGER AS $$
DECLARE
BEGIN
    CASE NEW.request-&gt;&gt;&#39;entity&#39;
        WHEN &#39;customer&#39; THEN
            SELECT customer_manager(NEW.id, NEW.request) INTO NEW.response;
        ELSE
            RAISE EXCEPTION &#39;not a valid entity&#39;;
    END CASE;
    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER transfer_after_trigger BEFORE INSERT ON transfer
    FOR EACH ROW EXECUTE PROCEDURE transfer_trigger_function();</code></pre>
<p>As you can see, you can access the <code>request</code> data from within the trigger function via <a href="https://www.postgresql.org/docs/current/static/functions-json.html">build in json functions</a>.</p>
<p>There shouldn’t be much logic in the transfer trigger. The entity managers should do the “hard work”.</p>
<p>Due to this is a trigger function, you should be aware of nesting functions too much. You should not update the <code>transfer</code> table out of the trigger function it self. This can lead to infinite loops.</p>
<h1 id="customer-entity-manager">customer entity manager</h1>
<p>Every entity manager should perform the <code>select</code>, <code>upsert</code> and <code>delete</code> tasks. Let’s take the <code>customer</code> as an example.</p>
<h2 id="select">select</h2>
<p>When every root entity like the <code>customer</code> relation has a <code>json_view</code> column, this should be the result for a select operation. In the first step, the request can look like</p>
<pre><code>{
    &quot;entity&quot; : &quot;customer&quot;,
    &quot;action&quot; : &quot;select&quot;,
    &quot;payload&quot; : { 
        &quot;id&quot; : &quot;29e2fa06-edfc-49ed-878b-49e8ded9bb89&quot; 
    }
}</code></pre>
<p>The <code>customer_manager</code> checks if the action is valid and calls the assigned function.</p>
<pre><code>CREATE FUNCTION customer_manager(request JSONB) RETURNS JSONB AS $$
DECLARE
    raw_response JSON;
BEGIN
    CASE request-&gt;&gt;&#39;action&#39;
        WHEN &#39;select&#39; THEN
            SELECT customer_manager_select(request-&gt;&#39;payload&#39;) INTO raw_response;
        ELSE
            RAISE EXCEPTION &#39;not a valid action&#39;;
    END CASE;
    
    RETURN raw_response;
END
$$ LANGUAGE plpgsql; </code></pre>
<p>The <code>customer_manager_select</code> function takes the payload and returns the <code>json_view</code> of the customer as a response.</p>
<pre><code>CREATE FUNCTION customer_manager_select(raw_payload JSONB) RETURNS JSONB AS $$
DECLARE 
    raw_result JSONB;
BEGIN
    SELECT json_view FROM customer WHERE id = (raw_payload-&gt;&gt;&#39;id&#39;)::UUID INTO raw_result;

    raw_result = &#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0 }&#39; || jsonb_build_object(&#39;data&#39;, raw_result);

    RETURN raw_result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>An</p>
<pre><code>INSERT INTO transfer (request) 
    VALUES (&#39;{ &quot;entity&quot; : &quot;customer&quot;, &quot;action&quot; : &quot;select&quot;, &quot;payload&quot; : { &quot;id&quot; : &quot;162a5041-14ba-442e-bc1b-a062b9926d49&quot; } }&#39;::JSONB);</code></pre>
<p>will result into the following row.</p>
<pre><code>                  id                  | status  |                                                request                                                |response|         created_at         |         updated_at         

 874c1126-8ea6-4609-9c6d-ed52fc8bb682 | pending | {&quot;action&quot;: &quot;select&quot;, &quot;entity&quot;: &quot;customer&quot;, &quot;payload&quot;: {&quot;id&quot;: &quot;162a5041-14ba-442e-bc1b-a062b9926d49&quot;}} | {&quot;data&quot;: {&quot;id&quot;: &quot;162a5041-14ba-442e-bc1b-a062b9926d49&quot;, &quot;person&quot;: {&quot;id&quot;: &quot;0ec888ea-b84b-4dab-97fc-c1a6fb8ff313&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;addresses&quot;: [{&quot;id&quot;: &quot;06690a9c-92ea-4791-8922-e4e2da7f8991&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44339&quot;, &quot;address_type&quot;: &quot;private&quot;, &quot;house_number&quot;: &quot;123&quot;}, {&quot;id&quot;: &quot;e81b9449-7c0e-4d39-993e-e483064dd6c9&quot;, &quot;city&quot;: &quot;Bochum&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44866&quot;, &quot;address_type&quot;: &quot;work&quot;, &quot;house_number&quot;: &quot;321&quot;}], &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;, &quot;phone_numbers&quot;: [{&quot;id&quot;: &quot;6c09f794-45f4-4746-ba0b-2a6ae9f8dd97&quot;, &quot;phone_number&quot;: &quot;+49123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;landline&quot;, &quot;is_primary_phone_number&quot;: true}, {&quot;id&quot;: &quot;5e08670f-0cf7-46b4-9c0b-40b87a727607&quot;, &quot;phone_number&quot;: &quot;+49151123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;cellular_network&quot;, &quot;is_primary_phone_number&quot;: false}], &quot;email_addresses&quot;: [{&quot;id&quot;: &quot;815fe354-b157-422e-b3c3-6686fead0152&quot;, &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;is_primary_email_address&quot;: false}]}, &quot;customer_number&quot;: &quot;AB123456&quot;}, &quot;status&quot;: &quot;ok&quot;, &quot;error_code&quot;: 0} | 2017-07-31 10:13:46.250357 | 2017-07-31 10:13:46.250357</code></pre>
<p>This is a fist shoot. The <code>response</code> can be quite big, so this should be refactored later. You might also want to build a <code>WHERE</code> clause out of the <code>payload</code> (e.g. Give me all customers living in Hamburg)</p>
<h2 id="delete">delete</h2>
<p>The <code>delete</code> action works with the root <code>id</code>.</p>
<pre><code>{
    &quot;entity&quot; : &quot;customer&quot;,
    &quot;action&quot; : &quot;delete&quot;,
    &quot;payload&quot; : { 
        &quot;id&quot; : &quot;29e2fa06-edfc-49ed-878b-49e8ded9bb89&quot; 
    }
}</code></pre>
<p>The <code>customer_manager</code> must be extended for the <code>delete</code> action.</p>
<pre><code>CREATE FUNCTION customer_manager(request JSONB) RETURNS JSONB AS $$
DECLARE
    raw_response JSON;
BEGIN
    CASE request-&gt;&gt;&#39;action&#39;
        WHEN &#39;select&#39; THEN
            SELECT customer_manager_select(request-&gt;&#39;payload&#39;) INTO raw_response;
        WHEN &#39;delete&#39; THEN
            SELECT customer_manager_delete(request-&gt;&#39;payload&#39;) INTO raw_response;
        ELSE
            RAISE EXCEPTION &#39;not a valid action&#39;;
    END CASE;
    
    RETURN raw_response;
END
$$ LANGUAGE plpgsql; </code></pre>
<p>The simplest approach would be</p>
<pre><code>CREATE FUNCTION customer_manager_delete(raw_payload JSONB) RETURNS JSONB AS $$
DECLARE 
    raw_result JSONB;
BEGIN
    DELETE FROM customer WHERE id = (raw_payload-&gt;&gt;&#39;id&#39;)::UUID;

    raw_result := (&#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0, &quot;data&quot; : { &quot;id&quot; : &quot;&#39; || (raw_payload-&gt;&gt;&#39;id&#39;) || &#39;&quot;}}&#39;)::JSONB;

    RETURN raw_result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>This will work, if the <code>customer</code> has no reference to other tables. After a first <code>purchase_order</code> is created, deletion won’t work any more, due to referential integrity constraints. This is an issue, to think about. In Germany for example, you have to store invoices for several years. This means, customers won’t be deleted, until there last invoice is deleted. There is one approach, to set a own <code>deleted</code> property for a <code>customer</code>. This property is very handy, so it can be included into the post <a href="https://en.wikipedia.org/wiki/Data_definition_language">DDL</a> script.</p>
<pre><code>CREATE FUNCTION add_metadata_to_every_table() RETURNS VOID AS $$
DECLARE 
    row record;
BEGIN
    FOR row IN SELECT tablename FROM pg_tables WHERE schemaname = &#39;test&#39; LOOP

        -- ...   
        EXECUTE &#39;ALTER TABLE &#39; || row.tablename || 
            &#39; ADD COLUMN deleted boolean NOT NULL DEFAULT false&#39;;
        -- ...

    END LOOP;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>Now every table has a <code>deleted</code> column.</p>
<p>Now the <code>customer_manager_select</code> looks like</p>
<pre><code>CREATE FUNCTION customer_manager_delete(raw_payload JSONB) RETURNS JSONB AS $$
BEGIN
    UPDATE customer SET deleted = true WHERE id = (raw_payload-&gt;&gt;&#39;id&#39;)::UUID;

    RETURN (&#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0, &quot;data&quot; : { &quot;id&quot; : &quot;&#39; || (raw_payload-&gt;&gt;&#39;id&#39;) || &#39;&quot;}}&#39;)::JSONB;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>It might be handy, if a <code>deleted</code> record can’t be updated any more. The <code>metadata_trigger</code> is a good place for checking for the <code>deleted</code> column.</p>
<pre><code>CREATE FUNCTION metadata_trigger() RETURNS TRIGGER AS $$
BEGIN
    IF NEW.deleted = true THEN
        RAISE EXCEPTION &#39;can not update the deleted record %&#39;, NEW.id::text;
    END IF;

    NEW.updated_at := now();
    RETURN NEW;
END
$$ LANGUAGE plpgsql;</code></pre>
<h2 id="upsert">upsert</h2>
<p>Let’s start with a <a href="/posts/2017-07-15-database-architecture-part2.html#customer">known customer</a>.</p>
<pre><code>    &quot;person&quot;: {
        &quot;addresses&quot;: [{
            &quot;city&quot;: &quot;Dortmund&quot;,
            &quot;street&quot;: &quot;Fakestreet&quot;,
            &quot;postal_code&quot;: &quot;44339&quot;,
            &quot;address_type&quot;: &quot;private&quot;,
            &quot;house_number&quot;: &quot;123&quot;
        }, {
            &quot;city&quot;: &quot;Bochum&quot;,
            &quot;street&quot;: &quot;Fakestreet&quot;,
            &quot;postal_code&quot;: &quot;44866&quot;,
            &quot;address_type&quot;: &quot;work&quot;,
            &quot;house_number&quot;: &quot;321&quot;
        }],
        &quot;last_name&quot;: &quot;Hake&quot;,
        &quot;first_name&quot;: &quot;Jan Frederik&quot;,
        &quot;phone_numbers&quot;: [{
            &quot;phone_number&quot;: &quot;+49123456789&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;communication_network&quot;: &quot;landline&quot;
        }, {
            &quot;phone_number&quot;: &quot;+49151123456789&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;communication_network&quot;: &quot;cellular_network&quot;
        }],
        &quot;email_addresses&quot;: [{
            &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;,
            &quot;communication_type&quot;: &quot;private&quot;
        }]
    }
}</code></pre>
<p>As you can see, there are no <code>id</code>s or <code>customer_numbers</code> present in the whole entity. For this example, a new customer is assumed. Imagine, you have a web form, where you enter your data. When you’re ready with editing, this might be a result for a customer.</p>
<p>So we first take a look at a possible insert function.</p>
<p>For now, we use a simple customer number generator.</p>
<pre><code>CREATE FUNCTION customer_number() RETURNS text AS $$
    from random import randint
    return &quot;AB%05d&quot; % randint(0,99999)
$$ LANGUAGE plpython3u;</code></pre>
<p>The default value of the <code>customer_number</code> must be changed to</p>
<pre><code>ALTER TABLE customer ALTER COLUMN customer_number SET DEFAULT customer_number();</code></pre>
<p>For a new <code>customer</code>, only <code>person</code> data is needed. The <code>customer_manager</code> has to be extended.</p>
<pre><code>CREATE FUNCTION customer_manager(request JSONB) RETURNS JSONB AS $$
DECLARE
    raw_response JSON;
BEGIN
    CASE request-&gt;&gt;&#39;action&#39;
       -- ...
       WHEN &#39;upsert&#39; THEN
            SELECT customer_manager_upsert(request-&gt;&#39;payload&#39;) INTO raw_response;
       -- ...  
    END CASE; 
$$ LANGUAGE plpgsql; </code></pre>
<p>We insert this new <code>customer</code>.</p>
<pre><code>CREATE FUNCTION customer_manager_upsert(raw_payload JSONB) RETURNS JSONB AS $$
DECLARE
    person_id UUID;
    customer_id UUID;
    result JSONB;
BEGIN
    INSERT INTO person (first_name, last_name, birth_date, notes, website)
         VALUES (raw_payload#&gt;&gt;&#39;{person,first_name}&#39;, 
             raw_payload#&gt;&gt;&#39;{person,last_name}&#39;,
             (raw_payload#&gt;&gt;&#39;{person,birth_date}&#39;)::DATE,
             raw_payload#&gt;&gt;&#39;{person,notes}&#39;,
             raw_payload#&gt;&gt;&#39;{person,website}&#39;) RETURNING id INTO person_id;
   
    INSERT INTO customer (id_person) VALUES (person_id) RETURNING id INTO customer_id;

    PERFORM update_json_view_customer(customer_id);

    SELECT json_view FROM customer WHERE id = customer_id INTO result;

    result = &#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0 }&#39;::JSONB || jsonb_build_object(&#39;data&#39;, result);

    RETURN result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>This creates a new <code>customer</code> with a new <code>person</code>. The <code>update_json_view_customer</code> <a href="/posts/2017-07-15-database-architecture-part2.html#customer">function</a> will update the <code>json_view</code> of the <code>customer</code>.</p>
<pre><code>{
    &quot;id&quot;: &quot;46624c40-c50a-478e-83e9-9117d7b87f39&quot;,
    &quot;person&quot;: {
        &quot;id&quot;: &quot;81b46e11-cdef-4a71-b850-68882b474c90&quot;,
        &quot;notes&quot;: null,
        &quot;website&quot;: null,
        &quot;addresses&quot;: null,
        &quot;last_name&quot;: &quot;Hake&quot;,
        &quot;birth_date&quot;: null,
        &quot;first_name&quot;: &quot;Jan Frederik&quot;,
        &quot;phone_numbers&quot;: null,
        &quot;email_addresses&quot;: null
    },
    &quot;customer_number&quot;: &quot;AB19856&quot;
}</code></pre>
<p>For the addresses, we have to loop through the nested json array</p>
<pre><code>IF raw_payload#&gt;&#39;{person}&#39; ? &#39;addresses&#39; THEN
    FOR address in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,addresses}&#39;) 
    LOOP
        INSERT INTO address (street, house_number, postal_code, city)
            VALUES (address-&gt;&gt;&#39;street&#39;, 
                address-&gt;&gt;&#39;house_number&#39;, 
                address-&gt;&gt;&#39;postal_code&#39;, 
                address-&gt;&gt;&#39;city&#39;)
            RETURNING id INTO address_id;

        INSERT INTO person_to_address (id_person, id_address)
            VALUES (person_id, address_id);
    END LOOP;
END IF;</code></pre>
<p>The phone numbers can be added with the following loop.</p>
<pre><code>IF raw_payload#&gt;&#39;{person}&#39; ? &#39;phone_numbers&#39; THEN
    FOR phone in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,phone_numbers}&#39;) 
    LOOP
        INSERT INTO phone (phone_number, communication_network)
            VALUES (phone-&gt;&gt;&#39;phone_number&#39;, 
                (phone-&gt;&gt;&#39;communication_network&#39;)::communication_network)
            RETURNING id INTO phone_id;

        INSERT INTO person_to_phone (id_person, id_phone, communication_type)
            VALUES (person_id,  phone_id, (phone-&gt;&gt;&#39;communication_type&#39;)::communication_type);
    END LOOP;
END IF;</code></pre>
<p>As you can see, the <code>communication_network</code> and <code>communication_type</code> have to be casted. This is good. Cast errors will cause an exception. This kind of type safety will help during more complex events.</p>
<p>Together we have</p>
<pre><code>CREATE FUNCTION customer_manager_upsert(raw_payload JSONB) RETURNS JSONB AS $$
DECLARE
    person_id UUID;
    customer_id UUID; 
    address_id UUID;
    phone_id UUID;
    email_id UUID;
    address JSONB;
    phone JSONB;
    email JSONB;
    result JSONB;
BEGIN
    INSERT INTO person (first_name, last_name, birth_date, notes, website)
         VALUES (raw_payload#&gt;&gt;&#39;{person,first_name}&#39;, 
             raw_payload#&gt;&gt;&#39;{person,last_name}&#39;,
             (raw_payload#&gt;&gt;&#39;{person,birth_date}&#39;)::DATE,
             raw_payload#&gt;&gt;&#39;{person,notes}&#39;,
             raw_payload#&gt;&gt;&#39;{person,website}&#39;) RETURNING id INTO person_id;

    IF raw_payload#&gt;&#39;{person}&#39; ? &#39;addresses&#39; THEN
        FOR address in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,addresses}&#39;) 
        LOOP
            INSERT INTO address (street, house_number, postal_code, city)
                VALUES (address-&gt;&gt;&#39;street&#39;, 
                    address-&gt;&gt;&#39;house_number&#39;, 
                    address-&gt;&gt;&#39;postal_code&#39;, 
                    address-&gt;&gt;&#39;city&#39;)
                RETURNING id INTO address_id;

            INSERT INTO person_to_address (id_person, id_address)
                VALUES (person_id, address_id);
        END LOOP;
    END IF;

    IF raw_payload#&gt;&#39;{person}&#39; ? &#39;phone_numbers&#39; THEN
        FOR phone in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,phone_numbers}&#39;) 
        LOOP
            INSERT INTO phone (phone_number, communication_network)
                VALUES (phone-&gt;&gt;&#39;phone_number&#39;, 
                    (phone-&gt;&gt;&#39;communication_network&#39;)::communication_network)
                RETURNING id INTO phone_id;

            INSERT INTO person_to_phone (id_person, id_phone, communication_type)
                VALUES (person_id,  phone_id, (phone-&gt;&gt;&#39;communication_type&#39;)::communication_type);
        END LOOP;
    END IF;

    IF raw_payload#&gt;&#39;{person}&#39; ? &#39;email_addresses&#39; THEN
        FOR email in SELECT * FROM jsonb_array_elements(raw_payload#&gt;&#39;{person,email_addresses}&#39;) 
        LOOP
            INSERT INTO email (email_address)
                VALUES (email-&gt;&gt;&#39;email_address&#39;) 
                RETURNING id INTO email_id;

            INSERT INTO person_to_email (id_person, id_email, communication_type)
                VALUES (person_id, email_id, (email-&gt;&gt;&#39;communication_type&#39;)::communication_type);
        END LOOP;
    END IF;
    
    INSERT INTO customer (id_person) VALUES (person_id) RETURNING id INTO customer_id;

    PERFORM update_json_view_customer(customer_id);

    SELECT json_view FROM customer WHERE id = customer_id INTO result;

    result = &#39;{ &quot;status&quot; : &quot;ok&quot;, &quot;error_code&quot;: 0 }&#39;::JSONB || jsonb_build_object(&#39;data&#39;, result);

    RETURN result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>This is a best case scenario. There are no duplicate checks for example. Maybe, the upsert function needs some rewrite in a more compact language like <a href="https://www.postgresql.org/docs/current/static/plpython.html">PL/Python</a>.</p>]]></summary>
</entry>
<entry>
    <title>Generate a ERM from a PostgreSQL database schema</title>
    <link href="https://enter-haken.github.io/posts/2017-07-20-erm-graphviz.html" />
    <id>https://enter-haken.github.io/posts/2017-07-20-erm-graphviz.html</id>
    <published>2017-07-20T00:00:00Z</published>
    <updated>2017-07-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Creating a <a href="https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model">ERM</a> is one of the first tasks, when a database is designed. During implementation, you have to sync the model with the schema. This manual task can be very annoying. With some database knowledge and some Linux standard tools, this task can be automated.</p>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.38.0 (20140413.2041)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="352pt" height="101pt"
 viewBox="0.00 0.00 352.00 101.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 97)">
<title>%3</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-97 348,-97 348,4 -4,4"/>
<g id="clust1" class="cluster"><title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" points="8,-8 8,-85 96,-85 96,-8 8,-8"/>
<text text-anchor="middle" x="52" y="-69.8" font-family="Helvetica,sans-Serif" font-size="14.00">Database</text>
</g>
<g id="clust2" class="cluster"><title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" points="116,-8 116,-85 336,-85 336,-8 116,-8"/>
<text text-anchor="middle" x="226" y="-69.8" font-family="Helvetica,sans-Serif" font-size="14.00">bash</text>
</g>
<!-- schema -->
<g id="node1" class="node"><title>schema</title>
<path fill="white" stroke="white" d="M76,-54C76,-54 28,-54 28,-54 22,-54 16,-48 16,-42 16,-42 16,-28 16,-28 16,-22 22,-16 28,-16 28,-16 76,-16 76,-16 82,-16 88,-22 88,-28 88,-28 88,-42 88,-42 88,-48 82,-54 76,-54"/>
<text text-anchor="middle" x="52" y="-38.8" font-family="Helvetica,sans-Serif" font-size="14.00">database</text>
<text text-anchor="middle" x="52" y="-23.8" font-family="Helvetica,sans-Serif" font-size="14.00">schema</text>
</g>
<!-- awk -->
<g id="node2" class="node"><title>awk</title>
<path fill="white" stroke="white" d="M194,-54C194,-54 136,-54 136,-54 130,-54 124,-48 124,-42 124,-42 124,-28 124,-28 124,-22 130,-16 136,-16 136,-16 194,-16 194,-16 200,-16 206,-22 206,-28 206,-28 206,-42 206,-42 206,-48 200,-54 194,-54"/>
<text text-anchor="middle" x="165" y="-38.8" font-family="Helvetica,sans-Serif" font-size="14.00">awk</text>
<text text-anchor="middle" x="165" y="-23.8" font-family="Helvetica,sans-Serif" font-size="14.00">processing</text>
</g>
<!-- schema&#45;&gt;awk -->
<g id="edge1" class="edge"><title>schema&#45;&gt;awk</title>
<path fill="none" stroke="black" d="M88.1211,-35C96.247,-35 105.05,-35 113.684,-35"/>
<polygon fill="black" stroke="black" points="113.691,-38.5001 123.691,-35 113.691,-31.5001 113.691,-38.5001"/>
</g>
<!-- dot -->
<g id="node3" class="node"><title>dot</title>
<path fill="white" stroke="white" d="M316,-54C316,-54 254,-54 254,-54 248,-54 242,-48 242,-42 242,-42 242,-28 242,-28 242,-22 248,-16 254,-16 254,-16 316,-16 316,-16 322,-16 328,-22 328,-28 328,-28 328,-42 328,-42 328,-48 322,-54 316,-54"/>
<text text-anchor="middle" x="285" y="-38.8" font-family="Helvetica,sans-Serif" font-size="14.00">graphviz</text>
<text text-anchor="middle" x="285" y="-23.8" font-family="Helvetica,sans-Serif" font-size="14.00">processing </text>
</g>
<!-- awk&#45;&gt;dot -->
<g id="edge2" class="edge"><title>awk&#45;&gt;dot</title>
<path fill="none" stroke="black" d="M206.279,-35C214.443,-35 223.141,-35 231.651,-35"/>
<polygon fill="black" stroke="black" points="231.891,-38.5001 241.891,-35 231.891,-31.5001 231.891,-38.5001"/>
</g>
</g>
</svg>

<!--more-->
<h1 id="get-the-schema">get the schema</h1>
<p>The <a href="https://www.postgresql.org/docs/current/static/information-schema.html">information_schema</a> exists in all databases.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT table_name, column_name, data_type, udt_name \
&gt; FROM information_schema.columns WHERE table_schema = &#39;test&#39;&quot; | head
       table_name       |       column_name        |          data_type          |       udt_name        
------------------------+--------------------------+-----------------------------+-----------------------
 person_to_email        | id_person                | uuid                        | uuid
 person_to_email        | id_email                 | uuid                        | uuid
 person_to_email        | communication_type       | USER-DEFINED                | communication_type
 person_to_email        | is_primary_email_address | boolean                     | bool
 person_to_email        | created_at               | timestamp without time zone | timestamp
 person_to_email        | updated_at               | timestamp without time zone | timestamp
 person_view            | first_name               | character varying           | varchar
 person_view            | last_name                | character varying           | varchar</code></pre>
<p>These are all the columns from our test schema. We still need some information about references between the relations. For the next processing step, all of the necessary column data should be in one result record.</p>
<p>With the key column constraints</p>
<pre><code>$ psql -U postgres -c &quot;SELECT constraint_name, table_name, column_name \
&gt; FROM information_schema.key_column_usage WHERE table_schema = &#39;test&#39;&quot; | head
              constraint_name               |       table_name       |      column_name      
--------------------------------------------+------------------------+-----------------------
 person_to_email_id_email_fkey              | person_to_email        | id_email
 person_to_email_id_person_fkey             | person_to_email        | id_person
 person_to_email_pkey                       | person_to_email        | id_person
 person_to_email_pkey                       | person_to_email        | id_email
 person_pkey                                | person                 | id
 address_pkey                               | address                | id
 employee_id_person_fkey                    | employee               | id_person
 employee_pkey                              | employee               | id</code></pre>
<p>and a list of <a href="https://www.postgresql.org/docs/current/static/infoschema-table-constraints.html">table_constraints</a>,</p>
<pre><code>$ psql -U postgres -c &quot;SELECT constraint_name, table_name, constraint_type \
&gt; FROM information_schema.table_constraints WHERE table_schema = &#39;test&#39; \
&gt; AND constraint_type IN (&#39;FOREIGN KEY&#39;,&#39;PRIMARY KEY&#39;)&quot; | head
              constraint_name               |       table_name       | constraint_type
--------------------------------------------+------------------------+-----------------
 person_pkey                                | person                 | PRIMARY KEY
 address_pkey                               | address                | PRIMARY KEY
 person_to_address_pkey                     | person_to_address      | PRIMARY KEY
 person_to_address_id_person_fkey           | person_to_address      | FOREIGN KEY
 person_to_address_id_address_fkey          | person_to_address      | FOREIGN KEY
 email_pkey                                 | email                  | PRIMARY KEY
 person_to_email_pkey                       | person_to_email        | PRIMARY KEY
 person_to_email_id_person_fkey             | person_to_email        | FOREIGN KEY</code></pre>
<p>we can build our first query.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT c.table_name, 
&gt; c.column_name, 
&gt; c.data_type, 
&gt; c.udt_name,
&gt; is_nullable, 
&gt; c.character_maximum_length,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;PRIMARY KEY&#39; LIMIT 1
&gt; ) primary_key
&gt; FROM information_schema.columns c 
&gt;         JOIN information_schema.tables t on c.table_name = t.table_name
&gt; WHERE c.table_schema = &#39;test&#39; AND t.table_type = &#39;BASE TABLE&#39;&quot; | head
       table_name       |       column_name        |          data_type          |       udt_name        | is_nullable | character_maximum_length | primary_key 
------------------------+--------------------------+-----------------------------+-----------------------+-------------+--------------------------+-------------
 person_to_email        | id_person                | uuid                        | uuid                  | NO          |                          | PRIMARY KEY
 person_to_email        | id_email                 | uuid                        | uuid                  | NO          |                          | PRIMARY KEY
 person_to_email        | communication_type       | USER-DEFINED                | communication_type    | NO          |                          | 
 person_to_email        | is_primary_email_address | boolean                     | bool                  | NO          |                          | 
 person_to_email        | created_at               | timestamp without time zone | timestamp             | NO          |                          | 
 person_to_email        | updated_at               | timestamp without time zone | timestamp             | NO          |                          | 
 person                 | id                       | uuid                        | uuid                  | NO          |                          | PRIMARY KEY
 person                 | first_name               | character varying           | varchar               | YES         |                      512 | </code></pre>
<p>Now we need the foreign keys and the target of the relation. These information can be fetched from the <a href="https://www.postgresql.org/docs/current/static/infoschema-constraint-column-usage.html">constraint_column_usage view</a>.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT table_name, column_name, constraint_name FROM information_schema.constraint_column_usage \
&gt; WHERE table_schema = &#39;test&#39;&quot; | head
       table_name       |      column_name      |              constraint_name               
------------------------+-----------------------+--------------------------------------------
 person                 | id                    | person_pkey
 address                | id                    | address_pkey
 person_to_address      | id_person             | person_to_address_pkey
 person_to_address      | id_address            | person_to_address_pkey
 person                 | id                    | person_to_address_id_person_fkey
 address                | id                    | person_to_address_id_address_fkey
 email                  | id                    | email_pkey
 person_to_email        | id_person             | person_to_email_pkey</code></pre>
<p>With this we are coming to our next query.</p>
<pre><code>$  psql -U postgres -c &quot;SELECT c.table_name,
&gt; c.column_name,
&gt; c.data_type,
&gt; c.udt_name,
&gt; c.is_nullable,
&gt; c.character_maximum_length,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name
&gt;                 AND c.table_name = kcu.table_name
&gt;                 AND tc.constraint_type = &#39;PRIMARY KEY&#39; LIMIT 1
&gt; ) primary_key,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name
&gt;                 AND c.table_name = kcu.table_name
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) foreign_key,
&gt; (SELECT ccu.table_name FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         JOIN information_schema.constraint_column_usage ccu
&gt;                 ON tc.constraint_name = ccu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name
&gt;                 AND c.table_name = kcu.table_name
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) reference_table,
&gt; (SELECT ccu.column_name FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         JOIN information_schema.constraint_column_usage ccu
&gt;                 ON tc.constraint_name = ccu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name
&gt;                 AND c.table_name = kcu.table_name
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) reference_column
&gt;
&gt; FROM information_schema.columns c
&gt;         JOIN information_schema.tables t on c.table_name = t.table_name
&gt; WHERE c.table_schema = &#39;test&#39; AND t.table_type = &#39;BASE TABLE&#39;&quot; | head
       table_name       |       column_name        |          data_type          |       udt_name        | is_nullable | character_maximum_length | primary_key | foreign_key | reference_table | reference_column
------------------------+--------------------------+-----------------------------+-----------------------+-------------+--------------------------+-------------+-------------+-----------------+------------------
 person_to_email        | id_person                | uuid                        | uuid                  | NO          |                          | PRIMARY KEY | FOREIGN KEY | person          | id
 person_to_email        | id_email                 | uuid                        | uuid                  | NO          |                          | PRIMARY KEY | FOREIGN KEY | email           | id
 person_to_email        | communication_type       | USER-DEFINED                | communication_type    | NO          |                          |             |             |                 |
 person_to_email        | is_primary_email_address | boolean                     | bool                  | NO          |                          |             |             |                 |
 person_to_email        | created_at               | timestamp without time zone | timestamp             | NO          |                          |             |             |                 |
 person_to_email        | updated_at               | timestamp without time zone | timestamp             | NO          |                          |             |             |                 |
 person                 | id                       | uuid                        | uuid                  | NO          |                          | PRIMARY KEY |             |                 |
 person                 | first_name               | character varying           | varchar               | YES         |                      512 |             |             |                 |</code></pre>
<p>There is one thing left. It would be nice, if you can see the enum values within the ERM. Let’s look, what we can do about it.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT e.enumlabel, t.typname FROM pg_type t \
&gt; JOIN pg_enum e ON t.oid = e.enumtypid \
&gt; JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace&quot;  | head
       enumlabel        |        typname
------------------------+-----------------------
 work                   | address_type
 invoice                | address_type
 delivery               | address_type
 private                | address_type
 organization           | communication_type
 private                | communication_type
 work                   | communication_type
 cellular_network       | communication_network</code></pre>
<p>This can be matched on the column <code>udt_name</code>.</p>
<p>Now we have our final SQL statement for now.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT c.table_name, 
&gt; c.column_name, 
&gt; c.data_type, 
&gt; c.udt_name,
&gt; (SELECT string_agg(e.enumlabel::TEXT, &#39;, &#39;)
&gt;         FROM pg_type t 
&gt;            JOIN pg_enum e on t.oid = e.enumtypid  
&gt;            JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE t.typname = c.udt_name) enum_values,
&gt; c.is_nullable, 
&gt; c.character_maximum_length,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;PRIMARY KEY&#39; LIMIT 1
&gt; ) primary_key,
&gt; (SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) foreign_key,
&gt; (SELECT ccu.table_name FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         JOIN information_schema.constraint_column_usage ccu
&gt;                 ON tc.constraint_name = ccu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) reference_table,
&gt; (SELECT ccu.column_name FROM information_schema.key_column_usage kcu
&gt;         JOIN information_schema.table_constraints tc 
&gt;                 ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
&gt;         JOIN information_schema.constraint_column_usage ccu
&gt;                 ON tc.constraint_name = ccu.constraint_name
&gt;         WHERE c.column_name = kcu.column_name 
&gt;                 AND c.table_name = kcu.table_name 
&gt;                 AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
&gt; ) reference_column
&gt; 
&gt; FROM information_schema.columns c 
&gt;         JOIN information_schema.tables t on c.table_name = t.table_name
&gt; WHERE c.table_schema = &#39;test&#39; AND t.table_type = &#39;BASE TABLE&#39;&quot; | head
       table_name       |       column_name        |          data_type          |       udt_name        |                                     enum_values                                     | is_nullable | character_maximum_length | primary_key | foreign_key | reference_table | reference_column 
------------------------+--------------------------+-----------------------------+-----------------------+-------------------------------------------------------------------------------------+-------------+--------------------------+-------------+-------------+-----------------+------------------
 person_to_email        | id_person                | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY | FOREIGN KEY | person          | id
 person_to_email        | id_email                 | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY | FOREIGN KEY | email           | id
 person_to_email        | communication_type       | USER-DEFINED                | communication_type    | work, private, organization                                                         | NO          |                          |             |             |                 | 
 person_to_email        | is_primary_email_address | boolean                     | bool                  |                                                                                     | NO          |                          |             |             |                 | 
 person_to_email        | created_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 | 
 person_to_email        | updated_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 | 
 person                 | id                       | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY |             |                 | 
 person                 | first_name               | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | </code></pre>
<p>The <code>string_agg</code> function is used to concentrate the enum values.</p>
<h1 id="a-look-ahead">a look ahead</h1>
<p>Before starting to work with the raw schema data, we take a look at our goal. We use graphviz for drawing the ERM. My goal is to get close to a ERM visualization.</p>
<pre><code>digraph {
    node [shape=Mrecord; fontname=&quot;Courier New&quot; style=&quot;filled, bold&quot; fillcolor=&quot;white&quot;, fontcolor=&quot;black&quot;];
    customer [shape=plaintext; label=&lt;
     &lt;TABLE BORDER=&quot;1&quot; CELLBORDER=&quot;0&quot; CELLSPACING=&quot;0&quot; CELLPADDING=&quot;3&quot;&gt;
     &lt;TR&gt;
        &lt;TD COLSPAN=&quot;5&quot; BGCOLOR=&quot;black&quot;&gt;&lt;FONT color=&quot;white&quot;&gt;&lt;B&gt;customer&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD&gt;column&lt;/TD&gt;
        &lt;TD&gt;type&lt;/TD&gt;
        &lt;TD&gt;nullable&lt;/TD&gt;
        &lt;TD&gt;PK&lt;/TD&gt;
        &lt;TD&gt;FK&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f1&quot;&gt;id&lt;/TD&gt;
        &lt;TD&gt;uuid&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;PRIMARY KEY&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f2&quot;&gt;id_person&lt;/TD&gt;
        &lt;TD&gt;uuid&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;FOREIGN KEY&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f3&quot;&gt;customer_number&lt;/TD&gt;
        &lt;TD&gt;varchar&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f4&quot;&gt;json_view&lt;/TD&gt;
        &lt;TD&gt;jsonb&lt;/TD&gt;
        &lt;TD&gt;YES&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f5&quot;&gt;created_at&lt;/TD&gt;
        &lt;TD&gt;timestamp&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;TR&gt;
        &lt;TD port=&quot;f6&quot;&gt;updated_at&lt;/TD&gt;
        &lt;TD&gt;timestamp&lt;/TD&gt;
        &lt;TD&gt;NO&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;/TD&gt;
     &lt;/TR&gt;
     &lt;/TABLE&gt;&gt;]
}</code></pre>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.38.0 (20140413.2041)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="504pt" height="186pt"
 viewBox="0.00 0.00 504.00 186.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 182)">
<title>%3</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-182 500,-182 500,4 -4,4"/>
<!-- customer -->
<g id="node1" class="node"><title>customer</title>
<polygon fill="white" stroke="none" stroke-width="2" points="496,-178 -8.88178e-16,-178 -8.88178e-16,4.32987e-15 496,4.32987e-15 496,-178"/>
<polygon fill="black" stroke="none" points="9,-152 9,-173 487,-173 487,-152 9,-152"/>
<text text-anchor="start" x="214.5" y="-159.8" font-family="Courier New" font-weight="bold" font-size="14.00" fill="white">customer</text>
<text text-anchor="start" x="49" y="-137.8" font-family="Courier New" font-size="14.00">column</text>
<text text-anchor="start" x="162.5" y="-137.8" font-family="Courier New" font-size="14.00">type</text>
<text text-anchor="start" x="223" y="-137.8" font-family="Courier New" font-size="14.00">nullable</text>
<text text-anchor="start" x="333" y="-137.8" font-family="Courier New" font-size="14.00">PK</text>
<text text-anchor="start" x="430" y="-137.8" font-family="Courier New" font-size="14.00">FK</text>
<text text-anchor="start" x="65.5" y="-116.8" font-family="Courier New" font-size="14.00">id</text>
<text text-anchor="start" x="162.5" y="-116.8" font-family="Courier New" font-size="14.00">uuid</text>
<text text-anchor="start" x="248" y="-116.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="296" y="-116.8" font-family="Courier New" font-size="14.00">PRIMARY KEY</text>
<text text-anchor="start" x="36.5" y="-95.8" font-family="Courier New" font-size="14.00">id_person</text>
<text text-anchor="start" x="162.5" y="-95.8" font-family="Courier New" font-size="14.00">uuid</text>
<text text-anchor="start" x="248" y="-95.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="393" y="-95.8" font-family="Courier New" font-size="14.00">FOREIGN KEY</text>
<text text-anchor="start" x="12" y="-74.8" font-family="Courier New" font-size="14.00">customer_number</text>
<text text-anchor="start" x="150.5" y="-74.8" font-family="Courier New" font-size="14.00">varchar</text>
<text text-anchor="start" x="248" y="-74.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="36.5" y="-53.8" font-family="Courier New" font-size="14.00">json_view</text>
<text text-anchor="start" x="158.5" y="-53.8" font-family="Courier New" font-size="14.00">jsonb</text>
<text text-anchor="start" x="244" y="-53.8" font-family="Courier New" font-size="14.00">YES</text>
<text text-anchor="start" x="32.5" y="-32.8" font-family="Courier New" font-size="14.00">created_at</text>
<text text-anchor="start" x="142" y="-32.8" font-family="Courier New" font-size="14.00">timestamp</text>
<text text-anchor="start" x="248" y="-32.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="32.5" y="-11.8" font-family="Courier New" font-size="14.00">updated_at</text>
<text text-anchor="start" x="142" y="-11.8" font-family="Courier New" font-size="14.00">timestamp</text>
<text text-anchor="start" x="248" y="-11.8" font-family="Courier New" font-size="14.00">NO</text>
<polygon fill="none" stroke="black" points="8,-4 8,-174 488,-174 488,-4 8,-4"/>
</g>
</g>
</svg>

<p>The table column layout fits our needs for our relation. The <code>port</code> attribute is important for the edges.</p>
<p>If we have a <code>person</code> and a <code>customer</code>, adding</p>
<pre><code>customer -&gt; person;</code></pre>
<p>will create an edge for these relations.</p>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.38.0 (20140413.2041)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="504pt" height="463pt"
 viewBox="0.00 0.00 504.00 463.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 459)">
<title>%3</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-459 500,-459 500,4 -4,4"/>
<!-- person -->
<g id="node1" class="node"><title>person</title>
<polygon fill="white" stroke="none" stroke-width="2" points="438.5,-241 57.5,-241 57.5,8.32667e-16 438.5,8.32667e-16 438.5,-241"/>
<polygon fill="black" stroke="none" points="67,-214.5 67,-235.5 430,-235.5 430,-214.5 67,-214.5"/>
<text text-anchor="start" x="223.5" y="-222.3" font-family="Courier New" font-weight="bold" font-size="14.00" fill="white">person</text>
<text text-anchor="start" x="86.5" y="-200.3" font-family="Courier New" font-size="14.00">column</text>
<text text-anchor="start" x="179.5" y="-200.3" font-family="Courier New" font-size="14.00">type</text>
<text text-anchor="start" x="240" y="-200.3" font-family="Courier New" font-size="14.00">nullable</text>
<text text-anchor="start" x="350" y="-200.3" font-family="Courier New" font-size="14.00">PK</text>
<text text-anchor="start" x="410" y="-200.3" font-family="Courier New" font-size="14.00">FK</text>
<text text-anchor="start" x="103" y="-179.3" font-family="Courier New" font-size="14.00">id</text>
<text text-anchor="start" x="179.5" y="-179.3" font-family="Courier New" font-size="14.00">uuid</text>
<text text-anchor="start" x="265" y="-179.3" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="313" y="-179.3" font-family="Courier New" font-size="14.00">PRIMARY KEY</text>
<text text-anchor="start" x="70" y="-158.3" font-family="Courier New" font-size="14.00">first_name</text>
<text text-anchor="start" x="167.5" y="-158.3" font-family="Courier New" font-size="14.00">varchar</text>
<text text-anchor="start" x="261" y="-158.3" font-family="Courier New" font-size="14.00">YES</text>
<text text-anchor="start" x="74" y="-137.3" font-family="Courier New" font-size="14.00">last_name</text>
<text text-anchor="start" x="167.5" y="-137.3" font-family="Courier New" font-size="14.00">varchar</text>
<text text-anchor="start" x="261" y="-137.3" font-family="Courier New" font-size="14.00">YES</text>
<text text-anchor="start" x="70" y="-116.3" font-family="Courier New" font-size="14.00">birth_date</text>
<text text-anchor="start" x="179.5" y="-116.3" font-family="Courier New" font-size="14.00">date</text>
<text text-anchor="start" x="261" y="-116.3" font-family="Courier New" font-size="14.00">YES</text>
<text text-anchor="start" x="90.5" y="-95.3" font-family="Courier New" font-size="14.00">notes</text>
<text text-anchor="start" x="167.5" y="-95.3" font-family="Courier New" font-size="14.00">varchar</text>
<text text-anchor="start" x="261" y="-95.3" font-family="Courier New" font-size="14.00">YES</text>
<text text-anchor="start" x="82.5" y="-74.3" font-family="Courier New" font-size="14.00">website</text>
<text text-anchor="start" x="167.5" y="-74.3" font-family="Courier New" font-size="14.00">varchar</text>
<text text-anchor="start" x="261" y="-74.3" font-family="Courier New" font-size="14.00">YES</text>
<text text-anchor="start" x="74" y="-53.3" font-family="Courier New" font-size="14.00">json_view</text>
<text text-anchor="start" x="175.5" y="-53.3" font-family="Courier New" font-size="14.00">jsonb</text>
<text text-anchor="start" x="261" y="-53.3" font-family="Courier New" font-size="14.00">YES</text>
<text text-anchor="start" x="70" y="-32.3" font-family="Courier New" font-size="14.00">created_at</text>
<text text-anchor="start" x="159" y="-32.3" font-family="Courier New" font-size="14.00">timestamp</text>
<text text-anchor="start" x="265" y="-32.3" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="70" y="-11.3" font-family="Courier New" font-size="14.00">updated_at</text>
<text text-anchor="start" x="159" y="-11.3" font-family="Courier New" font-size="14.00">timestamp</text>
<text text-anchor="start" x="265" y="-11.3" font-family="Courier New" font-size="14.00">NO</text>
<polygon fill="none" stroke="black" points="65.5,-4 65.5,-237 430.5,-237 430.5,-4 65.5,-4"/>
</g>
<!-- customer -->
<g id="node2" class="node"><title>customer</title>
<polygon fill="white" stroke="none" stroke-width="2" points="496,-455 -8.88178e-16,-455 -8.88178e-16,-277 496,-277 496,-455"/>
<polygon fill="black" stroke="none" points="9,-429 9,-450 487,-450 487,-429 9,-429"/>
<text text-anchor="start" x="214.5" y="-436.8" font-family="Courier New" font-weight="bold" font-size="14.00" fill="white">customer</text>
<text text-anchor="start" x="49" y="-414.8" font-family="Courier New" font-size="14.00">column</text>
<text text-anchor="start" x="162.5" y="-414.8" font-family="Courier New" font-size="14.00">type</text>
<text text-anchor="start" x="223" y="-414.8" font-family="Courier New" font-size="14.00">nullable</text>
<text text-anchor="start" x="333" y="-414.8" font-family="Courier New" font-size="14.00">PK</text>
<text text-anchor="start" x="430" y="-414.8" font-family="Courier New" font-size="14.00">FK</text>
<text text-anchor="start" x="65.5" y="-393.8" font-family="Courier New" font-size="14.00">id</text>
<text text-anchor="start" x="162.5" y="-393.8" font-family="Courier New" font-size="14.00">uuid</text>
<text text-anchor="start" x="248" y="-393.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="296" y="-393.8" font-family="Courier New" font-size="14.00">PRIMARY KEY</text>
<text text-anchor="start" x="36.5" y="-372.8" font-family="Courier New" font-size="14.00">id_person</text>
<text text-anchor="start" x="162.5" y="-372.8" font-family="Courier New" font-size="14.00">uuid</text>
<text text-anchor="start" x="248" y="-372.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="393" y="-372.8" font-family="Courier New" font-size="14.00">FOREIGN KEY</text>
<text text-anchor="start" x="12" y="-351.8" font-family="Courier New" font-size="14.00">customer_number</text>
<text text-anchor="start" x="150.5" y="-351.8" font-family="Courier New" font-size="14.00">varchar</text>
<text text-anchor="start" x="248" y="-351.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="36.5" y="-330.8" font-family="Courier New" font-size="14.00">json_view</text>
<text text-anchor="start" x="158.5" y="-330.8" font-family="Courier New" font-size="14.00">jsonb</text>
<text text-anchor="start" x="244" y="-330.8" font-family="Courier New" font-size="14.00">YES</text>
<text text-anchor="start" x="32.5" y="-309.8" font-family="Courier New" font-size="14.00">created_at</text>
<text text-anchor="start" x="142" y="-309.8" font-family="Courier New" font-size="14.00">timestamp</text>
<text text-anchor="start" x="248" y="-309.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="32.5" y="-288.8" font-family="Courier New" font-size="14.00">updated_at</text>
<text text-anchor="start" x="142" y="-288.8" font-family="Courier New" font-size="14.00">timestamp</text>
<text text-anchor="start" x="248" y="-288.8" font-family="Courier New" font-size="14.00">NO</text>
<polygon fill="none" stroke="black" points="8,-281 8,-451 488,-451 488,-281 8,-281"/>
</g>
<!-- customer&#45;&gt;person -->
<g id="edge1" class="edge"><title>customer&#45;&gt;person</title>
<path fill="none" stroke="black" d="M248,-276.747C248,-268.431 248,-259.89 248,-251.295"/>
<polygon fill="black" stroke="black" points="251.5,-251.191 248,-241.191 244.5,-251.191 251.5,-251.191"/>
</g>
</g>
</svg>

<h1 id="preparations">preparations</h1>
<p>First we export the schema to a file (e.g. <code>schema.txt</code>). This file will be used for the awk processing.</p>
<p>The first two lines of the head</p>
<pre><code>$ head -n 5 schema.txt
       table_name       |       column_name        |          data_type          |       udt_name        |                                     enum_values                                     | is_nullable | character_maximum_length | primary_key | foreign_key | reference_table | reference_column 
------------------------+--------------------------+-----------------------------+-----------------------+-------------------------------------------------------------------------------------+-------------+--------------------------+-------------+-------------+-----------------+------------------
 person                 | id                       | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY |             |                 | 
 person                 | first_name               | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | 
 person                 | last_name                | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | </code></pre>
<p>must be removed. This can be done by</p>
<pre><code>$ head -n5 schema.txt | tail -n+3
 person                 | id                       | uuid                        | uuid                  |                                                                                     | NO          |                          | PRIMARY KEY |             |                 | 
 person                 | first_name               | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | 
 person                 | last_name                | character varying           | varchar               |                                                                                     | YES         |                      512 |             |             |                 | </code></pre>
<p>The last two lines (one blank line) of the tail</p>
<pre><code> article                | status                   | USER-DEFINED                | article_status        | active, inactive                                                                    | NO          |                          |             |             |                 |
 article                | created_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 |
 article                | updated_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 |
(109 Zeilen)
    </code></pre>
<p>can be removed with</p>
<pre><code>$ tail -n 5 schema.txt | head -n -2
 article                | status                   | USER-DEFINED                | article_status        | active, inactive                                                                    | NO          |                          |             |             |                 |
 article                | created_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 |
 article                | updated_at               | timestamp without time zone | timestamp             |                                                                                     | NO          |                          |             |             |                 |</code></pre>
<p>Now we have a record in every line.</p>
<h1 id="get-started-with-awk">get started with awk</h1>
<p>An awk program has the following structure.</p>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.38.0 (20140413.2041)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="277pt" height="44pt"
 viewBox="0.00 0.00 277.00 44.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 40)">
<title>%3</title>
<polygon fill="lightgrey" stroke="none" points="-4,4 -4,-40 273,-40 273,4 -4,4"/>
<!-- begin -->
<g id="node1" class="node"><title>begin</title>
<path fill="white" stroke="white" d="M47,-36C47,-36 12,-36 12,-36 6,-36 0,-30 0,-24 0,-24 0,-12 0,-12 0,-6 6,-0 12,-0 12,-0 47,-0 47,-0 53,-0 59,-6 59,-12 59,-12 59,-24 59,-24 59,-30 53,-36 47,-36"/>
<text text-anchor="middle" x="29.5" y="-14.3" font-family="Helvetica,sans-Serif" font-size="14.00">BEGIN</text>
</g>
<!-- middle -->
<g id="node2" class="node"><title>middle</title>
<path fill="white" stroke="white" d="M167,-36C167,-36 107,-36 107,-36 101,-36 95,-30 95,-24 95,-24 95,-12 95,-12 95,-6 101,-0 107,-0 107,-0 167,-0 167,-0 173,-0 179,-6 179,-12 179,-12 179,-24 179,-24 179,-30 173,-36 167,-36"/>
<text text-anchor="middle" x="137" y="-14.3" font-family="Helvetica,sans-Serif" font-size="14.00">middle part</text>
</g>
<!-- begin&#45;&gt;middle -->
<g id="edge1" class="edge"><title>begin&#45;&gt;middle</title>
<path fill="none" stroke="black" d="M59.0498,-18C66.9448,-18 75.7631,-18 84.5341,-18"/>
<polygon fill="black" stroke="black" points="84.7506,-21.5001 94.7506,-18 84.7506,-14.5001 84.7506,-21.5001"/>
</g>
<!-- end -->
<g id="node3" class="node"><title>end</title>
<path fill="white" stroke="white" d="M257,-36C257,-36 227,-36 227,-36 221,-36 215,-30 215,-24 215,-24 215,-12 215,-12 215,-6 221,-0 227,-0 227,-0 257,-0 257,-0 263,-0 269,-6 269,-12 269,-12 269,-24 269,-24 269,-30 263,-36 257,-36"/>
<text text-anchor="middle" x="242" y="-14.3" font-family="Helvetica,sans-Serif" font-size="14.00">END</text>
</g>
<!-- middle&#45;&gt;end -->
<g id="edge2" class="edge"><title>middle&#45;&gt;end</title>
<path fill="none" stroke="black" d="M179.004,-18C187.525,-18 196.445,-18 204.779,-18"/>
<polygon fill="black" stroke="black" points="204.946,-21.5001 214.946,-18 204.946,-14.5001 204.946,-21.5001"/>
</g>
</g>
</svg>

<p>The BEGIN and the END part is executed once. The middle part is executed for every data record.</p>
<p>The BEGIN part introduces the graph.</p>
<pre><code>BEGIN {
    print(&quot;digraph {&quot;)
    print(&quot;graph [overlap=false;splines=true;regular=true];&quot;)
    print(&quot;node [shape=Mrecord; fontname=\&quot;Courier New\&quot; style=\&quot;filled, bold\&quot; fillcolor=\&quot;white\&quot;, fontcolor=\&quot;black\&quot;];&quot;)
}</code></pre>
<p>The middle part must print every graphviz table for every relation in the schema.</p>
<pre><code>{
   if (length(currentTableName) &gt; 0 &amp;&amp; $1 != currentTableName) {
       print(&quot;&lt;/TABLE&gt;&gt;]&quot;)
   }
 
   if ($1 != currentTableName) {
        print(&quot;&quot;)
        print(trim($1) &quot; [shape=plaintext; label=&lt;&quot;)
        print(&quot;&lt;TABLE BORDER=\&quot;1\&quot; CELLBORDER=\&quot;0\&quot; CELLSPACING=\&quot;0\&quot; CELLPADDING=\&quot;3\&quot;&gt;&quot;)
        print(&quot;&lt;TR&gt;&quot;)
        print(&quot;&lt;TD COLSPAN=\&quot;5\&quot; BGCOLOR=\&quot;black\&quot;&gt;&lt;FONT color=\&quot;white\&quot;&gt;&lt;B&gt;&quot; trim($1) &quot;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;&quot;)
        print(&quot;&lt;/TR&gt;&quot;)

        print(&quot;&lt;TR&gt;&quot;)
        print(&quot;&lt;TD&gt;column&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;type&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;nullable&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;PK&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;FK&lt;/TD&gt;&quot;)
        print(&quot;&lt;/TR&gt;&quot;)
        port = 0
    }

    print(&quot;&lt;TR&gt;&quot;)
    print(&quot;&lt;TD port=\&quot;f&quot; ++port &quot;\&quot;&gt;&quot;trim($2)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($4)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($6)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($8)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($9)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;/TR&gt;&quot;)

    currentTableName = $1
}</code></pre>
<p>The END part closes the last TABLE and closes the graph.</p>
<pre><code>END {
    print(&quot;&lt;/TABLE&gt;&gt;]&quot;)
    print(&quot;}&quot;)
}</code></pre>
<p>This script will generate graphviz tables for all relations in the database schema.</p>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.38.0 (20140413.2041)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="1126pt" height="228pt"
 viewBox="0.00 0.00 1126.00 228.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 224)">
<title>%3</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-224 1122,-224 1122,4 -4,4"/>
<!-- purchase_order -->
<g id="node1" class="node"><title>purchase_order</title>
<polygon fill="white" stroke="none" stroke-width="2" points="645,-220 1.4766e-14,-220 1.4766e-14,-1.42109e-14 645,-1.42109e-14 645,-220"/>
<polygon fill="black" stroke="none" points="9.5,-194 9.5,-215 636.5,-215 636.5,-194 9.5,-194"/>
<text text-anchor="start" x="265" y="-201.8" font-family="Courier New" font-weight="bold" font-size="14.00" fill="white">purchase_order</text>
<text text-anchor="start" x="74.5" y="-179.8" font-family="Courier New" font-size="14.00">column</text>
<text text-anchor="start" x="262.5" y="-179.8" font-family="Courier New" font-size="14.00">type</text>
<text text-anchor="start" x="372.5" y="-179.8" font-family="Courier New" font-size="14.00">nullable</text>
<text text-anchor="start" x="482.5" y="-179.8" font-family="Courier New" font-size="14.00">PK</text>
<text text-anchor="start" x="579.5" y="-179.8" font-family="Courier New" font-size="14.00">FK</text>
<text text-anchor="start" x="91" y="-158.8" font-family="Courier New" font-size="14.00">id</text>
<text text-anchor="start" x="262.5" y="-158.8" font-family="Courier New" font-size="14.00">uuid</text>
<text text-anchor="start" x="397.5" y="-158.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="445.5" y="-158.8" font-family="Courier New" font-size="14.00">PRIMARY KEY</text>
<text text-anchor="start" x="54" y="-137.8" font-family="Courier New" font-size="14.00">id_customer</text>
<text text-anchor="start" x="262.5" y="-137.8" font-family="Courier New" font-size="14.00">uuid</text>
<text text-anchor="start" x="397.5" y="-137.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="542.5" y="-137.8" font-family="Courier New" font-size="14.00">FOREIGN KEY</text>
<text text-anchor="start" x="12.5" y="-116.8" font-family="Courier New" font-size="14.00">purchase_order_number</text>
<text text-anchor="start" x="250.5" y="-116.8" font-family="Courier New" font-size="14.00">varchar</text>
<text text-anchor="start" x="397.5" y="-116.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="74.5" y="-95.8" font-family="Courier New" font-size="14.00">status</text>
<text text-anchor="start" x="192.5" y="-95.8" font-family="Courier New" font-size="14.00">purchase_order_status</text>
<text text-anchor="start" x="397.5" y="-95.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="12.5" y="-74.8" font-family="Courier New" font-size="14.00">frozen_purchase_order</text>
<text text-anchor="start" x="258.5" y="-74.8" font-family="Courier New" font-size="14.00">jsonb</text>
<text text-anchor="start" x="393.5" y="-74.8" font-family="Courier New" font-size="14.00">YES</text>
<text text-anchor="start" x="70.5" y="-53.8" font-family="Courier New" font-size="14.00">changes</text>
<text text-anchor="start" x="258.5" y="-53.8" font-family="Courier New" font-size="14.00">jsonb</text>
<text text-anchor="start" x="393.5" y="-53.8" font-family="Courier New" font-size="14.00">YES</text>
<text text-anchor="start" x="58" y="-32.8" font-family="Courier New" font-size="14.00">created_at</text>
<text text-anchor="start" x="242" y="-32.8" font-family="Courier New" font-size="14.00">timestamp</text>
<text text-anchor="start" x="397.5" y="-32.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="58" y="-11.8" font-family="Courier New" font-size="14.00">updated_at</text>
<text text-anchor="start" x="242" y="-11.8" font-family="Courier New" font-size="14.00">timestamp</text>
<text text-anchor="start" x="397.5" y="-11.8" font-family="Courier New" font-size="14.00">NO</text>
<polygon fill="none" stroke="black" points="8,-4 8,-216 637,-216 637,-4 8,-4"/>
</g>
<!-- purchase_order_item -->
<g id="node2" class="node"><title>purchase_order_item</title>
<polygon fill="white" stroke="none" stroke-width="2" points="1118,-209.5 663,-209.5 663,-10.5 1118,-10.5 1118,-209.5"/>
<polygon fill="black" stroke="none" points="672.5,-183 672.5,-204 1109.5,-204 1109.5,-183 672.5,-183"/>
<text text-anchor="start" x="812.5" y="-190.8" font-family="Courier New" font-weight="bold" font-size="14.00" fill="white">purchase_order_item</text>
<text text-anchor="start" x="692" y="-168.8" font-family="Courier New" font-size="14.00">column</text>
<text text-anchor="start" x="785" y="-168.8" font-family="Courier New" font-size="14.00">type</text>
<text text-anchor="start" x="845.5" y="-168.8" font-family="Courier New" font-size="14.00">nullable</text>
<text text-anchor="start" x="955.5" y="-168.8" font-family="Courier New" font-size="14.00">PK</text>
<text text-anchor="start" x="1052.5" y="-168.8" font-family="Courier New" font-size="14.00">FK</text>
<text text-anchor="start" x="708.5" y="-147.8" font-family="Courier New" font-size="14.00">id</text>
<text text-anchor="start" x="785" y="-147.8" font-family="Courier New" font-size="14.00">uuid</text>
<text text-anchor="start" x="870.5" y="-147.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="918.5" y="-147.8" font-family="Courier New" font-size="14.00">PRIMARY KEY</text>
<text text-anchor="start" x="675.5" y="-126.8" font-family="Courier New" font-size="14.00">id_article</text>
<text text-anchor="start" x="785" y="-126.8" font-family="Courier New" font-size="14.00">uuid</text>
<text text-anchor="start" x="870.5" y="-126.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="1015.5" y="-126.8" font-family="Courier New" font-size="14.00">FOREIGN KEY</text>
<text text-anchor="start" x="683.5" y="-105.8" font-family="Courier New" font-size="14.00">id_price</text>
<text text-anchor="start" x="785" y="-105.8" font-family="Courier New" font-size="14.00">uuid</text>
<text text-anchor="start" x="870.5" y="-105.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="1015.5" y="-105.8" font-family="Courier New" font-size="14.00">FOREIGN KEY</text>
<text text-anchor="start" x="692" y="-84.8" font-family="Courier New" font-size="14.00">amount</text>
<text text-anchor="start" x="785" y="-84.8" font-family="Courier New" font-size="14.00">int4</text>
<text text-anchor="start" x="870.5" y="-84.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="688" y="-63.8" font-family="Courier New" font-size="14.00">changes</text>
<text text-anchor="start" x="781" y="-63.8" font-family="Courier New" font-size="14.00">jsonb</text>
<text text-anchor="start" x="866.5" y="-63.8" font-family="Courier New" font-size="14.00">YES</text>
<text text-anchor="start" x="675.5" y="-42.8" font-family="Courier New" font-size="14.00">created_at</text>
<text text-anchor="start" x="764.5" y="-42.8" font-family="Courier New" font-size="14.00">timestamp</text>
<text text-anchor="start" x="870.5" y="-42.8" font-family="Courier New" font-size="14.00">NO</text>
<text text-anchor="start" x="675.5" y="-21.8" font-family="Courier New" font-size="14.00">updated_at</text>
<text text-anchor="start" x="764.5" y="-21.8" font-family="Courier New" font-size="14.00">timestamp</text>
<text text-anchor="start" x="870.5" y="-21.8" font-family="Courier New" font-size="14.00">NO</text>
<polygon fill="none" stroke="black" points="671,-14.5 671,-205.5 1110,-205.5 1110,-14.5 671,-14.5"/>
</g>
</g>
</svg>

<p>For the edges, the middle part must be extended with</p>
<pre><code>if (trim($9) == &quot;FOREIGN KEY&quot;) {
    edges[++edgeCounter] = trim($1) &quot; -&gt; &quot; trim($10) &quot;;&quot;
}</code></pre>
<p>This takes the current table name and point it to the target relation.</p>
<p>Some relations use a enum as a datatype. It would be nice, if this could be visible in the ERM.</p>
<pre><code>if (length(trim($5)) &gt; 0) {
    nodes[++nodeCounter] = trim($4) &quot;[shape=\&quot;box\&quot;, style=\&quot;rounded\&quot;, label=&lt;&lt;B&gt;&quot; trim($4) &quot; (enum)&lt;/B&gt;&lt;BR/&gt;&quot; trim($5) &quot;&gt;];&quot;
    edges[++edgeCounter] = trim($1) &quot;:f&quot; port &quot; -&gt; &quot; trim($4) &quot;;&quot;
}</code></pre>
<p>This adds new enum nodes to the graph and points it directly to the column used by the enum.</p>
<p>In the END part, the new nodes and edges must be added.</p>
<pre><code>for (node in nodes) {
    print(nodes[++i])
}
i = 0
for (edge in edges){
    print(edges[++i])
}</code></pre>
<p>Currently the enum values are comma separated. For the graph drawing it is easier, to have short lines.</p>
<p>A <code>sed 's/, /&lt;BR\/&gt;/g'</code> before script start will replace the commas with <code>&lt;BR/&gt;</code>.</p>
<h1 id="final">final</h1>
<p>The complete script glued together</p>
<pre><code>#!/bin/bash

psql -U postgres -c &quot;

SELECT c.table_name, 
	c.column_name, 
	c.data_type, 
	c.udt_name,
	(SELECT string_agg(e.enumlabel::TEXT, &#39;, &#39;)
		FROM pg_type t 
		   JOIN pg_enum e on t.oid = e.enumtypid  
		   JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE t.typname = c.udt_name) enum_values,
	c.is_nullable, 
	c.character_maximum_length,
	(SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
		JOIN information_schema.table_constraints tc 
			ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
		WHERE c.column_name = kcu.column_name 
			AND c.table_name = kcu.table_name 
			AND tc.constraint_type = &#39;PRIMARY KEY&#39; LIMIT 1
	) primary_key,
	(SELECT tc.constraint_type FROM information_schema.key_column_usage kcu
		JOIN information_schema.table_constraints tc 
			ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
		WHERE c.column_name = kcu.column_name 
			AND c.table_name = kcu.table_name 
			AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
	) foreign_key,
	(SELECT ccu.table_name FROM information_schema.key_column_usage kcu
		JOIN information_schema.table_constraints tc 
			ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
		JOIN information_schema.constraint_column_usage ccu
			ON tc.constraint_name = ccu.constraint_name
		WHERE c.column_name = kcu.column_name 
			AND c.table_name = kcu.table_name 
			AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
	) reference_table,
	(SELECT ccu.column_name FROM information_schema.key_column_usage kcu
		JOIN information_schema.table_constraints tc 
			ON tc.table_name = c.table_name AND tc.constraint_name = kcu.constraint_name
		JOIN information_schema.constraint_column_usage ccu
			ON tc.constraint_name = ccu.constraint_name
		WHERE c.column_name = kcu.column_name 
			AND c.table_name = kcu.table_name 
			AND tc.constraint_type = &#39;FOREIGN KEY&#39; LIMIT 1
	) reference_column
	
FROM information_schema.columns c 
	JOIN information_schema.tables t on c.table_name = t.table_name
WHERE c.table_schema = &#39;test&#39; AND t.table_type = &#39;BASE TABLE&#39;&quot; | sed &#39;s/, /&lt;BR\/&gt;/g&#39; | head -n -2 | tail -n+3 | awk -F&quot;|&quot; &#39;
function ltrim(s) {
    sub(/^[ \t\r\n]+/, &quot;&quot;, s);
    return s
}

function rtrim(s) {
    sub(/[ \t\r\n]+$/, &quot;&quot;, s);
    return s
}

function trim(s) {
    return rtrim(ltrim(s));
}

BEGIN {
    print(&quot;digraph {&quot;)
    print(&quot;graph [overlap=false;splines=true;regular=true];&quot;)
    print(&quot;node [shape=Mrecord; fontname=\&quot;Courier New\&quot; style=\&quot;filled, bold\&quot; fillcolor=\&quot;white\&quot;, fontcolor=\&quot;black\&quot;];&quot;)
}

{
   if (length(currentTableName) &gt; 0 &amp;&amp; $1 != currentTableName) {
       print(&quot;&lt;/TABLE&gt;&gt;]&quot;)
   }
 
   if ($1 != currentTableName) {
        print(&quot;&quot;)
        print(trim($1) &quot; [shape=plaintext; label=&lt;&quot;)
        print(&quot;&lt;TABLE BORDER=\&quot;1\&quot; CELLBORDER=\&quot;0\&quot; CELLSPACING=\&quot;0\&quot; CELLPADDING=\&quot;3\&quot;&gt;&quot;)
        print(&quot;&lt;TR&gt;&quot;)
        print(&quot;&lt;TD COLSPAN=\&quot;5\&quot; BGCOLOR=\&quot;black\&quot;&gt;&lt;FONT color=\&quot;white\&quot;&gt;&lt;B&gt;&quot; trim($1) &quot;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;&quot;)
        print(&quot;&lt;/TR&gt;&quot;)

        print(&quot;&lt;TR&gt;&quot;)
        print(&quot;&lt;TD&gt;column&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;type&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;nullable&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;PK&lt;/TD&gt;&quot;)
        print(&quot;&lt;TD&gt;FK&lt;/TD&gt;&quot;)
        print(&quot;&lt;/TR&gt;&quot;)
        port = 0
    }

    print(&quot;&lt;TR&gt;&quot;)
    print(&quot;&lt;TD port=\&quot;f&quot; ++port &quot;\&quot;&gt;&quot;trim($2)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($4)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($6)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($8)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;TD&gt;&quot;trim($9)&quot;&lt;/TD&gt;&quot;)
    print(&quot;&lt;/TR&gt;&quot;)

    if (trim($9) == &quot;FOREIGN KEY&quot;) {
        edges[++edgeCounter] = trim($1) &quot; -&gt; &quot; trim($10) &quot;;&quot;
    }

    if (length(trim($5)) &gt; 0) {
        nodes[++nodeCounter] = trim($4) &quot;[shape=\&quot;box\&quot;, style=\&quot;rounded\&quot;, label=&lt;&lt;B&gt;&quot; trim($4) &quot; (enum)&lt;/B&gt;&lt;BR/&gt;&quot; trim($5) &quot;&gt;];&quot;
        edges[++edgeCounter] = trim($1) &quot;:f&quot; port &quot; -&gt; &quot; trim($4) &quot;;&quot;
    }
   
    currentTableName = $1
}

END {
    print(&quot;&lt;/TABLE&gt;&gt;]&quot;)

    for (node in nodes) {
        print(nodes[++i])
    }
    i = 0
    for (edge in edges){
        print(edges[++i])
    }
    print(&quot;}&quot;)
}&#39;</code></pre>
<p>I have put the result in a <a href="/images/schema.svg">external file</a> because the graph has become to big in size. Not so bad, I think.</p>]]></summary>
</entry>
<entry>
    <title>Working with immutable data in Postgres</title>
    <link href="https://enter-haken.github.io/posts/2017-07-15-database-architecture-part2.html" />
    <id>https://enter-haken.github.io/posts/2017-07-15-database-architecture-part2.html</id>
    <published>2017-07-15T00:00:00Z</published>
    <updated>2017-07-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>After taking a <a href="/posts/2017-07-06-database-architecture.html">first look</a> at the JSON columns, let’s look at a few possible applications. Imagine a simple shop system with articles, prices and purchase orders.</p>
<p>An article can be <code>active</code> or <code>inactive</code>.</p>
<pre><code>CREATE TYPE article_status AS ENUM (
    &#39;active&#39;,
    &#39;inactive&#39;
);</code></pre>
<p>Every article has an <code>article_number</code>.</p>
<pre><code>CREATE TABLE article (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    article_number VARCHAR(128) UNIQE NOT NULL DEFAULT &#39;&#39;,
    name VARCHAR(128),
    description VARCHAR(2048),
    status article_status NOT NULL DEFAULT &#39;active&#39;
);</code></pre>
<p>You can see that <code>id</code> and <code>article_number</code> are unique, so both could be used as a primary key. This is not normalized in a usual way.</p>
<p>There are a few points, why to stick to this solution.</p>
<!--more-->
<ul>
<li>A primary key should only be used to identify a record. Not more, not less.</li>
<li>There must be no reuse for a business case, like it would be for <code>article_number</code>. The <code>article_number</code> could not be changed so easily, after being promoted to a primary key.</li>
<li>A <code>article_number</code> identifies an article entity not a database record.</li>
</ul>
<h1 id="prices-with-history">prices with history</h1>
<p>Every <code>article</code> can have a price.</p>
<pre><code>CREATE TABLE price (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_article UUID NOT NULL REFERENCES article(id),
    price real NOT NULL DEFAULT 0.0,
    scale_lower_limit INT NOT NULL DEFAULT 1,
    scale_upper_limit INT NOT NULL DEFAULT 2147483647,
    valid_from DATE NOT NULL DEFAULT current_date,
    valid_to DATE NOT NULL DEFAULT current_date + interval &#39;1 year&#39;
);</code></pre>
<p>An <code>article</code> can have multiple prices over time. There can be multiple price scales. A <code>price</code> will be more likely changed than an <code>article</code>. Price changes may be interesting for reporting issues.</p>
<p>You can store these changes in a JSONB column.</p>
<pre><code>ALTER TABLE price ADD COLUMN history JSONB;</code></pre>
<p>Every time, a price record changes. these changes should be saved. These saved items should be immutable over time.</p>
<pre><code>CREATE FUNCTION history_trigger() RETURNS TRIGGER AS $$.

BEGIN
    IF NEW.history IS NULL THEN
        NEW.history := &#39;[]&#39;::JSONB;
    END IF;

    NEW.history := NEW.history::JSONB || (row_to_json(OLD)::JSONB - &#39;history&#39;);
    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER price_history_trigger BEFORE UPDATE ON price
    FOR EACH ROW EXECUTE PROCEDURE history_trigger();</code></pre>
<p>First of all, an <code>article</code> has to be created.</p>
<pre><code>$ psql -U postgres -c &quot;INSERT INTO test.article (article_number, name, description) \
&gt; VALUES (&#39;AB12345&#39;, &#39;Test article&#39;,&#39;Test desc&#39;)&quot;
INSERT 0 1</code></pre>
<p>For this newly inserted article</p>
<pre><code>$ psql -U postgres -c &quot;SELECT * from test.article&quot; | cat
                  id                  | article_number |     name     | description | status |         created_at         |         updated_at         
--------------------------------------+----------------+--------------+-------------+--------+----------------------------+----------------------------
 f12def37-3de6-4985-8912-054891631499 | AB12345        | Test article | Test desc   | active | 2017-07-15 19:17:14.727931 | 2017-07-15 19:17:14.727931
(1 row)</code></pre>
<p>you can add a <code>price</code>,</p>
<pre><code>$ psql -U postgres -c &quot;INSERT INTO test.price (id_article, price) \
&gt; VALUES (&#39;f12def37-3de6-4985-8912-054891631499&#39;,50.5)&quot;
INSERT 0 1

$ psql -U postgres -c &quot;SELECT * FROM test.price&quot; | cat
                  id                  |              id_article              | price | scale_lower_limit | scale_upper_limit | valid_from |  valid_to  | history |         created_at         |         updated_at         
--------------------------------------+--------------------------------------+-------+-------------------+-------------------+------------+------------+---------+----------------------------+----------------------------
 3a113796-05fd-4ff3-a33f-b08f92c01cd8 | f12def37-3de6-4985-8912-054891631499 |  50.5 |                 1 |        2147483647 | 2017-07-15 | 2018-07-15 |         | 2017-07-15 19:21:39.245331 | 2017-07-15 19:21:39.245331
(1 row)</code></pre>
<p>and raise the price value for the <code>price</code> record.</p>
<pre><code>$ psql -U postgres -c &quot;UPDATE test.price SET price = 70.2 WHERE id = &#39;3a113796-05fd-4ff3-a33f-b08f92c01cd8&#39;&quot;
UPDATE 1

$ psql -U postgres -c &quot;SELECT * FROM test.price&quot; | cat
                  id                  |              id_article              | price | scale_lower_limit | scale_upper_limit | valid_from |  valid_to  |                                                                                                                                                           history                                                                                                                                                            |         created_at         |         updated_at
--------------------------------------+--------------------------------------+-------+-------------------+-------------------+------------+------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------+----------------------------
 3a113796-05fd-4ff3-a33f-b08f92c01cd8 | f12def37-3de6-4985-8912-054891631499 |  70.2 |                 1 |        2147483647 | 2017-07-15 | 2018-07-15 | [{&quot;id&quot;: &quot;3a113796-05fd-4ff3-a33f-b08f92c01cd8&quot;, &quot;price&quot;: 50.5, &quot;valid_to&quot;: &quot;2018-07-15&quot;, &quot;created_at&quot;: &quot;2017-07-15T19:21:39.245331&quot;, &quot;id_article&quot;: &quot;f12def37-3de6-4985-8912-054891631499&quot;, &quot;updated_at&quot;: &quot;2017-07-15T19:21:39.245331&quot;, &quot;valid_from&quot;: &quot;2017-07-15&quot;, &quot;scale_lower_limit&quot;: 1, &quot;scale_upper_limit&quot;: 2147483647}] | 2017-07-15 19:21:39.245331 | 2017-07-15 19:25:04.672829
(1 row)</code></pre>
<p>The <code>history</code> is updated every time, a <code>price</code> record is updated.</p>
<h1 id="customer">customer</h1>
<p>A <code>customer</code> is a kind of <code>person</code> which has a <code>customer_number</code></p>
<pre><code>CREATE TABLE customer (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_person UUID NOT NULL REFERENCES person(id),
    customer_number VARCHAR(128) NOT NULL DEFAULT &#39;&#39;,
    json_view JSONB
);</code></pre>
<p>As you can see, a <code>json_view</code> column is added to the <code>customer</code>. The only difference between a <code>person</code> and a customer is the <code>customer_number</code>.</p>
<p>Analog to the <code>persons</code> <a href="/posts/2017-07-06-database-architecture.html#json-column">update function</a> we can write an update function for a <code>customer</code></p>
<pre><code>CREATE FUNCTION update_json_view_customer(id_customer UUID) RETURNS VOID AS $$
DECLARE
    customer_raw JSONB;
    person_id UUID;
BEGIN

    IF NOT EXISTS (SELECT 1 FROM person p 
        JOIN customer c on p.id = c.id_person 
        WHERE p.json_view IS NOT NULL AND c.id = id_customer) THEN

        SELECT id_person FROM customer WHERE id = id_customer INTO person_id;

        RAISE NOTICE &#39;update json_view for person %&#39;, person_id;

        perform update_json_view_person(person_id);
    END IF;

    SELECT row_to_json(c) FROM 
        (SELECT c.id, customer_number, p.json_view AS person_json_view FROM customer c
            JOIN person p on c.id_person = p.id
            WHERE c.id = id_customer LIMIT 1) c INTO customer_raw;

    customer_raw := customer_raw || jsonb_build_object(&#39;person&#39;, customer_raw-&gt;&#39;person_json_view&#39;);
    customer_raw := customer_raw - &#39;person_json_view&#39;;

    UPDATE customer SET json_view = customer_raw WHERE id = id_customer;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>The <code>json_view</code> of the <code>person</code> is reused.</p>
<p>Let’s take a inserted person.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT id FROM test.person&quot;
                  id
--------------------------------------
 da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2
(1 row)</code></pre>
<p>and insert a new <code>customer</code> for this <code>person</code>.</p>
<pre><code>$ psql -U postgres -c &quot;INSERT INTO test.customer (customer_number, id_person) \
VALUES (&#39;AB12345&#39;, &#39;da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2&#39;);&quot;
INSERT 0 1</code></pre>
<p>The newly inserted <code>customer</code> looks like</p>
<pre><code>$ psql -U postgres -c &quot;SELECT * FROM test.customer&quot; | cat
                  id                  |              id_person               | customer_number | json_view |         created_at         |         updated_at         
--------------------------------------+--------------------------------------+-----------------+-----------+----------------------------+----------------------------
 88a99ea7-4281-496b-9c95-3625101177ca | da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2 | AB12345         |           | 2017-07-15 18:41:27.811324 | 2017-07-15 18:41:27.811324
(1 row)</code></pre>
<p>Now the <code>customer</code>’s <code>json_view</code> must be filled.</p>
<pre><code>$ psql -U postgres -c &quot;SET search_path TO test,public; \
&gt;  SELECT test.update_json_view_customer(&#39;88a99ea7-4281-496b-9c95-3625101177ca&#39;);&quot;
 update_json_view_customer 
---------------------------
  
(1 row)

$ psql -U postgres -c &quot;SELECT * FROM test.customer&quot; | cat
                  id                  |              id_person               | customer_number |json_view|         created_at         |         updated_at         

 88a99ea7-4281-496b-9c95-3625101177ca | da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2 | AB12345         | {&quot;id&quot;: &quot;88a99ea7-4281-496b-9c95-3625101177ca&quot;, &quot;person&quot;: {&quot;id&quot;: &quot;da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;addresses&quot;: [{&quot;id&quot;: &quot;9a78ceb0-5169-4bca-bbf5-aac54fcaa95a&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44339&quot;, &quot;address_type&quot;: &quot;private&quot;, &quot;house_number&quot;: &quot;123&quot;}, {&quot;id&quot;: &quot;c69ec275-0a05-42ce-80ea-1ea1b5bcbd78&quot;, &quot;city&quot;: &quot;Bochum&quot;, &quot;street&quot;: &quot;Fakeroad&quot;, &quot;postal_code&quot;: &quot;44866&quot;, &quot;address_type&quot;: &quot;work&quot;, &quot;house_number&quot;: &quot;321&quot;}], &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;, &quot;phone_numbers&quot;: [{&quot;id&quot;: &quot;0df74379-6512-4f54-a1a7-fee1c1605342&quot;, &quot;phone_number&quot;: &quot;+49231123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;landline&quot;, &quot;is_primary_phone_number&quot;: true}, {&quot;id&quot;: &quot;a9d36784-7af3-47e8-b357-2f03500f7d66&quot;, &quot;phone_number&quot;: &quot;+49151123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;cellular_network&quot;, &quot;is_primary_phone_number&quot;: false}], &quot;email_addresses&quot;: [{&quot;id&quot;: &quot;ff2fee9e-490f-49b2-8e0e-69d5bddd2ca0&quot;, &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;is_primary_email_address&quot;: false}]}, &quot;customer_number&quot;: &quot;AB12345&quot;} | 2017-07-15 18:41:27.811324 | 2017-07-15 18:50:47.591534
(1 row)</code></pre>
<p>a little bit more beautifull</p>
<pre><code>{
    &quot;id&quot;: &quot;88a99ea7-4281-496b-9c95-3625101177ca&quot;,
    &quot;person&quot;: {
        &quot;id&quot;: &quot;da44de2f-aa0a-43c5-9fed-dcbb5b6c32a2&quot;,
        &quot;notes&quot;: null,
        &quot;website&quot;: null,
        &quot;addresses&quot;: [{
            &quot;id&quot;: &quot;9a78ceb0-5169-4bca-bbf5-aac54fcaa95a&quot;,
            &quot;city&quot;: &quot;Dortmund&quot;,
            &quot;street&quot;: &quot;Fakestreet&quot;,
            &quot;postal_code&quot;: &quot;44339&quot;,
            &quot;address_type&quot;: &quot;private&quot;,
            &quot;house_number&quot;: &quot;123&quot;
        }, {
            &quot;id&quot;: &quot;c69ec275-0a05-42ce-80ea-1ea1b5bcbd78&quot;,
            &quot;city&quot;: &quot;Bochum&quot;,
            &quot;street&quot;: &quot;Fakeroad&quot;,
            &quot;postal_code&quot;: &quot;44866&quot;,
            &quot;address_type&quot;: &quot;work&quot;,
            &quot;house_number&quot;: &quot;321&quot;
        }],
        &quot;last_name&quot;: &quot;Hake&quot;,
        &quot;birth_date&quot;: null,
        &quot;first_name&quot;: &quot;Jan Frederik&quot;,
        &quot;phone_numbers&quot;: [{
            &quot;id&quot;: &quot;0df74379-6512-4f54-a1a7-fee1c1605342&quot;,
            &quot;phone_number&quot;: &quot;+49231123456789&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;communication_network&quot;: &quot;landline&quot;,
            &quot;is_primary_phone_number&quot;: true
        }, {
            &quot;id&quot;: &quot;a9d36784-7af3-47e8-b357-2f03500f7d66&quot;,
            &quot;phone_number&quot;: &quot;+49151123456789&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;communication_network&quot;: &quot;cellular_network&quot;,
            &quot;is_primary_phone_number&quot;: false
        }],
        &quot;email_addresses&quot;: [{
            &quot;id&quot;: &quot;ff2fee9e-490f-49b2-8e0e-69d5bddd2ca0&quot;,
            &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;,
            &quot;communication_type&quot;: &quot;private&quot;,
            &quot;is_primary_email_address&quot;: false
        }]
    },
    &quot;customer_number&quot;: &quot;AB12345&quot;
}</code></pre>
<h1 id="a-purchase-process">a purchase process</h1>
<p>Now we have a <code>customer</code> and <code>articles</code> with <code>prices</code>. The next step is to buy something. But first we take a look at a common workflow, when you buy something in a shop.</p>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.38.0 (20140413.2041)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="883pt" height="194pt"
 viewBox="0.00 0.00 883.05 194.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 190)">
<title>%3</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-190 879.048,-190 879.048,4 -4,4"/>
<g id="clust1" class="cluster"><title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" points="108.048,-8 108.048,-178 343.048,-178 343.048,-8 108.048,-8"/>
<text text-anchor="middle" x="225.548" y="-162.8" font-family="Helvetica,sans-Serif" font-size="14.00">mutable</text>
<text text-anchor="middle" x="225.548" y="-147.8" font-family="Helvetica,sans-Serif" font-size="14.00">data</text>
</g>
<g id="clust2" class="cluster"><title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" points="419.048,-53 419.048,-145 807.048,-145 807.048,-53 419.048,-53"/>
<text text-anchor="middle" x="613.048" y="-129.8" font-family="Helvetica,sans-Serif" font-size="14.00">immutable</text>
<text text-anchor="middle" x="613.048" y="-114.8" font-family="Helvetica,sans-Serif" font-size="14.00">data</text>
</g>
<!-- po -->
<g id="node1" class="node"><title>po</title>
<path fill="white" stroke="white" d="M176.048,-110C176.048,-110 128.048,-110 128.048,-110 122.048,-110 116.048,-104 116.048,-98 116.048,-98 116.048,-84 116.048,-84 116.048,-78 122.048,-72 128.048,-72 128.048,-72 176.048,-72 176.048,-72 182.048,-72 188.048,-78 188.048,-84 188.048,-84 188.048,-98 188.048,-98 188.048,-104 182.048,-110 176.048,-110"/>
<text text-anchor="middle" x="152.048" y="-94.8" font-family="Helvetica,sans-Serif" font-size="14.00">purchase</text>
<text text-anchor="middle" x="152.048" y="-79.8" font-family="Helvetica,sans-Serif" font-size="14.00">order</text>
</g>
<!-- rts -->
<g id="node2" class="node"><title>rts</title>
<path fill="white" stroke="white" d="M323.048,-132C323.048,-132 282.048,-132 282.048,-132 276.048,-132 270.048,-126 270.048,-120 270.048,-120 270.048,-106 270.048,-106 270.048,-100 276.048,-94 282.048,-94 282.048,-94 323.048,-94 323.048,-94 329.048,-94 335.048,-100 335.048,-106 335.048,-106 335.048,-120 335.048,-120 335.048,-126 329.048,-132 323.048,-132"/>
<text text-anchor="middle" x="302.548" y="-116.8" font-family="Helvetica,sans-Serif" font-size="14.00">ready to</text>
<text text-anchor="middle" x="302.548" y="-101.8" font-family="Helvetica,sans-Serif" font-size="14.00">send</text>
</g>
<!-- po&#45;&gt;rts -->
<g id="edge1" class="edge"><title>po&#45;&gt;rts</title>
<path fill="none" stroke="black" d="M175.557,-110.06C184.466,-116.429 195.17,-122.733 206.048,-126 223.167,-131.143 242.629,-129.729 259.497,-126.336"/>
<polygon fill="black" stroke="black" points="260.659,-129.661 269.62,-124.009 259.09,-122.839 260.659,-129.661"/>
</g>
<!-- item -->
<g id="node3" class="node"><title>item</title>
<path fill="white" stroke="white" d="M317.548,-71C317.548,-71 287.548,-71 287.548,-71 281.548,-71 275.548,-65 275.548,-59 275.548,-59 275.548,-47 275.548,-47 275.548,-41 281.548,-35 287.548,-35 287.548,-35 317.548,-35 317.548,-35 323.548,-35 329.548,-41 329.548,-47 329.548,-47 329.548,-59 329.548,-59 329.548,-65 323.548,-71 317.548,-71"/>
<text text-anchor="middle" x="302.548" y="-49.3" font-family="Helvetica,sans-Serif" font-size="14.00">items</text>
</g>
<!-- po&#45;&gt;item -->
<g id="edge2" class="edge"><title>po&#45;&gt;item</title>
<path fill="none" stroke="black" d="M165.029,-71.7685C174.394,-58.6924 188.711,-42.4621 206.048,-35 224.964,-26.858 247.553,-30.5725 266.011,-36.688"/>
<polygon fill="black" stroke="black" points="264.924,-40.0172 275.518,-40.1631 267.328,-33.4426 264.924,-40.0172"/>
<text text-anchor="middle" x="229.048" y="-38.8" font-family="Helvetica,sans-Serif" font-size="14.00">add</text>
</g>
<!-- po&#45;&gt;item -->
<g id="edge3" class="edge"><title>po&#45;&gt;item</title>
<path fill="none" stroke="black" d="M188.215,-78.3938C194.131,-76.4643 200.236,-74.5891 206.048,-73 225.443,-67.6963 247.385,-63.0111 265.341,-59.511"/>
<polygon fill="black" stroke="black" points="266.237,-62.9034 275.404,-57.5915 264.925,-56.0274 266.237,-62.9034"/>
<text text-anchor="middle" x="229.048" y="-76.8" font-family="Helvetica,sans-Serif" font-size="14.00">modify</text>
</g>
<!-- po&#45;&gt;item -->
<g id="edge4" class="edge"><title>po&#45;&gt;item</title>
<path fill="none" stroke="black" d="M188.275,-94.8048C207.583,-95.6951 231.664,-94.82 252.048,-88 259.321,-85.5663 266.465,-81.682 272.964,-77.3701"/>
<polygon fill="black" stroke="black" points="275.3,-80.0007 281.377,-71.3213 271.214,-74.3172 275.3,-80.0007"/>
<text text-anchor="middle" x="229.048" y="-98.8" font-family="Helvetica,sans-Serif" font-size="14.00">remove</text>
</g>
<!-- snd -->
<g id="node4" class="node"><title>snd</title>
<path fill="white" stroke="white" d="M469.048,-98C469.048,-98 439.048,-98 439.048,-98 433.048,-98 427.048,-92 427.048,-86 427.048,-86 427.048,-74 427.048,-74 427.048,-68 433.048,-62 439.048,-62 439.048,-62 469.048,-62 469.048,-62 475.048,-62 481.048,-68 481.048,-74 481.048,-74 481.048,-86 481.048,-86 481.048,-92 475.048,-98 469.048,-98"/>
<text text-anchor="middle" x="454.048" y="-76.3" font-family="Helvetica,sans-Serif" font-size="14.00">send</text>
</g>
<!-- rts&#45;&gt;snd -->
<g id="edge5" class="edge"><title>rts&#45;&gt;snd</title>
<path fill="none" stroke="black" d="M335.243,-116.181C356.603,-117.274 385.136,-116.668 409.048,-109 413.379,-107.611 417.688,-105.668 421.819,-103.438"/>
<polygon fill="black" stroke="black" points="423.756,-106.357 430.52,-98.2021 420.147,-100.359 423.756,-106.357"/>
</g>
<!-- item&#45;&gt;snd -->
<g id="edge9" class="edge"><title>item&#45;&gt;snd</title>
<path fill="none" stroke="black" d="M329.788,-47.1639C351.545,-43.4584 383.013,-40.7498 409.048,-49 414.392,-50.6937 419.649,-53.2964 424.564,-56.2889"/>
<polygon fill="black" stroke="black" points="422.746,-59.2841 432.991,-61.9843 426.666,-53.4846 422.746,-59.2841"/>
<text text-anchor="middle" x="381.048" y="-97.8" font-family="Helvetica,sans-Serif" font-size="14.00">frozen</text>
<text text-anchor="middle" x="381.048" y="-82.8" font-family="Helvetica,sans-Serif" font-size="14.00">purchase</text>
<text text-anchor="middle" x="381.048" y="-67.8" font-family="Helvetica,sans-Serif" font-size="14.00">order</text>
<text text-anchor="middle" x="381.048" y="-52.8" font-family="Helvetica,sans-Serif" font-size="14.00">items</text>
</g>
<!-- delivered -->
<g id="node5" class="node"><title>delivered</title>
<path fill="white" stroke="white" d="M577.048,-98C577.048,-98 530.048,-98 530.048,-98 524.048,-98 518.048,-92 518.048,-86 518.048,-86 518.048,-74 518.048,-74 518.048,-68 524.048,-62 530.048,-62 530.048,-62 577.048,-62 577.048,-62 583.048,-62 589.048,-68 589.048,-74 589.048,-74 589.048,-86 589.048,-86 589.048,-92 583.048,-98 577.048,-98"/>
<text text-anchor="middle" x="553.548" y="-76.3" font-family="Helvetica,sans-Serif" font-size="14.00">delivered</text>
</g>
<!-- snd&#45;&gt;delivered -->
<g id="edge6" class="edge"><title>snd&#45;&gt;delivered</title>
<path fill="none" stroke="black" d="M481.176,-80C489.372,-80 498.666,-80 507.772,-80"/>
<polygon fill="black" stroke="black" points="507.907,-83.5001 517.907,-80 507.907,-76.5001 507.907,-83.5001"/>
</g>
<!-- rfi -->
<g id="node6" class="node"><title>rfi</title>
<path fill="white" stroke="white" d="M684.048,-99C684.048,-99 638.048,-99 638.048,-99 632.048,-99 626.048,-93 626.048,-87 626.048,-87 626.048,-73 626.048,-73 626.048,-67 632.048,-61 638.048,-61 638.048,-61 684.048,-61 684.048,-61 690.048,-61 696.048,-67 696.048,-73 696.048,-73 696.048,-87 696.048,-87 696.048,-93 690.048,-99 684.048,-99"/>
<text text-anchor="middle" x="661.048" y="-83.8" font-family="Helvetica,sans-Serif" font-size="14.00">ready for</text>
<text text-anchor="middle" x="661.048" y="-68.8" font-family="Helvetica,sans-Serif" font-size="14.00">invoice</text>
</g>
<!-- delivered&#45;&gt;rfi -->
<g id="edge7" class="edge"><title>delivered&#45;&gt;rfi</title>
<path fill="none" stroke="black" d="M589.092,-80C597.558,-80 606.737,-80 615.595,-80"/>
<polygon fill="black" stroke="black" points="615.786,-83.5001 625.786,-80 615.786,-76.5001 615.786,-83.5001"/>
</g>
<!-- inv -->
<g id="node7" class="node"><title>inv</title>
<path fill="white" stroke="white" d="M787.048,-98C787.048,-98 745.048,-98 745.048,-98 739.048,-98 733.048,-92 733.048,-86 733.048,-86 733.048,-74 733.048,-74 733.048,-68 739.048,-62 745.048,-62 745.048,-62 787.048,-62 787.048,-62 793.048,-62 799.048,-68 799.048,-74 799.048,-74 799.048,-86 799.048,-86 799.048,-92 793.048,-98 787.048,-98"/>
<text text-anchor="middle" x="766.048" y="-76.3" font-family="Helvetica,sans-Serif" font-size="14.00">invoiced</text>
</g>
<!-- rfi&#45;&gt;inv -->
<g id="edge8" class="edge"><title>rfi&#45;&gt;inv</title>
<path fill="none" stroke="black" d="M696.059,-80C704.567,-80 713.797,-80 722.655,-80"/>
<polygon fill="black" stroke="black" points="722.819,-83.5001 732.819,-80 722.819,-76.5001 722.819,-83.5001"/>
</g>
<!-- end -->
<g id="node9" class="node"><title>end</title>
<polygon fill="none" stroke="black" points="875.048,-99.5 836.048,-99.5 836.048,-60.5 875.048,-60.5 875.048,-99.5"/>
<polyline fill="none" stroke="black" points="848.048,-99.5 836.048,-87.5 "/>
<polyline fill="none" stroke="black" points="836.048,-72.5 848.048,-60.5 "/>
<polyline fill="none" stroke="black" points="863.048,-60.5 875.048,-72.5 "/>
<polyline fill="none" stroke="black" points="875.048,-87.5 863.048,-99.5 "/>
<text text-anchor="middle" x="855.548" y="-76.3" font-family="Helvetica,sans-Serif" font-size="14.00">end</text>
</g>
<!-- inv&#45;&gt;end -->
<g id="edge11" class="edge"><title>inv&#45;&gt;end</title>
<path fill="none" stroke="black" d="M799.132,-80C807.843,-80 817.22,-80 825.737,-80"/>
<polygon fill="black" stroke="black" points="825.953,-83.5001 835.953,-80 825.953,-76.5001 825.953,-83.5001"/>
</g>
<!-- start -->
<g id="node8" class="node"><title>start</title>
<polygon fill="none" stroke="black" points="39.5238,-109 -0.0237764,-91 39.5238,-73 79.0713,-91 39.5238,-109"/>
<polyline fill="none" stroke="black" points="10.8981,-95.9711 10.8981,-86.0289 "/>
<polyline fill="none" stroke="black" points="28.6018,-77.9711 50.4457,-77.9711 "/>
<polyline fill="none" stroke="black" points="68.1494,-86.0289 68.1494,-95.9711 "/>
<polyline fill="none" stroke="black" points="50.4457,-104.029 28.6018,-104.029 "/>
<text text-anchor="middle" x="39.5238" y="-87.3" font-family="Helvetica,sans-Serif" font-size="14.00">start</text>
</g>
<!-- start&#45;&gt;po -->
<g id="edge10" class="edge"><title>start&#45;&gt;po</title>
<path fill="none" stroke="black" d="M79.1796,-91C87.7701,-91 96.9507,-91 105.779,-91"/>
<polygon fill="black" stroke="black" points="105.925,-94.5001 115.925,-91 105.925,-87.5001 105.925,-94.5001"/>
</g>
</g>
</svg>

<p>When you enter a web shop, you can search for articles, and put them into a shopping cart. While you are creating your cart, you can change the amount of an article, or delete previously added ones. When you are satisfied with your selection, you finalize your requisition. After finalization, parts of your cart like the items can not be changed any more.</p>
<p>Article descriptions or names can be changed over time. Prices may vary.</p>
<h2 id="a-purchase-order">a purchase order</h2>
<p>A purchase order can have one of the following states</p>
<pre><code>CREATE TYPE purchase_order_status AS ENUM (
    &#39;requisition&#39;, 
    &#39;ready_to_send&#39;, 
    &#39;send&#39;, 
    &#39;delivered&#39;,
    &#39;ready_for_invoice&#39;,
    &#39;invoiced&#39;,
    &#39;finalized&#39;);</code></pre>
<p>It is assumed, that every purchase order has a relation to a <code>customer</code>. For this example this is enough.</p>
<pre><code>CREATE TABLE purchase_order (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_customer UUID NOT NULL REFERENCES customer(id),
    purchase_order_number VARCHAR(128) NOT NULL UNIQUE DEFAULT &#39;&#39;,
    status purchase_order_status NOT NULL DEFAULT &#39;requisition&#39;
);</code></pre>
<p>Every purchase order has a unique <code>purchase_order_number</code>.</p>
<pre><code>CREATE TABLE purchase_order_item (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    id_purchase_order UUID NOT NULL REFERENCES purchase_order(id),
    id_article UUID NOT NULL REFERENCES article(id),
    id_price UUID NOT NULL REFERENCES price(id),
    amount int NOT NULL DEFAULT 1
);</code></pre>
<p>A <code>purchase_order_item</code> has a reference to a <code>purchase_order</code>.</p>
<p>Unless we are in a mutable state, There is no need for storing extra data. This changes, when the <code>purchase_order_status</code> changes to <code>send</code>. The <code>purchase_order_items</code> can’t be changed any more. The purchased items are on their way to the <code>customer</code>. The only thing, which can change is the <code>purchase_order_status</code>, but only forward in the chain.</p>
<p>This is the point, where the items should be saved in a immutable way. There are no immutable types in Postgres, but it can be made hard for a process to change such data columns, which should not be updated.</p>
<p>For our example, we must store the article, with it’s price at the time of purchase. We also need the <code>customer</code>, who must have some kind of address, to send the delivery to.</p>
<pre><code>ALTER TABLE purchase_order ADD COLUMN frozen_purchase_order JSONB;</code></pre>
<p>This column should be updated, when the <code>purchase_order_status</code> is set to <code>send</code>. So, we need a trigger function which listens on state changes. The scaffold looks like</p>
<pre><code>CREATE FUNCTION freeze_purchase_order() RETURNS TRIGGER AS $$
BEGIN
    return NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER freeze_purchase_order_trigger BEFORE UPDATE ON purchase_order
    FOR EACH ROW EXECUTE PROCEDURE freeze_purchase_order();</code></pre>
<p>Now we listen to the <code>send</code> state. At this point, the purchase order some data have to be frozen. Everything below this state can be ignored.</p>
<pre><code>IF NEW.status = ANY(&#39;{requisition,ready_to_send}&#39;::purchase_order_status[]) THEN
    RAISE NOTICE &#39;nothing to do&#39;;
    RETURN NEW;
END IF;</code></pre>
<p>To store some JSON objects we define some variables</p>
<pre><code>DECLARE
    frozen_purchase_order JSONB;
    customer JSONB;
    purchase_order_items JSONB;
    rawItem RECORD;</code></pre>
<p>The <code>frozen_purchase_order</code> will be the result JSON. First we get the current <code>customer</code></p>
<pre><code>SELECT json_view FROM customer WHERE id = NEW.id_customer INTO customer;</code></pre>
<p>A purchase order item contains an article and a price. The function to get a json representation for a item can look like</p>
<pre><code>CREATE FUNCTION get_json_from_item(item_id UUID) RETURNS JSONB AS $$
DECLARE
    result JSONB;
    article JSONB;
    price JSONB;
BEGIN
    SELECT row_to_json(item) FROM (SELECT id_article, id_price, amount FROM purchase_order_item WHERE id = item_id) item INTO result; 
    SELECT row_to_json(rawArticle) FROM (SELECT id, article_number, name, description FROM article WHERE id = (result-&gt;&gt;&#39;id_article&#39;)::UUID) rawArticle INTO article;
    SELECT row_to_json(rawPrice) FROM (SELECT id, p.price, scale_lower_limit, scale_upper_limit, valid_from, valid_to FROM price p WHERE id = (result-&gt;&gt;&#39;id_price&#39;)::UUID) rawPrice INTO price;

    result := result 
     || jsonb_build_object(&#39;article&#39;, article)
     || jsonb_build_object(&#39;price&#39;, price);

    result := result - &#39;id_article&#39;;
    result := result - &#39;id_price&#39;;

    RETURN result;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>The purchase order trigger function can consume this function as following</p>
<pre><code>purchase_order_items := &#39;[]&#39;::JSONB;

FOR rawItem IN (SELECT get_json_from_item(id)::JSONB AS get_json FROM purchase_order_item WHERE id_purchase_order = NEW.id) 
LOOP
    purchase_order_items := purchase_order_items || rawItem.get_json;    
END LOOP;</code></pre>
<p>The current NEW record must be set as root for our result JSON.</p>
<pre><code>SELECT row_to_json(NEW.*) INTO frozen_purchase_order;</code></pre>
<p>Then the <code>customer</code> and the <code>items</code> have to be merged into the result.</p>
<pre><code>frozen_purchase_order := frozen_purchase_order 
    || jsonb_build_object(&#39;items&#39;, purchase_order_items)
    || jsonb_build_object(&#39;customer&#39;, customer);</code></pre>
<p>At last, some unnecessary fields must be deleted from our frozen purchase order.</p>
<pre><code>frozen_purchase_order := frozen_purchase_order - &#39;frozen_purchase_order&#39;;
frozen_purchase_order := frozen_purchase_order - &#39;id_customer&#39;;</code></pre>
<p>Then we have our result.</p>
<pre><code>NEW.frozen_purchase_order := frozen_purchase_order;</code></pre>
<p>The complete function looks like</p>
<pre><code>CREATE FUNCTION freeze_purchase_order() RETURNS TRIGGER AS $$
DECLARE
    frozen_purchase_order JSONB;
    customer JSONB;
    purchase_order_items JSONB;
    rawItem RECORD;
BEGIN
    IF NEW.status = ANY(&#39;{requisition,ready_to_send}&#39;::purchase_order_status[]) THEN
        RAISE NOTICE &#39;nothing to do&#39;;
        RETURN NEW;
    END IF;
    RAISE NOTICE &#39;freeze&#39;;

    SELECT json_view FROM customer WHERE id = NEW.id_customer INTO customer;

    purchase_order_items := &#39;[]&#39;::JSONB;

    FOR rawItem IN (SELECT get_json_from_item(id)::JSONB AS get_json FROM purchase_order_item WHERE id_purchase_order = NEW.id) 
    LOOP
        purchase_order_items := purchase_order_items || rawItem.get_json;    
    END LOOP;

    SELECT row_to_json(NEW.*) INTO frozen_purchase_order;

    frozen_purchase_order := frozen_purchase_order 
        || jsonb_build_object(&#39;items&#39;, purchase_order_items)
        || jsonb_build_object(&#39;customer&#39;, customer);

    frozen_purchase_order := frozen_purchase_order - &#39;frozen_purchase_order&#39;;
    frozen_purchase_order := frozen_purchase_order - &#39;id_customer&#39;;

    NEW.frozen_purchase_order := frozen_purchase_order;
    
    RETURN NEW;
END
$$ LANGUAGE plpgsql;</code></pre>
<h2 id="add-some-data">add some data</h2>
<pre><code>$ psql -U postgres -c &quot;SELECT id FROM test.customer&quot;
                  id
--------------------------------------
 7a24ed2c-c873-4fdf-91cf-3574410acc49
(1 row)

$ psql -U postgres -c &quot;INSERT INTO test.purchase_order (id_customer, purchase_order_number) \
&gt; VALUES (&#39;7a24ed2c-c873-4fdf-91cf-3574410acc49&#39;, &#39;PO12345&#39;);&quot;
INSERT 0 1

$ psql -U postgres -c &quot;SELECT * FROM test.purchase_order;&quot;
                  id                  |             id_customer              | purchase_order_number |   status    | frozen_purchase_order |        created_at         |        updated_at         
--------------------------------------+--------------------------------------+-----------------------+-------------+-----------------------+---------------------------+---------------------------
 29e2fa06-edfc-49ed-878b-49e8ded9bb89 | 7a24ed2c-c873-4fdf-91cf-3574410acc49 | PO12345               | requisition |                       | 2017-07-16 21:15:41.81893 | 2017-07-16 21:15:41.81893
(1 row)</code></pre>
<p>Now we add our <code>article</code> with our <code>price</code>.</p>
<pre><code>$ psql -U postgres -c &quot;SELECT * FROM test.article&quot;
                  id                  | article_number |     name     | description | status |         created_at         |         updated_at         
--------------------------------------+----------------+--------------+-------------+--------+----------------------------+----------------------------
 0b177d42-368a-4cfa-bf8d-e863f4e8a1bd | AB12345        | Test article | Test desc   | active | 2017-07-16 21:06:03.668307 | 2017-07-16 21:06:03.668307
(1 row)

$ psql -U postgres -c &quot;SELECT * FROM test.price;&quot;
                  id                  |              id_article              | price | scale_lower_limit | scale_upper_limit | valid_from |  valid_to  | history |         created_at         |         updated_at         
--------------------------------------+--------------------------------------+-------+-------------------+-------------------+------------+------------+---------+----------------------------+----------------------------
 ac73b43d-e5ef-46dd-81e9-94291aa669c7 | 0b177d42-368a-4cfa-bf8d-e863f4e8a1bd |  50.5 |                 1 |        2147483647 | 2017-07-16 | 2018-07-16 |         | 2017-07-16 21:06:03.668307 | 2017-07-16 21:06:03.668307
(1 row)

$ psql -U postgres -c &quot;INSERT INTO test.purchase_order_item (id_purchase_order, id_article, id_price) \
&gt; VALUES (&#39;29e2fa06-edfc-49ed-878b-49e8ded9bb89&#39;, &#39;0b177d42-368a-4cfa-bf8d-e863f4e8a1bd&#39;, &#39;ac73b43d-e5ef-46dd-81e9-94291aa669c7&#39;)&quot;
INSERT 0 1</code></pre>
<p>Changing the state to <code>ready_to_send</code> will result</p>
<pre><code>$ psql -U postgres -c &quot;SET search_path TO test,public; UPDATE purchase_order SET status = &#39;ready_to_send&#39; \ 
&gt; WHERE id = &#39;29e2fa06-edfc-49ed-878b-49e8ded9bb89&#39;&quot;
NOTICE:  nothing to do
UPDATE 1</code></pre>
<p>Now we set the state to ‘send’</p>
<pre><code>$ psql -U postgres -c &quot;SET search_path TO test,public; UPDATE purchase_order SET status = &#39;send&#39; \
&gt; WHERE id = &#39;29e2fa06-edfc-49ed-878b-49e8ded9bb89&#39;&quot;
NOTICE:  freeze
UPDATE 1

$ psql -U postgres -c &quot;SELECT * from test.purchase_order&quot; | cat
                  id                  |             id_customer              | purchase_order_number | status |frozen_purchase_order|        created_at         |        updated_at         

 29e2fa06-edfc-49ed-878b-49e8ded9bb89 | 7a24ed2c-c873-4fdf-91cf-3574410acc49 | PO12345               | send   | {&quot;id&quot;: &quot;29e2fa06-edfc-49ed-878b-49e8ded9bb89&quot;, &quot;items&quot;: [{&quot;price&quot;: {&quot;id&quot;: &quot;ac73b43d-e5ef-46dd-81e9-94291aa669c7&quot;, &quot;price&quot;: 50.5, &quot;valid_to&quot;: &quot;2018-07-16&quot;, &quot;valid_from&quot;: &quot;2017-07-16&quot;, &quot;scale_lower_limit&quot;: 1, &quot;scale_upper_limit&quot;: 2147483647}, &quot;amount&quot;: 1, &quot;article&quot;: {&quot;id&quot;: &quot;0b177d42-368a-4cfa-bf8d-e863f4e8a1bd&quot;, &quot;name&quot;: &quot;Test article&quot;, &quot;description&quot;: &quot;Test desc&quot;, &quot;article_number&quot;: &quot;AB12345&quot;}}], &quot;status&quot;: &quot;send&quot;, &quot;changes&quot;: null, &quot;customer&quot;: {&quot;id&quot;: &quot;7a24ed2c-c873-4fdf-91cf-3574410acc49&quot;, &quot;person&quot;: {&quot;id&quot;: &quot;35b40b2f-bf40-4f71-8319-f7757de3e1f4&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;addresses&quot;: [{&quot;id&quot;: &quot;7a7f1e44-f6a6-495e-893b-e5806289ea81&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44339&quot;, &quot;address_type&quot;: &quot;private&quot;, &quot;house_number&quot;: &quot;123&quot;}, {&quot;id&quot;: &quot;1d8c41e5-bcd6-4842-864d-62c4da2fc506&quot;, &quot;city&quot;: &quot;Bochum&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;44866&quot;, &quot;address_type&quot;: &quot;work&quot;, &quot;house_number&quot;: &quot;321&quot;}], &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;, &quot;phone_numbers&quot;: [{&quot;id&quot;: &quot;618d19d6-3daf-4029-8d0f-1535272ec212&quot;, &quot;phone_number&quot;: &quot;+49123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;landline&quot;, &quot;is_primary_phone_number&quot;: true}, {&quot;id&quot;: &quot;81403e1d-1055-4953-8b1a-fcca9d034b1b&quot;, &quot;phone_number&quot;: &quot;+49151123456789&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;cellular_network&quot;, &quot;is_primary_phone_number&quot;: false}], &quot;email_addresses&quot;: [{&quot;id&quot;: &quot;a2f79f62-a497-4bdb-8f1b-03d6b7aacb30&quot;, &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;is_primary_email_address&quot;: false}]}, &quot;customer_number&quot;: &quot;AB123456&quot;}, &quot;created_at&quot;: &quot;2017-07-16T21:15:41.81893&quot;, &quot;updated_at&quot;: &quot;2017-07-16T21:25:03.02978&quot;, &quot;purchase_order_number&quot;: &quot;PO12345&quot;} | 2017-07-16 21:15:41.81893 | 2017-07-16 21:26:44.87835
(1 row)</code></pre>
<p>The frozen purchase order looks like</p>
<pre><code>{
    &quot;id&quot;: &quot;29e2fa06-edfc-49ed-878b-49e8ded9bb89&quot;,
    &quot;items&quot;: [{
        &quot;price&quot;: {
            &quot;id&quot;: &quot;ac73b43d-e5ef-46dd-81e9-94291aa669c7&quot;,
            &quot;price&quot;: 50.5,
            &quot;valid_to&quot;: &quot;2018-07-16&quot;,
            &quot;valid_from&quot;: &quot;2017-07-16&quot;,
            &quot;scale_lower_limit&quot;: 1,
            &quot;scale_upper_limit&quot;: 2147483647
        },
        &quot;amount&quot;: 1,
        &quot;article&quot;: {
            &quot;id&quot;: &quot;0b177d42-368a-4cfa-bf8d-e863f4e8a1bd&quot;,
            &quot;name&quot;: &quot;Test article&quot;,
            &quot;description&quot;: &quot;Test desc&quot;,
            &quot;article_number&quot;: &quot;AB12345&quot;
        }
    }],
    &quot;status&quot;: &quot;send&quot;,
    &quot;changes&quot;: null,
    &quot;customer&quot;: {
        &quot;id&quot;: &quot;7a24ed2c-c873-4fdf-91cf-3574410acc49&quot;,
        &quot;person&quot;: {
            &quot;id&quot;: &quot;35b40b2f-bf40-4f71-8319-f7757de3e1f4&quot;,
            &quot;notes&quot;: null,
            &quot;website&quot;: null,
            &quot;addresses&quot;: [{
                &quot;id&quot;: &quot;7a7f1e44-f6a6-495e-893b-e5806289ea81&quot;,
                &quot;city&quot;: &quot;Dortmund&quot;,
                &quot;street&quot;: &quot;Fakestreet&quot;,
                &quot;postal_code&quot;: &quot;44339&quot;,
                &quot;address_type&quot;: &quot;private&quot;,
                &quot;house_number&quot;: &quot;123&quot;
            }, {
                &quot;id&quot;: &quot;1d8c41e5-bcd6-4842-864d-62c4da2fc506&quot;,
                &quot;city&quot;: &quot;Bochum&quot;,
                &quot;street&quot;: &quot;Fakestreet&quot;,
                &quot;postal_code&quot;: &quot;44866&quot;,
                &quot;address_type&quot;: &quot;work&quot;,
                &quot;house_number&quot;: &quot;321&quot;
            }],
            &quot;last_name&quot;: &quot;Hake&quot;,
            &quot;birth_date&quot;: null,
            &quot;first_name&quot;: &quot;Jan Frederik&quot;,
            &quot;phone_numbers&quot;: [{
                &quot;id&quot;: &quot;618d19d6-3daf-4029-8d0f-1535272ec212&quot;,
                &quot;phone_number&quot;: &quot;+49123456789&quot;,
                &quot;communication_type&quot;: &quot;private&quot;,
                &quot;communication_network&quot;: &quot;landline&quot;,
                &quot;is_primary_phone_number&quot;: true
            }, {
                &quot;id&quot;: &quot;81403e1d-1055-4953-8b1a-fcca9d034b1b&quot;,
                &quot;phone_number&quot;: &quot;+49151123456789&quot;,
                &quot;communication_type&quot;: &quot;private&quot;,
                &quot;communication_network&quot;: &quot;cellular_network&quot;,
                &quot;is_primary_phone_number&quot;: false
            }],
            &quot;email_addresses&quot;: [{
                &quot;id&quot;: &quot;a2f79f62-a497-4bdb-8f1b-03d6b7aacb30&quot;,
                &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;,
                &quot;communication_type&quot;: &quot;private&quot;,
                &quot;is_primary_email_address&quot;: false
            }]
        },
        &quot;customer_number&quot;: &quot;AB123456&quot;
    },
    &quot;created_at&quot;: &quot;2017-07-16T21:15:41.81893&quot;,
    &quot;updated_at&quot;: &quot;2017-07-16T21:25:03.02978&quot;,
    &quot;purchase_order_number&quot;: &quot;PO12345&quot;
}</code></pre>
<p>This approach looks promising. In the next part, we look into updating those structures.</p>]]></summary>
</entry>
<entry>
    <title>Automatically update MIT licenses</title>
    <link href="https://enter-haken.github.io/posts/2017-07-07-update-mit-license.html" />
    <id>https://enter-haken.github.io/posts/2017-07-07-update-mit-license.html</id>
    <published>2017-07-07T00:00:00Z</published>
    <updated>2017-07-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>When you are using the MIT license for your own project, you can add copyright notices to the license. The license starts with</p>
<pre><code>The MIT License (MIT)
Copyright (c) 2016 Jan Frederik Hake

Permission is hereby granted, free of charge, ...</code></pre>
<p>For every year, you make changes to the source, you have to add the year to the copyright notice. Especially for projects, which are rarely updated, the license is often forgotten.</p>
<p>With some git and awk magic, this task can be automated. <!--more--></p>
<h1 id="git-log">git log</h1>
<p>I take my blog sources as an example. The source for my changes is my git log.</p>
<p>If I like to see only the commit date and the name of the committer you can start with</p>
<pre><code>$ git log --pretty=format:&quot;%ad|%an&quot; | head -n5
Wed Jun 28 19:00:52 2017 +0200|Jan Frederik Hake
Sat May 6 10:38:58 2017 +0200|Jan Frederik Hake
Sat May 6 10:29:15 2017 +0200|Jan Frederik Hake
Sat May 6 07:53:10 2017 +0200|Jan Frederik Hake
Thu May 4 11:57:25 2017 +0200|Jan Frederik Hake</code></pre>
<p>I choose the pipe character as a separator for further processing. The date can be formatted with the <code>--date</code> parameter.</p>
<pre><code>$ git log --pretty=format:&quot;%ad|%an&quot; --date=format:%Y | head -n 5
2017|Jan Frederik Hake
2017|Jan Frederik Hake
2017|Jan Frederik Hake
2017|Jan Frederik Hake
2017|Jan Frederik Hake</code></pre>
<p>In the next step I do some <code>uniq</code> and <code>sort</code> on the result. For the next process step, I switch the year and the name.</p>
<pre><code>$ git log --pretty=format:&quot;%an|%ad&quot;                  \
&gt;            --date=format:%Y | sort | uniq |        \
&gt;    awk &#39;BEGIN {FS=&quot;|&quot;}                             \
&gt;    {                                               \
&gt;      if ($1==currentName) {                        \
&gt;              year=year &quot;,&quot; $2;                     \
&gt;      }                                             \
&gt;      else {                                        \
&gt;          if (currentName) {                        \
&gt;              print &quot;(c) &quot; year &quot; &quot; currentName;    \
&gt;          };                                        \
&gt;          currentName=$1;                           \
&gt;          year=$2;                                  \
&gt;      }                                             \
&gt;    }                                               \
&gt;    END {                                           \
&gt;        if (currentName) {                          \
&gt;            print &quot;(c) &quot; year &quot; &quot; currentName;      \
&gt;        }                                           \
&gt;    }&#39; 
(c) 2016,2017 Jan Frederik Hake </code></pre>
<p>With a simple bash script you can update your LICENSE file of your project, if needed.</p>
<pre><code>#!/bin/sh
if [ ! -f LICENSE ]; then
    break; 
fi

copyright=$(git log --pretty=format:&quot;%an|%ad&quot;       \
            --date=format:%Y | sort | uniq |        \
    awk &#39;BEGIN {FS=&quot;|&quot;}                             \
    {                                               \
      if ($1==currentName) {                        \
              year=year &quot;,&quot; $2;                     \
      }                                             \
      else {                                        \
          if (currentName) {                        \
              print &quot;(c) &quot; year &quot; &quot; currentName;    \
          };                                        \
          currentName=$1;                           \
          year=$2;                                  \
      }                                             \
    }                                               \
    END {                                           \
        if (currentName) {                          \
            print &quot;(c) &quot; year &quot; &quot; currentName;      \
        }                                           \
    }&#39;)

license=$(cat LICENSE | sed -e &quot;s/(c).*$/$copyright/g&quot;)
echo &quot;$license&quot; &gt; LICENSE</code></pre>
<p>If you add the script to the project Makefile, there is no need for manually updating the LICENSE file any more.</p>]]></summary>
</entry>
<entry>
    <title>Moving ORM Mapping towards the database</title>
    <link href="https://enter-haken.github.io/posts/2017-07-06-database-architecture.html" />
    <id>https://enter-haken.github.io/posts/2017-07-06-database-architecture.html</id>
    <published>2017-07-06T00:00:00Z</published>
    <updated>2017-07-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Storing data in a <a href="https://en.wikipedia.org/wiki/Relational_database">relational database</a> has it’s roots in the late sixties of the past century. The core idea has survived the last decades. About 2009 the term <a href="https://en.wikipedia.org/wiki/NoSQL">NoSQL</a> appeared.</p>
<p>As for now <a href="https://www.postgresql.org/">PostgreSQL</a> is the most advanced relational database in the world. With version 9 you can store non atomic data in a JSON column. Document based NoSQL databases like <a href="https://www.mongodb.com/">MongoDb</a> are storing there data in so called <a href="https://docs.mongodb.com/v3.2/core/databases-and-collections/">collections</a>. These collections are similar to <a href="https://www.postgresql.org/docs/9.6/static/datatype-json.html">PostgreSQL JSON columns</a>.</p>
<p>With PostgreSQL you are able to use the best of both worlds.</p>
<!--more-->
<h1 id="some-tables">Some tables</h1>
<p>Before entering the JSON world, let’s look at a simple example. I use the <a href="https://www.postgresql.org/docs/current/static/pgcrypto.html">pgcrypto extension</a> for generating id columns for the tables.</p>
<pre><code>CREATE EXTENSION IF NOT EXISTS pgcrypto;</code></pre>
<p>For fast prototyping, you can use an own schema for the example.</p>
<pre><code>DROP SCHEMA IF EXISTS test CASCADE;
CREATE SCHEMA test;

SET search_path TO test,public;</code></pre>
<p>If you like to store personal data you start with a <code>person</code></p>
<pre><code>CREATE TABLE person (
    id BUD NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    first_name VARCHAR(512),
    last_name VARCHAR(512),
    birth_date DATE,
    notes VARCHAR(4096),
    website VARCHAR(256)
);</code></pre>
<p>With an <code>address</code> table,</p>
<pre><code>CREATE TABLE address (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    street VARCHAR(512), 
    house_number VARCHAR(128),
    postal_code VARCHAR(10),
    city VARCHAR(512)
);</code></pre>
<p>you can store several addresses for a person.</p>
<pre><code>CREATE TYPE address_type AS ENUM (
    &#39;private&#39;,
    &#39;delivery&#39;,
    &#39;invoice&#39;,
    &#39;work&#39;
);

CREATE TABLE person_to_address(
    id_person UUID NOT NULL REFERENCES person (id),
    id_address UUID NOT NULL REFERENCES address(id),
    is_primary_address boolean NOT NULL DEFAULT false,
    address_type address_type NOT NULL DEFAULT &#39;private&#39;,
    PRIMARY KEY (id_person, id_address)
);</code></pre>
<p>A simple table for storing emails can look like</p>
<pre><code>CREATE TABLE email (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    eMail_address VARCHAR(256)
);

CREATE TYPE communication_type AS ENUM (
    &#39;work&#39;,
    &#39;private&#39;,
    &#39;organization&#39;
);

CREATE TABLE person_to_email (
    id_person UUID NOT NULL REFERENCES person (id),
    id_email UUID NOT NULL REFERENCES email (id),
    communication_type communication_type NOT NULL DEFAULT &#39;private&#39;,
    is_primary_email_address BOOLEAN NOT NULL DEFAULT false,
    PRIMARY KEY (id_person, id_email)
);</code></pre>
<p>Similar to an email you can store <code>phone data</code> like</p>
<pre><code>CREATE TYPE communication_network AS ENUM (
    &#39;landline&#39;,
    &#39;cellular_network&#39;
);

CREATE TABLE phone (
    id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
    phone_number VARCHAR(128) NOT NULL,
    communication_network communication_network NOT NULL DEFAULT &#39;landline&#39;
);

CREATE TABLE person_to_phone (
    id_person UUID NOT NULL REFERENCES person (id),
    id_phone UUID NOT NULL REFERENCES phone (id),
    communication_type communication_type NOT NULL DEFAULT &#39;private&#39;,
    is_primary_phone_number BOOLEAN NOT NULL DEFAULT false,
    PRIMARY KEY (id_person, id_phone)
);</code></pre>
<p>If you like to need meta data for every table, like <code>last update date</code> or <code>create date</code>, you can do this with a simple trigger function.</p>
<pre><code>CREATE FUNCTION metadata_trigger() RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at := now();
    RETURN NEW;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>In the next step, you add to every table a <code>created_at</code> and a <code>updated_at</code> column. After this the <code>metadata_trigger</code> trigger function has to be added.</p>
<pre><code>CREATE FUNCTION add_metadata_to_every_table() RETURNS VOID AS $$
DECLARE 
    row record;
BEGIN
    FOR row IN SELECT tablename FROM pg_tables WHERE schemaname = &#39;test&#39; LOOP
        EXECUTE &#39;ALTER TABLE &#39; || row.tablename || 
            &#39; ADD COLUMN created_at timestamp NOT NULL DEFAULT NOW();&#39;;

        EXECUTE &#39;ALTER TABLE &#39; || row.tablename || 
            &#39; ADD COLUMN updated_at timestamp NOT NULL DEFAULT NOW();&#39;;

        EXECUTE &#39;CREATE TRIGGER &#39; || row.tablename || &#39;_trigger BEFORE UPDATE ON &#39; || row.tablename || 
            &#39; FOR EACH ROW EXECUTE PROCEDURE metadata_trigger();&#39;;
    END LOOP;
END
$$ LANGUAGE plpgsql;</code></pre>
<p>No stunts so far.</p>
<p>Prior to the NoSQL movement, you would probably create a view for a <code>person</code>.</p>
<pre><code>CREATE VIEW person_view AS
    SELECT first_name, 
            last_name, 
            street, 
            house_number, 
            postal_code,
            city,
            email_address,
            phone_number
        FROM PERSON p
        JOIN person_to_address p2a ON p.id = p2a.id_person
        JOIN address a on p2a.id_address = a.id
        JOIN person_to_email p2e on p2e.id_person = p.id
        JOIN email e on e.id = p2e.id_email 
        JOIN person_to_phone p2p on p2p.id_person = p.id
        JOIN phone ph on ph.id = p2p.id_phone;</code></pre>
<p>You get a tabular result with many redundant data here. The next layer will take this raw data and transform it into objects.</p>
<pre><code>$ psql -U postgres -c &quot;select * from test.person_view&quot;
  first_name  | last_name |   street   | house_number | postal_code |   city   | address_type |  email_address   |  phone_number  
--------------+-----------+------------+---------------+-------------+----------+--------------+------------------+----------------
 Jan Frederik | Hake      | No Street  | 3-4           | 54321       | Dortmund | work         | jan_hake@fake.de | +4923111223344
 Jan Frederik | Hake      | Fakestreet | 123           | 12345       | Dortmund | private      | jan_hake@fake.de | +4923111223344
 Jan Frederik | Hake      | No Street  | 3-4           | 54321       | Dortmund | work         | jan_hake@fake.de | +4915199887766
 Jan Frederik | Hake      | Fakestreet | 123           | 12345       | Dortmund | private      | jan_hake@fake.de | +4915199887766
(4 rows)</code></pre>
<p>It would be nice, if the database it self could provide these objects. At this point, the JSON columns come into the game.</p>
<h1 id="json-column">JSON column</h1>
<p>In this example the <code>person</code> table is our root relation. We add the json column in this table.</p>
<pre><code>ALTER TABLE person ADD COLUMN json_view JSONB;</code></pre>
<p>In the first step we create a function, that fills this column.</p>
<pre><code>CREATE FUNCTION update_json_view_person(person_id UUID) RETURNS VOID AS $$
DECLARE
    person_raw JSONB;
BEGIN
    SELECT row_to_json(p) FROM 
        (SELECT id, first_name, last_name, 
         birth_date, notes, website FROM person 
            WHERE id = person_id) p INTO person_raw;
    
UPDATE person SET json_view = person_raw WHERE id = person_id;    
END
$$ LANGUAGE plpgsql;</code></pre>
<p>A sample output for <code>json_view</code> can look like</p>
<pre><code>$ psql -U postgres -c &quot;select json_view from test.person&quot;
                                                                       json_view                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 {&quot;id&quot;: &quot;e881de40-596d-47f1-801c-77bf32829bfa&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;}
(1 row)</code></pre>
<p>There are many <a href="https://www.postgresql.org/docs/9.3/static/functions-json.html">json functions</a> available for Postgres. The <code>row_to_json</code> function will create a json object for every result row. In this case it is just one row.</p>
<p>When you want to add the address data you can use the <code>array_agg</code> <a href="https://www.postgresql.org/docs/current/static/functions-aggregate.html">aggregate function</a> to create an array from a result,</p>
<pre><code>SELECT array_to_json(array_agg(addresses)) FROM 
    (SELECT a.id, street, house_number, postal_code, city, p2a.address_type FROM address a
    JOIN person_to_address p2a ON a.id = p2a.id_address WHERE p2a.id_person = person_id) addresses 
    INTO person_addresses;</code></pre>
<p>where <code>person_to_addresses</code> is a local <code>JSONB</code> variable. The <code>array_to_json</code> function creates a json array, which can be added to the <code>person_raw</code> with <code>json_build_object</code>.</p>
<pre><code>person_raw := person_raw 
    || jsonb_build_object(&#39;addresses&#39;, person_addresses); </code></pre>
<p>You can do this similar for <code>email</code> and <code>phone</code>.</p>
<p>The complete function looks like</p>
<pre><code>CREATE FUNCTION update_json_view_person(person_id UUID) RETURNS VOID AS $$
DECLARE
    person_raw JSONB;
    person_addresses JSONB;
    person_email_addresses JSONB;
    person_phone_numbers JSONB;
BEGIN
    SELECT row_to_json(p) FROM 
        (SELECT id, first_name, last_name, birth_date, notes, website FROM person 
            WHERE id = person_id LIMIT 1) p INTO person_raw;
    
    SELECT array_to_json(array_agg(addresses)) FROM 
        (SELECT a.id, street, house_number, postal_code, city, p2a.address_type FROM address a
        JOIN person_to_address p2a ON a.id = p2a.id_address WHERE p2a.id_person = person_id) addresses 
        INTO person_addresses;
    
    SELECT array_to_json(array_agg(email_addresses)) FROM
        (SELECT e.id, email_address, is_primary_email_address, communication_type FROM email e
            JOIN person_to_email p2e on e.id = p2e.id_email
            WHERE p2e.id_person = person_id) email_addresses INTO person_email_addresses;
 
    SELECT array_to_json(array_agg(phone_numbers)) FROM
        (SELECT p.id, phone_number, communication_type, communication_network, is_primary_phone_number FROM phone p 
            JOIN person_to_phone p2p on p.id = p2p.id_phone
            WHERE p2p.id_person = person_id) phone_numbers INTO person_phone_numbers;
    
    person_raw := person_raw 
        || jsonb_build_object(&#39;addresses&#39;, person_addresses) 
        || jsonb_build_object(&#39;email_addresses&#39;, person_email_addresses)
        || jsonb_build_object(&#39;phone_numbers&#39;, person_phone_numbers);

    UPDATE person SET json_view = person_raw WHERE id = person_id;    
END
$$ LANGUAGE plpgsql;</code></pre>
<p>Now the person looks more or less complete</p>
<pre><code>$ psql -U postgres -c &quot;select json_view from test.person&quot; | cat
json_view
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {&quot;id&quot;: &quot;5824be75-b444-4ac7-8d59-0763e6a6a9b3&quot;, &quot;notes&quot;: null, &quot;website&quot;: null, &quot;addresses&quot;: [{&quot;id&quot;: &quot;41a93a1b-fd31-4f05-8a63-8921a926223c&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;Fakestreet&quot;, &quot;postal_code&quot;: &quot;12345&quot;, &quot;address_type&quot;: &quot;private&quot;, &quot;house_number&quot;: &quot;123&quot;}, {&quot;id&quot;: &quot;4a2558c9-13b5-49a8-89b8-52022575040b&quot;, &quot;city&quot;: &quot;Dortmund&quot;, &quot;street&quot;: &quot;No Street&quot;, &quot;postal_code&quot;: &quot;54321&quot;, &quot;address_type&quot;: &quot;work&quot;, &quot;house_number&quot;: &quot;3-4&quot;}], &quot;last_name&quot;: &quot;Hake&quot;, &quot;birth_date&quot;: null, &quot;first_name&quot;: &quot;Jan Frederik&quot;, &quot;phone_numbers&quot;: [{&quot;id&quot;: &quot;86941ea5-fe53-4251-bdfc-abafca40b4ab&quot;, &quot;phone_number&quot;: &quot;+4923111223344&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;landline&quot;, &quot;is_primary_phone_number&quot;: true}, {&quot;id&quot;: &quot;96b8ebd3-f514-4fd7-997c-136e4a6eb270&quot;, &quot;phone_number&quot;: &quot;+4915199887766&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;communication_network&quot;: &quot;cellular_network&quot;, &quot;is_primary_phone_number&quot;: false}], &quot;email_addresses&quot;: [{&quot;id&quot;: &quot;9fc2ea91-cf68-4624-a903-381d765be25c&quot;, &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;, &quot;communication_type&quot;: &quot;private&quot;, &quot;is_primary_email_address&quot;: false}]}
(1 row)</code></pre>
<p>With a little bit formatting you get.</p>
<pre><code>{
    &quot;id&quot;: &quot;5824be75-b444-4ac7-8d59-0763e6a6a9b3&quot;,
    &quot;notes&quot;: null,
    &quot;website&quot;: null,
    &quot;addresses&quot;: [{
        &quot;id&quot;: &quot;41a93a1b-fd31-4f05-8a63-8921a926223c&quot;,
        &quot;city&quot;: &quot;Dortmund&quot;,
        &quot;street&quot;: &quot;Fakestreet&quot;,
        &quot;postal_code&quot;: &quot;12345&quot;,
        &quot;address_type&quot;: &quot;private&quot;,
        &quot;house_number&quot;: &quot;123&quot;
    }, {
        &quot;id&quot;: &quot;4a2558c9-13b5-49a8-89b8-52022575040b&quot;,
        &quot;city&quot;: &quot;Dortmund&quot;,
        &quot;street&quot;: &quot;No Street&quot;,
        &quot;postal_code&quot;: &quot;54321&quot;,
        &quot;address_type&quot;: &quot;work&quot;,
        &quot;house_number&quot;: &quot;3-4&quot;
    }],
    &quot;last_name&quot;: &quot;Hake&quot;,
    &quot;birth_date&quot;: null,
    &quot;first_name&quot;: &quot;Jan Frederik&quot;,
    &quot;phone_numbers&quot;: [{
        &quot;id&quot;: &quot;86941ea5-fe53-4251-bdfc-abafca40b4ab&quot;,
        &quot;phone_number&quot;: &quot;+4923111223344&quot;,
        &quot;communication_type&quot;: &quot;private&quot;,
        &quot;communication_network&quot;: &quot;landline&quot;,
        &quot;is_primary_phone_number&quot;: true
    }, {
        &quot;id&quot;: &quot;96b8ebd3-f514-4fd7-997c-136e4a6eb270&quot;,
        &quot;phone_number&quot;: &quot;+4915199887766&quot;,
        &quot;communication_type&quot;: &quot;private&quot;,
        &quot;communication_network&quot;: &quot;cellular_network&quot;,
        &quot;is_primary_phone_number&quot;: false
    }],
    &quot;email_addresses&quot;: [{
        &quot;id&quot;: &quot;9fc2ea91-cf68-4624-a903-381d765be25c&quot;,
        &quot;email_address&quot;: &quot;jan_hake@fake.de&quot;,
        &quot;communication_type&quot;: &quot;private&quot;,
        &quot;is_primary_email_address&quot;: false
    }]
}</code></pre>
<p>Every time the <code>update_json_view_person</code> function is called, the <code>json_view</code> column is updated with the current relational data.</p>
<p>In the next part, I take a look at some other use cases.</p>]]></summary>
</entry>
<entry>
    <title>providing test data for databases</title>
    <link href="https://enter-haken.github.io/posts/2017-06-28-testdata.html" />
    <id>https://enter-haken.github.io/posts/2017-06-28-testdata.html</id>
    <published>2017-06-28T00:00:00Z</published>
    <updated>2017-06-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>A few days ago, I did some experiments with PostgreSQL JSONB columns. A used a simple person model for my tests, containing address data for a person.</p>
<p>For my tests, I needed some test data. I could have generated some random strings, but I wanted to fill the database with more realistic data. I have often thought of a test data generator for commonly used data models. If you want to generate randomized addresses for a person, you need a big list of street names and city names. When it comes to geographical data like this, <a href="https://www.openstreetmap.org">open street maps</a> comes into the game.</p>
<!--more-->
<p>Because I live in North rhine westphalia, I use <a href="http://download.geofabrik.de/europe/germany/nordrhein-westfalen.html">local data</a> from the German <a href="https://www.openstreetmap.org">open street map</a> provider <a href="http://www.geofabrik.de/">geofabrik</a>. At the time of writing the pbf data is about 647 MB in size. This file contains all cities, highways, residential data, rail ways and so on. I only need a fraction of this. The osm community has build a tool called <a href="http://wiki.openstreetmap.org/wiki/Osmosis">osmosis</a> for this. With osmosis you can filter the data and save the result in a XML file.</p>
<h1 id="cities">Cities</h1>
<pre><code>$ osmosis --read-pbf nordrhein-westfalen-latest.osm.pbf \
&gt; --tf accept-nodes place=city,town,village,hamlet,suburb \
&gt; --tf reject-relations \
&gt; --tf reject-ways \
&gt; --write-xml nrw-cities.osm
Jun 28, 2017 07:44:09 PM org.openstreetmap.osmosis.core.Osmosis run
INFORMATION: Osmosis Version 0.40.1
Jun 28, 2017 07:44:09 PM org.openstreetmap.osmosis.core.Osmosis run
INFORMATION: Preparing pipeline.
Jun 28, 2017 07:44:09 PM org.openstreetmap.osmosis.core.Osmosis run
INFORMATION: Launching pipeline execution.
Jun 28, 2017 07:44:09 PM org.openstreetmap.osmosis.core.Osmosis run
INFORMATION: Pipeline executing, waiting for completion.
Jun 28, 2017 07:44:53 PM org.openstreetmap.osmosis.core.Osmosis run
INFORMATION: Pipeline complete.
Jun 28, 2017 07:44:53 PM org.openstreetmap.osmosis.core.Osmosis run
INFORMATION: Total execution time: 44140 milliseconds.</code></pre>
<p>As a result, you get a 3MB xml file. The file contains all nodes with a <a href="http://wiki.openstreetmap.org/wiki/Key:place">place tag</a>, containing either <code>city</code>, <code>town</code>, <code>village</code>, <code>hamlet</code> or <code>suburb</code>. These tags has usually have a <a href="http://wiki.openstreetmap.org/wiki/Key:name">name tag</a>.</p>
<p>The city Dortmund looks like</p>
<pre><code>&lt;node id=&quot;25293125&quot; version=&quot;33&quot; timestamp=&quot;2017-05-08T12:12:08Z&quot; uid=&quot;5706452&quot; user=&quot;Bienson&quot; changeset=&quot;48500235&quot; lat=&quot;51.5142273&quot; lon=&quot;7.4652789&quot;&gt;
  &lt;tag k=&quot;ele&quot; v=&quot;86&quot;/&gt;
  &lt;tag k=&quot;is_in&quot; v=&quot;Regierungsbezirk Arnsberg,Nordrhein-Westfalen,Bundesrepublik Deutschland,Europe&quot;/&gt;
  &lt;tag k=&quot;is_in:country_code&quot; v=&quot;DE&quot;/&gt;
  &lt;tag k=&quot;is_in:iso_3166_2&quot; v=&quot;DE-NW&quot;/&gt;
  &lt;tag k=&quot;name&quot; v=&quot;Dortmund&quot;/&gt;
  &lt;tag k=&quot;name:de&quot; v=&quot;Dortmund&quot;/&gt;
  &lt;tag k=&quot;name:hu&quot; v=&quot;Dortmund&quot;/&gt;
  ...
  &lt;tag k=&quot;openGeoDB:community_identification_number&quot; v=&quot;05913&quot;/&gt;
  &lt;tag k=&quot;openGeoDB:is_in_loc_id&quot; v=&quot;179&quot;/&gt;
  &lt;tag k=&quot;openGeoDB:layer&quot; v=&quot;5&quot;/&gt;
  &lt;tag k=&quot;openGeoDB:license_plate_code&quot; v=&quot;DO&quot;/&gt;
  &lt;tag k=&quot;openGeoDB:loc_id&quot; v=&quot;404&quot;/&gt;
  &lt;tag k=&quot;place&quot; v=&quot;city&quot;/&gt;
  &lt;tag k=&quot;place:importance&quot; v=&quot;2&quot;/&gt;
  &lt;tag k=&quot;population&quot; v=&quot;600933&quot;/&gt;
  &lt;tag k=&quot;ref:LOCODE&quot; v=&quot;DEDTM&quot;/&gt;
  &lt;tag k=&quot;website&quot; v=&quot;http://www.dortmund.de&quot;/&gt;
  &lt;tag k=&quot;wikidata&quot; v=&quot;Q1295&quot;/&gt;
  &lt;tag k=&quot;wikipedia&quot; v=&quot;de:Dortmund&quot;/&gt;
&lt;/node&gt;</code></pre>
<p>At this point you can decide either to use a xml library for extracting the name tag, or to use the Linux system tools. I start over with the system tools. Let’s look how far we can get.</p>
<p>A first <code>grep</code> gets every line with a name tag.</p>
<pre><code>$ grep &#39;k=&quot;name&quot;&#39; nrw-cities.osm | head
    &lt;tag k=&quot;name&quot; v=&quot;Dingden&quot;/&gt;
    &lt;tag k=&quot;name&quot; v=&quot;Bocholt&quot;/&gt;
    &lt;tag k=&quot;name&quot; v=&quot;Köln&quot;/&gt;
    &lt;tag k=&quot;name&quot; v=&quot;Herne&quot;/&gt;
    &lt;tag k=&quot;name&quot; v=&quot;Lünen&quot;/&gt;
    &lt;tag k=&quot;name&quot; v=&quot;Alstedde&quot;/&gt;
    &lt;tag k=&quot;name&quot; v=&quot;Heggen&quot;/&gt;
    &lt;tag k=&quot;name&quot; v=&quot;Herzebrock-Clarholz&quot;/&gt;
    &lt;tag k=&quot;name&quot; v=&quot;Dortmund&quot;/&gt;
    &lt;tag k=&quot;name&quot; v=&quot;Schlangen&quot;/&gt;</code></pre>
<p>Looks promising. With a <code>cut</code> I can extract the values of the tag.</p>
<pre><code>$ grep &#39;k=&quot;name&quot;&#39; nrw-cities.osm | cut -d\&quot; -f4 | head
Dingden
Bocholt
Köln
Herne
Lünen
Alstedde
Heggen
Herzebrock-Clarholz
Dortmund
Schlangen</code></pre>
<p>At this point, you can get a unique sorted list with</p>
<pre><code>$ grep &#39;k=&quot;name&quot;&#39; nrw-cities.osm | cut -d\&quot; -f4 | sort | uniq | head
Aachen
Aan de Popelaar
Aandeschool
Aarmühle
Aaseestadt
Abbenroth
Abenden
Abstoß
Abtsküche
Achterberg</code></pre>
<p>As a result we have</p>
<pre><code>$ grep &#39;k=&quot;name&quot;&#39; nrw-cities.osm | cut -d\&quot; -f4 | sort | uniq | wc -l
7725</code></pre>
<p>unique elements.</p>
<h1 id="streets">Streets</h1>
<pre><code>$ osmosis --read-pbf nordrhein-westfalen-latest.osm.pbf \
&gt; --wkv keyValueList=highway.residential \
&gt; --tf reject-nodes \
&gt; --tf reject-relations \
&gt; --write-xml nrw-streets.osm
Jun 28, 2017 08:34:04 PM org.openstreetmap.osmosis.core.Osmosis run
INFORMATION: Osmosis Version 0.40.1
Jun 28, 2017 08:34:04 PM org.openstreetmap.osmosis.core.Osmosis run
INFORMATION: Preparing pipeline.
Jun 28, 2017 08:34:04 PM org.openstreetmap.osmosis.core.Osmosis run
INFORMATION: Launching pipeline execution.
Jun 28, 2017 08:34:04 PM org.openstreetmap.osmosis.core.Osmosis run
INFORMATION: Pipeline executing, waiting for completion.
Jun 28, 2017 08:35:11 PM org.openstreetmap.osmosis.core.Osmosis run
INFORMATION: Pipeline complete.
Jun 28, 2017 08:35:11 PM org.openstreetmap.osmosis.core.Osmosis run
INFORMATION: Total execution time: 66564 milliseconds.</code></pre>
<p>This result contains only <a href="http://wiki.openstreetmap.org/wiki/Way">way xml nodes</a> containing a <a href="http://wiki.openstreetmap.org/wiki/Key:highway">highway tag</a> with the value <code>residential</code>.</p>
<pre><code>&lt;way id=&quot;455771&quot; version=&quot;15&quot; timestamp=&quot;2017-03-09T07:41:37Z&quot; uid=&quot;67862&quot; user=&quot;HolgerJeromin&quot; changeset=&quot;46719636&quot;&gt;
  &lt;nd ref=&quot;290215666&quot;/&gt;
  &lt;nd ref=&quot;2704621&quot;/&gt;
  &lt;nd ref=&quot;1256434820&quot;/&gt;
  &lt;nd ref=&quot;1834309845&quot;/&gt;
  &lt;nd ref=&quot;2896578753&quot;/&gt;
  &lt;nd ref=&quot;2704622&quot;/&gt;
  &lt;nd ref=&quot;2704623&quot;/&gt;
  &lt;tag k=&quot;highway&quot; v=&quot;living_street&quot;/&gt;
  &lt;tag k=&quot;lit&quot; v=&quot;yes&quot;/&gt;
  &lt;tag k=&quot;name&quot; v=&quot;Ernst-Meurin-Straße&quot;/&gt;
  &lt;tag k=&quot;surface&quot; v=&quot;paving_stones&quot;/&gt;
&lt;/way&gt;    </code></pre>
<p>Ways with a name tag are usually urban ways. All other ways will be filtered.</p>
<p>The names can be extracted on the same way, like it is done with the cities.</p>
<pre><code>$ grep &#39;k=&quot;name&quot;&#39; nrw-streets.osm | cut -d\&quot; -f4 | sort | uniq | head
55er Straße
(A7)
Aabach Aue
Aabauerschaft
Aachener Ende
Aachener Glacis
Aachener Gracht
Aachener Platz
Aachener Straße
Aachener Weg</code></pre>
<p>The North rhine westphalia file contains</p>
<pre><code>$ grep &#39;k=&quot;name&quot;&#39; nrw-streets.osm | cut -d\&quot; -f4 | sort | uniq | wc -l
71787</code></pre>
<p>unique streets.</p>
<p>If you want to know, how often a street name is used in North rhine westphalia, you can extend the query like</p>
<pre><code>$ grep &#39;k=&quot;name&quot;&#39; nrw-streets.osm | cut -d\&quot; -f4 | sort | uniq -c | sort -rn | head -n 20
    749 Bahnhofstraße
    651 Schulstraße
    640 Gartenstraße
    618 Bergstraße
    574 Kirchstraße
    493 Bachstraße
    478 Ringstraße
    473 Mühlenstraße
    457 Schillerstraße
    434 Dorfstraße
    428 Breslauer Straße
    408 Goethestraße
    402 Jahnstraße
    400 Lindenstraße
    397 Feldstraße
    394 Hauptstraße
    374 Wiesenstraße
    372 Mühlenweg
    368 Schützenstraße
    359 Waldstraße</code></pre>
<p>This can be useful, if you like to use the top <code>n</code> street names of the whole list.</p>
<pre><code>$ grep &#39;k=&quot;name&quot;&#39; nrw-streets.osm | cut -d\&quot; -f4 | sort | uniq -c | sort -rn | \
&gt; head -n 20 | sed -e &#39;s/^[[:space:]]*//&#39; | cut -d&#39; &#39; -f2-
Bahnhofstraße
Schulstraße
Gartenstraße
Bergstraße
Kirchstraße
Bachstraße
Ringstraße
Mühlenstraße
Schillerstraße
Dorfstraße
Breslauer Straße
Goethestraße
Jahnstraße
Lindenstraße
Feldstraße
Hauptstraße
Wiesenstraße
Mühlenweg
Schützenstraße
Waldstraße</code></pre>
<p>This is similar to the previous query. First remove leading spaces with <code>sed</code>, then show all content after the first space occurrence with <code>cut</code>. This will reduce the occurrence of false positive matches. With a increasing number of occurrences, the possibility, that the match is a real street name increases.</p>
<p>If you like to use only those street names, which occurs more than ten times you can query like</p>
<pre><code>$ grep &#39;k=&quot;name&quot;&#39; nrw-streets.osm | cut -d\&quot; -f4 | sort | \
&gt; uniq -c | sort -rn | sed -e &#39;s/^[[:space:]]*//&#39; | \
&gt; awk &#39;$1 &gt; 10 { print $0}&#39; | cut -d&#39; &#39; -f2- | wc -l
3352</code></pre>
<p>If you need more streets, matching the above requirements, you can take a bigger pbf file. For non German names, just choose an other country.</p>
<p>The query above for Belgium looks like</p>
<pre><code>$ grep &#39;k=&quot;name&quot;&#39; belgium-streets.osm | cut -d\&quot; -f4 | sort | uniq -c | sort -rn | \ 
&gt; sed -e &#39;s/^[[:space:]]*//&#39; | awk &#39;$1 &gt; 10 { print $0}&#39; | cut -d&#39; &#39; -f2- | wc -l
1778</code></pre>
<p>The top 20 streets for Belgium are</p>
<pre><code>$ grep &#39;k=&quot;name&quot;&#39; belgium-streets.osm | cut -d\&quot; -f4 | sort | uniq -c | sort -rn | \
&gt; sed -e &#39;s/^[[:space:]]*//&#39; | awk &#39;$1 &gt; 10 { print $0}&#39; | cut -d&#39; &#39; -f2- | head -n 20
Kerkstraat
Molenstraat
Nieuwstraat
Schoolstraat
Stationsstraat
Kapelstraat
Veldstraat
Groenstraat
Kasteelstraat
Kloosterstraat
Broekstraat
Bosstraat
Rue du Moulin
Dorpsstraat
Rue de l&amp;apos;Église
Berkenlaan
Beukenlaan
Bergstraat
Lindestraat
Hoogstraat</code></pre>
<p>Looks slightly different, right?</p>
<p>With these flat files you can generate a combination of streets, cities and postal codes. For the postal codes, a random number generator should fit my needs. This will also work for street numbers. With different pbf country files, I can generate localized address test data.</p>]]></summary>
</entry>
<entry>
    <title>using pandoc filters to create graphs with hakyll</title>
    <link href="https://enter-haken.github.io/posts/2017-02-20-pandoc-filter.html" />
    <id>https://enter-haken.github.io/posts/2017-02-20-pandoc-filter.html</id>
    <published>2017-02-20T00:00:00Z</published>
    <updated>2017-02-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>When you want to convert one document format into an other, <a href="https://jaspervdj.be/hakyll/">Pandoc</a> is your friend. <a href="http://pandoc.org/">Hakyll</a> is using it for converting Markdown into HTML. Once installed (eg. via cabal / stack) you can call pandoc from command line.</p>
<pre><code>$ echo &quot;# test&quot; | pandoc -t native
[Header 1 (&quot;test&quot;,[],[]) [Str &quot;test&quot;]]</code></pre>
<p>This simple example shows the native format. A list of definitions can be found at <a href="http://hackage.haskell.org/package/pandoc-types-1.17.0.5/docs/Text-Pandoc-Definition.html">Hackage</a>. Every document format read is converted into this native format. It is the pandoc internal representation of the document.</p>
<pre><code>$ echo &quot;# test&quot; | pandoc -w html
&lt;h1 id=&quot;test&quot;&gt;test&lt;/h1&gt;</code></pre>
<p>You can get a html output as well. A <a href="http://pandoc.org/scripting.html">pandoc filter</a> can be used to inject a custom behavior between reading and writing a document. This feature is needed to write filters to work with Hakyll</p>
<!--more-->
<p>At first I have to look, how to get a graph, more precisely the graph visualization into the Haskell world. Due to my input comes from a markdown document, it will be plain text. The simple approach is to call the external <code>dot</code> process with this <code>String</code> and read the result. If a library is needed for further implementation this part can be switched out.</p>
<pre><code>import System.Process

graph = &quot;digraph { a -&gt; b; b -&gt; c; a -&gt; c; }&quot;

main :: IO()
main = do
    svg &lt;- readProcess &quot;dot&quot; [&quot;-Tsvg&quot;] graph
    putStr svg </code></pre>
<p>In this example you can pipe a <code>String</code> to an external process and get a result as a <code>String IO</code>.</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot;
 &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt;
&lt;!-- Generated by graphviz version 2.38.0 (20140413.2041)
 --&gt;
&lt;!-- Title: %3 Pages: 1 --&gt;
&lt;svg width=&quot;89pt&quot; height=&quot;188pt&quot;
 viewBox=&quot;0.00 0.00 89.00 188.00&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;
&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 184)&quot;&gt;
&lt;title&gt;%3&lt;/title&gt;
&lt;polygon fill=&quot;white&quot; stroke=&quot;none&quot; points=&quot;-4,4 -4,-184 85,-184 85,4 -4,4&quot;/&gt;

...

&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;&lt;title&gt;b&amp;#45;&amp;gt;c&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; d=&quot;M33.3986,-72.411C36.5136,-64.3352 40.3337,-54.4312 43.8346,-45.3547&quot;/&gt;
&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; points=&quot;47.1265,-46.5458 47.4597,-35.9562 40.5955,-44.0267 47.1265,-46.5458&quot;/&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;</code></pre>
<p>This looks promising. I choose <code>svg</code>, because it can be easily integrated into a html document.</p>
<p>At first a create a simple environment for testing. I use a <code>index.html</code> as a simple template,</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;
        &lt;title&gt;hakyll test&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
       &lt;div id=&quot;content&quot;&gt;
            $body$
        &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>and a <code>index.markdown</code> with some test data.</p>
<pre><code># hallo

Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam

```
codeblock
```

Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam

```{lang=&quot;dot&quot;}
digraph graphName { a -&gt; b; b -&gt; c; a -&gt; c; }
```</code></pre>
<p>A hakyll main function can look as following.</p>
<pre><code>{-# LANGUAGE OverloadedStrings #-}
import Hakyll

main :: IO ()
main = hakyll $ do
    match &quot;index.markdown&quot; $ do
        route $ setExtension &quot;html&quot;
        compile $ pandocCompiler 
            &gt;&gt;= loadAndApplyTemplate &quot;template.html&quot; defaultContext

    match &quot;template.html&quot; $ compile templateCompiler</code></pre>
<p>This function will create a single <code>index.html</code> in the output folder. The interesting part here is the <code>pandocCompiler</code>. There is a <a href="https://hackage.haskell.org/package/hakyll-4.9.5.1/docs/Hakyll-Web-Pandoc.html#g:2">derived compiler</a> <code>pandocCompilerWithTransform</code> which allows you to specify a transformation for the given content. Given the type signature <code>pandocCompilerWithTransform :: ReaderOptions -&gt; WriterOptions -&gt; (Pandoc -&gt; Pandoc) -&gt; Compiler (Item String)</code>, I have an entry point for the filter. I need something that takes a <code>Pandoc</code> and returns a <code>Pandoc</code>.</p>
<pre><code>graphViz :: Pandoc -&gt; Pandoc
graphViz = walk codeBlock

codeBlock :: Block -&gt; Block
codeBlock (CodeBlock _ contents) = Para [Str contents]
codeBlock x = x</code></pre>
<p>The <a href="https://hackage.haskell.org/package/pandoc-types-1.19/docs/Text-Pandoc-Walk.html">walk function</a> is used to do something with a specified Pandoc structure. For the filter it is a <code>CodeBlock</code> to look for. This example converts all <code>CodeBlock</code>s into paragraphs.</p>
<p>At this point I need the <code>String</code> representation of the dot lang graph.</p>
<pre><code>svg :: String -&gt; String
svg contents = unsafePerformIO $ readProcess &quot;dot&quot; [&quot;-Tsvg&quot;] contents</code></pre>
<p><a href="http://hackage.haskell.org/package/base-4.9.1.0/docs/System-IO-Unsafe.html#v:unsafePerformIO">unsafePerformIO</a> is a kind of ‘backdoor’. It should be used only with care.</p>
<p>With the new walker,</p>
<pre><code>codeBlock :: Block -&gt; Block
codeBlock cb@(CodeBlock (id, classes, namevals) contents) = 
    case lookup &quot;lang&quot; namevals of
        Just f -&gt; RawBlock (Format &quot;html&quot;) $ svg contents
        nothing -&gt; cb
codeBlock x = x</code></pre>
<p>I can call the custom compiler with the <code>graphViz</code> function.</p>
<pre><code>pandocPostCompiler :: Compiler (Item String)
pandocPostCompiler = pandocCompilerWithTransform
    defaultHakyllReaderOptions
    defaultHakyllWriterOptions
    graphViz</code></pre>
<p>Putting it all together</p>
<pre><code>{-# LANGUAGE OverloadedStrings #-}
import Hakyll
import Text.Pandoc
import Text.Pandoc.Walk ( walk )

import System.Process ( readProcess )
import System.IO.Unsafe ( unsafePerformIO )

main :: IO ()
main = hakyll $ do
    match &quot;index.markdown&quot; $ do
        route $ setExtension &quot;html&quot;
        compile $ pandocPostCompiler 
            &gt;&gt;= loadAndApplyTemplate &quot;template.html&quot; defaultContext

    match &quot;template.html&quot; $ compile templateCompiler

pandocPostCompiler :: Compiler (Item String)
pandocPostCompiler = pandocCompilerWithTransform
    defaultHakyllReaderOptions
    defaultHakyllWriterOptions
    graphViz

graphViz :: Pandoc -&gt; Pandoc
graphViz = walk codeBlock

codeBlock :: Block -&gt; Block
codeBlock cb@(CodeBlock (id, classes, namevals) contents) = 
    case lookup &quot;lang&quot; namevals of
        Just f -&gt; RawBlock (Format &quot;html&quot;) $ svg contents
        nothing -&gt; cb
codeBlock x = x

svg :: String -&gt; String
svg contents = unsafePerformIO $ readProcess &quot;dot&quot; [&quot;-Tsvg&quot;] contents</code></pre>
<p>This code transforms a markdown document into html and converts all codeblocks with a <code>lang</code> tag into a svg version of the given graph. At this point, I don’t use the value of <code>lang</code>. It is possible to implement a different behaviour for other tags or different values.</p>
<p>See the <a href="/example/pandoc/dotlang/index.html">result</a> or check out the <a href="https://github.com/enter-haken/hakyll-dot-demo">code</a>, if you like it.</p>]]></summary>
</entry>
<entry>
    <title>get in touch with react</title>
    <link href="https://enter-haken.github.io/posts/2017-01-02-fist-steps-with-react.html" />
    <id>https://enter-haken.github.io/posts/2017-01-02-fist-steps-with-react.html</id>
    <published>2017-01-02T00:00:00Z</published>
    <updated>2017-01-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Last year I started a little web project for work. After probing some frameworks, I started with <a href="https://facebook.github.io/react/">react</a>. I must say, the tooling around the framework is quite sophisticated.</p>
<p>First of all, <a href="https://www.npmjs.com/">npm</a> is needed for the build tool chain. Via <code>npm install create-react-app -g</code> you’ve got a good point to start. It installs the <a href="https://github.com/facebookincubator/create-react-app">tool chain</a>, needed for creating a development environment.</p>
<!--more-->
<p>Let us take a simple Blog engine as an example. You can setup a new react project with <code>create-react-app Blog</code>. This command creates a new folder named <code>Blog</code> and installs a bunch of tools in the project directory.</p>
<p>With <code>npm start</code> you can take a first look of the generated result. It should look like</p>
<div class="figure">
<img src="/images/react-scaffolded-app.png" />

</div>
<pre><code>Compiled successfully!

The app is running at:

  http://localhost:3000/

Note that the development build is not optimized.
To create a production build, use npm run build.</code></pre>
<p>The development server is up and running. At every time you can make a production build with <code>npm run build</code>. The first build size is with 152kb rather small.</p>
<p>After deleting some unused files you have left an <code>index.html</code> as a starting point for our application.</p>
<pre><code>&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
    &lt;link rel=&quot;shortcut icon&quot; href=&quot;%PUBLIC_URL%/favicon.ico&quot;&gt;
    &lt;title&gt;React App&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>The corresponding <code>index.js</code> looks like</p>
<pre><code>import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import App from &#39;./App&#39;;

ReactDOM.render(
  &lt;App /&gt;,
  document.getElementById(&#39;root&#39;)
);</code></pre>
<p>and the <code>App.js</code> like</p>
<pre><code>import React, { Component } from &#39;react&#39;;

class App extends Component {
  render() {
    return (
      &lt;div className=&quot;App&quot;&gt;
        Test
      &lt;/div&gt;
    );
  }
}

export default App;</code></pre>
<p>The existence of <code>index.html</code> and <code>index.js</code> is mandatory for the build process. Everything else can be changed.</p>
<p>If you are wondering about the weird syntax in the render methods, let me assure you, everything is all right. This is called <a href="https://facebook.github.io/react/docs/introducing-jsx.html">JSX</a> and it is a JavaScript syntax extension. If you like to see, what is JSX in depth, there are some good <a href="https://facebook.github.io/react/docs/jsx-in-depth.html">examples</a> as part of the documentation.</p>
<p>If you are new to ECMAScript &gt;6, look at the <a href="http://es6-features.org/">new features</a>. React uses a lot of them, especially classes, expression bodies and block scoped variables.</p>
<p>We don’t want to code our own CSS framework for our blog engine. There are several possibilities available on the market. Google’s <a href="https://material.io/guidelines/">material design</a> is available for a while. It exists a project, which combines react components with the material design. It is called <a href="http://www.material-ui.com/">material ui</a>.</p>
<p>We are going to use a few components for our blog application. For a working app, material ui requires a theme. Therefore the <code>index.js</code> must be <a href="http://www.material-ui.com/#/get-started/usage">adjusted</a>.</p>
<pre><code>import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import MuiThemeProvider from &#39;material-ui/styles/MuiThemeProvider&#39;;

import App from &#39;./App&#39;;

ReactDOM.render(
  &lt;MuiThemeProvider&gt;
    &lt;App /&gt;
  &lt;/MuiThemeProvider&gt;,
  document.getElementById(&#39;root&#39;)
);</code></pre>
<p>Now we can use the material ui components.</p>
<p>But first, we need some data. For scaffolding, we can use simple json files. Later on, they can be replaced by an api.</p>
<pre><code>{
    &quot;data&quot;: [{
        &quot;Id&quot;: 1,
        &quot;Title&quot;: &quot;Test 1 MainTitle&quot;,
        &quot;SubTitle&quot;: &quot;Test 1 Subtitle&quot;,
        &quot;Text&quot;: &quot;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.&quot;
    },{
        &quot;Id&quot;: 2,
        &quot;Title&quot;: &quot;Test 2 MainTitle&quot;,
        &quot;SubTitle&quot;: &quot;Test 2 Subtitle&quot;,
        &quot;Text&quot;: &quot;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.&quot;
    },{
        &quot;Id&quot;: 3,
        &quot;Title&quot;: &quot;Test 3 MainTitle&quot;,
        &quot;SubTitle&quot;: &quot;Test 3 Subtitle&quot;,
        &quot;Text&quot;: &quot;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.&quot;
    },{
        &quot;Id&quot;: 4,
        &quot;Title&quot;: &quot;Test 4 MainTitle&quot;,
        &quot;SubTitle&quot;: &quot;Test 4 Subtitle&quot;,
        &quot;Text&quot;: &quot;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.&quot;
    }]
}</code></pre>
<p>A blog entry can be viewed with a <a href="http://www.material-ui.com/#/components/card">card</a>.</p>
<p>Every component is either statefull or pure. A statefull component can change after render. A pure component depends only on it’s properties. These properties are filled on creation, so pure components are kind of immutable.</p>
<p>As you design your application you must decide which component should hold the state. For this example I made a pure component <code>BlogPost</code></p>
<pre><code>import React, {
    Component
} from &#39;react&#39;;

import {
    Card,
    CardHeader,
    CardText
} from &#39;material-ui/Card&#39;;

class BlogPost extends Component {
    render() {
      return &lt;Card expanded={true} style={{ marginBottom : &#39;10px&#39; }}&gt;
                &lt;CardHeader
                    title={this.props.title}
                    subtitle={this.props.subTitle}
                /&gt;
                &lt;CardText&gt;
                    {this.props.text} 
                &lt;/CardText&gt;
              &lt;/Card&gt;
    }
}

export default BlogPost;</code></pre>
<p>This component will only render property data.</p>
<pre><code>&lt;BlogPost title=&quot;test&quot; subTitle=&quot;test sub&quot; text=&quot;lorem ipsum&quot; /&gt;</code></pre>
<p>will be rendered to</p>
<div class="figure">
<img src="/images/card-blog-test.png" />

</div>
<p>How do we get our json blog data into our application. For our small example, we extend our <code>App.js</code> to a statefull component. The data will be loaded after application start.</p>
<p>A good place for this is the <a href="https://facebook.github.io/react/docs/react-component.html#componentdidmount">componentDidMount</a> function. Changes on state will cause a rerender of the affected dom elements. We will override this method with.</p>
<pre><code>componentDidMount(){
  fetch(&#39;./blogPosts.json&#39;)
    .then((response) =&gt; {
      return response.json();
    })
    .then((response) =&gt; {
      this.setState({ blogPosts : response.data});
    })
}</code></pre>
<p>After the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">fetch</a> the state will have an array <code>state.blogPosts</code>, which contains all the blog data. For the first posts, this solution will be good enough, but this part is a good candidate for later refactor.</p>
<p>To ensure the <code>state.blogPosts</code> Array exists, it should be initialized in the constructor.</p>
<pre><code>constructor(props){
  super(props);
  this.state = {
      blogPosts : []
  };
}</code></pre>
<p>To render the json data, we must rewrite the <code>render</code> method of our <code>App.js</code> to use the state data.</p>
<pre><code>render() {
  const posts = this.state.blogPosts.map((post) =&gt; {
      return &lt;BlogPost 
          key={post.Id} 
          title={post.Title} 
          subTitle={post.SubTitle} 
          text={post.Text} /&gt;
  });

  return &lt;div className=&quot;App&quot;&gt;
            { posts }
         &lt;/div&gt;
}</code></pre>
<p>The <code>state.blogPosts</code> must be mapped to react components. Due to the JSX extensions, the <code>BlogPost</code> Component can be returned by a simple function. The key property is necessary for react, to identify the dom element, to be rendered on change.</p>
<p>After fetching the data the <code>App.js</code> will look like</p>
<div class="figure">
<img src="/images/card-blog-example.png" />

</div>
<p>Our <a href="/example/react/blog/v1/index.html">v1</a> can display blog data coming from a server (json file). For a <a href="/posts/2016-03-25-mvp.html">skateboard</a> this is ok for now. You can review the source on <a href="https://github.com/enter-haken/reactBlogExample">Github</a></p>]]></summary>
</entry>
<entry>
    <title>six months in new job</title>
    <link href="https://enter-haken.github.io/posts/2016-12-27-new-job.html" />
    <id>https://enter-haken.github.io/posts/2016-12-27-new-job.html</id>
    <published>2016-12-27T00:00:00Z</published>
    <updated>2016-12-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This year is almost done. I got a new place for work and found a new old friend the <a href="https://www.bahn.de">Deutsche Bahn</a>. My way to work consist now of cycling and going by train.</p>
<!--more-->
<blockquote class="twitter-tweet" data-lang="de">
<p lang="en" dir="ltr">
<a href="https://twitter.com/hashtag/Autumn?src=hash">#Autumn</a> arrived <a href="https://twitter.com/hashtag/canyonbikes?src=hash">#canyonbikes</a> <a href="https://t.co/AJqizUfHgj">pic.twitter.com/AJqizUfHgj</a>
</p>
— Jan Frederik Hake (<span class="citation">@enter_haken</span>) <a href="https://twitter.com/enter_haken/status/790937282794647553">25. Oktober 2016</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>I’ve kept the ten kilometers cycling, but instead of urban canyons, I’ve got more nature.</p>
<blockquote class="twitter-tweet" data-lang="de">
<p lang="en" dir="ltr">
<a href="https://twitter.com/hashtag/Dortmund?src=hash">#Dortmund</a> before sunset <a href="https://t.co/WM7tfIdw75">pic.twitter.com/WM7tfIdw75</a>
</p>
— Jan Frederik Hake (<span class="citation">@enter_haken</span>) <a href="https://twitter.com/enter_haken/status/783731969117028354">5. Oktober 2016</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>It is ok for now. If you remove the December (German Christmas market time), I have approximately one our for one direction.</p>
<p>From a professional point of view it has become more quiet. I am currently working on a mature dot net stack. My work is planed and reviewed by several instances. I am in a controlled environment and there are less surprises.</p>
<p>At this time, this is exactly what I need, but how looks the next step like?</p>
<p>My batteries are full again, and I’ve got more effective time for my own. My work life has become more predictable and stable. Time to build something cool ;)</p>]]></summary>
</entry>
<entry>
    <title>days left</title>
    <link href="https://enter-haken.github.io/posts/2016-05-11-daysLeft.html" />
    <id>https://enter-haken.github.io/posts/2016-05-11-daysLeft.html</id>
    <published>2016-05-11T00:00:00Z</published>
    <updated>2016-05-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>After almost four years, I am moving on towards a new job. Removing the german holydays, weekends and vacations, there are only 23 working days left.</p>
<p>This is not very much time, considering the work, which have to be completed before I leave. So I decided to build something simple to direct my attention to the last days.</p>
<!--more-->
<p>I currently running a <a href="https://gentoo.org">Gentoo</a> system with <a href="http://dwm.suckless.org">dwm</a> as a window manager. My <em>.xinitrc</em> looks like this:</p>
<pre><code>xscreensaver &amp;
(conky | while read LINE; do xsetroot -name &quot;$LINE&quot;; done) &amp;
exec dwm</code></pre>
<p><a href="https://github.com/brndnmtthws/conky">conky</a> is one way to update the root window in a specific intervall. Now I need a little programm, that returns my last working days. After a little <a href="https://github.com/enter-haken/daysleft">python magic</a> my <em>.conkyrc</em> looks like this:</p>
<pre><code>update_interval 60.0

TEXT
${exec daysLeft -d 2016-06-17 -w -e 2016-05-18 2016-05-27 2016-05-16 2016-05-26 } working days left | ${exec oneLineStatus} | ${exec date &quot;+%d.%m.%Y %R&quot;}</code></pre>
<p>I think, the <a href="https://twitter.com/enter_haken/status/730390519705128962">first version</a> is all I need, to keep fokus on the last days of my current job.</p>
<blockquote class="twitter-tweet" data-lang="de">
<p lang="en" dir="ltr">
the days are counted… <a href="https://t.co/QYpCi9HG7B">pic.twitter.com/QYpCi9HG7B</a>
</p>
— Jan Frederik Hake (<span class="citation">@enter_haken</span>) <a href="https://twitter.com/enter_haken/status/730390519705128962">11. Mai 2016</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></summary>
</entry>

</feed>
